"use strict";
var shaderInfinityRT_Corevs = "#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\ninvariant gl_Position;\nattribute vec3 aVertexPosition;\nattribute vec3 aNormal;\nattribute vec2 aTextureCoord;\n#if uvch > 1\nattribute vec2 aTextureCoord2;\n#endif\n\nuniform vec3 uCamPos;\nuniform mat4 uMVPMatrix;\nuniform mat4 uOMatrix;\nuniform vec2 jitter;\n\nvarying vec2 tex1;\nvarying vec2 tex2;\nvarying vec3 g_norm;\nvarying vec3 eyeDir;\nvarying vec3 vert;\n\n#if usesTangents\nattribute vec3 aSurfTanU;\nvarying vec3 bu;\nvarying vec3 bv;\n#endif\n\n#if amboccusevertcol\nuniform int amboccchannel;\nattribute vec4 aColor;\nvarying float vcolor;\n#endif\n\n#if skinned > 0\nuniform int numBones;\nuniform mat4 matBone[4];\nattribute vec4 a_skinweights;\n#endif\n\n#if geomgen == 4 || geomgen == 5\nuniform vec3 bbmin;\nuniform vec3 bbmax;\nuniform vec2 texbbmin;\nuniform vec2 texbbmax;\n#if uvch > 1\nuniform vec2 tex2bbmin;\nuniform vec2 tex2bbmax;\n#endif\n#endif\n\nvoid main(void)\n{\n#if geomgen == 4\nvec3 v = (aVertexPosition / vec3(65535.0)) * (bbmax - bbmin) + bbmin;\nvec4 vPosition = uOMatrix * vec4(v, 1.0);\ntex1 = (aTextureCoord / vec2(65535.0)) * (texbbmax - texbbmin) + texbbmin;\n#if uvch > 1\ntex2 = (aTextureCoord2 / vec2(65535.0)) * (tex2bbmax - tex2bbmin) + tex2bbmin;\n#else\ntex2 = tex1;\n#endif\nvec3 vn = aNormal / vec3(32757.0);\n#elif geomgen == 5\nvec3 v = (aVertexPosition / vec3(16383.0)) * (bbmax - bbmin) + bbmin;\nvec4 vPosition = uOMatrix * vec4(v, 1.0);\ntex1 = (aTextureCoord / vec2(16383.0)) * (texbbmax - texbbmin) + texbbmin;\nvec3 vn = aNormal / vec3(8191.0);\n#if uvch > 1\ntex2 = (aTextureCoord2 / vec2(16383.0)) * (tex2bbmax - tex2bbmin) + tex2bbmin;\n#else\ntex2 = tex1;\n#endif\n#else\nvec3 v = aVertexPosition;\n#if eScale\nvec3 vertpos = aVertexPosition;\nvec3 frac = (vertpos - floor(vertpos))*6.59623;\nvertpos -= (step(0.5, frac - floor(frac))*2.0 - 1.0)*float(eScale);\nvec4 vPosition = uOMatrix * vec4(vertpos, 1.0);\n#else\nvec4 vPosition = uOMatrix * vec4(aVertexPosition, 1.0);\n#endif\ntex1 = aTextureCoord;\n#if uvch > 1\ntex2 = aTextureCoord2;\n#else\ntex2 = tex1;\n#endif\nvec3 vn = aNormal;\n#endif\n#if usesTangents\nvec3 tanu = aSurfTanU;\n#endif\n\n#if skinned > 0\nif (numBones > 0) {\nvec4 tvert = vec4(0.0);\nvec3 tnorm = vec3(0.0);\n#if geomgen == 5\nvec4 skinweights = a_skinweights / vec4(16383.0);\n#else\nvec4 skinweights = a_skinweights;\n#endif\nfor (int boneIdx = 0; boneIdx < 4; boneIdx++)\n{\nif (boneIdx >= numBones)\nbreak;\nfloat weight = skinweights[boneIdx];\ntvert += weight * (matBone[boneIdx] * vec4(v, 1.0));\ntnorm += weight * (matBone[boneIdx] * vec4(vn, 0.0)).xyz;\n}\nvPosition = tvert;\ng_norm = vn = normalize(tnorm);\n}\nelse\n#endif\n{\ng_norm = normalize(uOMatrix * vec4(vn,0.0)).xyz;\n}\ngl_Position = uMVPMatrix * vPosition;\n\nvert = vPosition.xyz;\ngl_Position.xy += jitter * gl_Position.w;\n#if usesTangents\nbu = tanu;\nbv = cross(vn, tanu);\n#endif\neyeDir = (vPosition.xyz - uCamPos);\n\n#if amboccusevertcol\nif (amboccchannel == 3)\nvcolor = aColor.a;\nelse if (amboccchannel == 2)\nvcolor = aColor.b;\nelse if (amboccchannel == 1)\nvcolor = aColor.g;\nelse\nvcolor = aColor.r;\n#endif\n}\n";var shaderInfinityRT_Headerfs = "\nvec3 spow(vec3 f0, vec3 f1)\n{\nreturn vec3((f0.x < 0.0) ? 0.0 : pow(f0.x, f1.x),\n(f0.y < 0.0) ? 0.0 : pow(f0.y, f1.y),\n(f0.z < 0.0) ? 0.0 : pow(f0.z, f1.z));\n}\n\nfloat spow(float f0, float f1)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn pow(f0, f1);\n}\n\nfloat Pow2(float x)\n{\nreturn x*x;\n}\n\nfloat Pow4(float x)\n{\nfloat xx = x*x;\nreturn xx * xx;\n}\n\nfloat saturate(float x)\n{\nreturn clamp(x, 0.0, 1.0);\n}\n\nfloat lerp(float a, float b, float x)\n{\nreturn mix(a, b, x);\n}\n\nvec3 lerp(vec3 a, vec3 b, float x)\n{\nreturn mix(a, b, x);\n}\n\nvec3 lerp(vec3 a, vec3 b, vec3 x)\n{\nreturn mix(a, b, x);\n}\n\nfloat rcp(float x)\n{\nreturn 1.0 / x;\n}\n\nfloat Square(float x)\n{\nreturn x*x;\n}\n\nvec3 Square(vec3 x)\n{\nreturn x*x;\n}\n\nfloat Pow5(float x)\n{\nfloat xx = x*x;\nreturn xx * xx * x;\n}\n\nvec3 Pow5(vec3 x)\n{\nvec3 xx = x*x;\nreturn xx * xx * x;\n}\n\nfloat tetr(float f0)\n{\nreturn spow(f0, f0);\n}\n\nfloat ssqrt(float f0)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn sqrt(f0);\n}\n\nfloat rsqrt(float f0)\n{\nreturn 1.0/sqrt(f0);\n}\n\nfloat av(float a, float b)\n{\nreturn 0.5*(a + b);\n}\n\nvec3 av(vec3 a, vec3 b)\n{\nreturn 0.5*(a + b);\n}\n\nfloat av3(float a, float b, float c)\n{\nreturn (a + b + c) / 3.0;\n}\n\nfloat rt2()\n{\nreturn 1.41421356;\n}\n\nfloat mx3(float a, float b, float c)\n{\nreturn max(max(a, b), c);\n}\n\nfloat len3(float a, float b, float c)\n{\nreturn length(vec3(a, b, c));\n}\n\nfloat dpang(float bg)\n{\nreturn (acos(bg)) / (0.5*3.14159265358);\n}\n\nvec3 funchighlight(vec3 v00, vec3 v01)\n{\nvec3 v02 = sqrt(v00);\nvec3 v03 = v01*v02;\nvec3 v04 = min(v02, v00);\nvec3 v05 = v04 - v03;\nvec3 v06 = av(v04, v05);\nvec3 v07 = av(v05, v06);\nvec3 v08 = av(v07, v02);\nvec3 v09 = min(v08, v00);\nreturn v09;\n}\n\nfloat funcdscs315_1_red(float v00)\n{\nfloat v01 = ssqrt(v00);\nfloat v02 = 0.571612;\nfloat v04 = v01 - v02;\nfloat v06 = 0.326853;\nfloat v07 = v04 + v01;\nfloat v08 = v06 + v07;\nfloat v10 = v04 + v08;\nfloat v13 = spow(v02, v10);\nfloat v15 = spow(v01, v13);\nreturn v15;\n}\n\nfloat funcdscs315_1_green(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = v01 + v00;\nfloat v04 = 0.207953;\nfloat v05 = 0.103824;\nfloat v06 = spow(v05, v02);\nfloat v07 = v06*v01;\nfloat v09 = spow(v04, v02);\nfloat v12 = spow(v05, v07);\nfloat v13 = spow(v12, v00);\nfloat v15 = v13 - v09;\nreturn v15;\n}\n\nfloat funcdscs315_1_blue(float v00)\n{\nfloat v01 = ssqrt(v00);\nfloat v02 = v00*v01;\nfloat v03 = v01 + v00;\nfloat v04 = spow(v02, v02);\nfloat v05 = -0.780725;\nfloat v07 = v04*v05;\nfloat v08 = v04 - v01;\nfloat v09 = v03*v02;\nfloat v11 = spow(v00, v07);\nfloat v12 = spow(v11, v08);\nfloat v14 = v09 - v03;\nfloat v16 = v08 - v14;\nfloat v18 = spow(v16, v12);\nfloat v23 = v07*v18;\nfloat v24 = spow(v11, v23);\nreturn v24;\n}\n\nfloat funcdscs315_2_red(float v00)\n{\nfloat v01 = v00*v00;\nfloat v02 = v01*v01;\nfloat v03 = v00 - v01;\nfloat v04 = 0.721305;\nfloat v05 = v04 - v03;\nfloat v07 = v00 + v03;\nfloat v09 = v02 + v05;\nfloat v10 = spow(v07, v09);\nreturn v10;\n}\n\nfloat funcdscs315_2_green(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = 0.067293;\nfloat v03 = 0.779595;\nfloat v05 = spow(v02, v01);\nfloat v06 = v01*v05;\nfloat v07 = spow(v06, v03);\nfloat v09 = spow(v07, v05);\nreturn v09;\n}\n\nfloat funcdscs315_2_blue(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = spow(v00, v01);\nfloat v03 = spow(v02, v02);\nfloat v04 = v00 - v02;\nfloat v05 = spow(v03, v02);\nfloat v06 = 0.796991;\nfloat v07 = v04 + v05;\nfloat v08 = spow(v07, v06);\nreturn v08;\n}\n\nvec3 ApplyInputCC(vec3 col, vec4 inputCC)\n{\n\nif (inputCC.a != 1.0)\ncol = pow(col, vec3(1.0 / inputCC.a));\n\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + inputCC.b * (col - rgbGrey);\nreturn ((rgbSat - 0.5) * inputCC.g + 0.5) + inputCC.r;\n}\n\nvec4 ReadRTTextureFAng(sampler2D texSampler, ivec2 texData, mat3 texUVT, vec3 N, vec3 E, vec3 P, vec3 fAngVector)\n{\n\nfloat dotnd = dot(N, E);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat FAng = 3.0 * acos(-dotnd) / (3.14159625*0.5);\n\nFAng += .1 * dot(P, fAngVector);\nreturn texture2D(texSampler, vec2(FAng, 0.5), mipmapbias);\n}\n\nvec4 ReadRTTexture(sampler2D texSampler, ivec2 texData, mat3 texUVT, vec3 N, vec3 E)\n{\nif (texData.y == 0)\n{\nreturn texture2D(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\n}\nelse if (texData.y == 7)\n{\nreturn texture2D(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias).rrrr;\n}\nelse if (texData.y == 8)\n{\nreturn texture2D(texSampler, (texUVT*vec3(tex2, 1.0)).xy, mipmapbias);\n}\nelse if (texData.y == 9)\n{\nreturn texture2D(texSampler, (texUVT*vec3(tex2, 1.0)).xy, mipmapbias).rrrr;\n}\nelse if (texData.y == 1)\n{\n\nfloat dotnd = dot(N, E);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat FAng = acos(-dotnd) / (3.14159625*0.5);\nreturn texture2D(texSampler, vec2(FAng, 0.5), mipmapbias);\n}\n#if extOESSD\nelse if (texData.y == 2 && aarefinecount == -1)\n{\n\nvec4 pix;\nvec2 dxTex = 0.5*dFdx(tex1);\nvec2 dyTex = 0.5*dFdy(tex1);\npix = texture2D(texSampler, (texUVT*vec3(tex1-dxTex-dyTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1+dxTex-dyTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1-dxTex+dyTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1+dxTex+dyTex, 1.0)).xy, mipmapbias);\npix *= 0.25;\nreturn pix;\n}\nelse if (texData.y == 3 && aarefinecount == -1)\n{\n\nvec4 pix;\nvec2 dxTex = 0.5*dFdx(tex1);\nvec2 dyTex = 0.5*dFdy(tex1);\n\npix = texture2D(texSampler, (texUVT*vec3(tex1-dyTex-dxTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1-dyTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1-dyTex+dxTex, 1.0)).xy, mipmapbias);\n\npix += texture2D(texSampler, (texUVT*vec3(tex1-dxTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1+dxTex, 1.0)).xy, mipmapbias);\n\npix += texture2D(texSampler, (texUVT*vec3(tex1+dyTex-dxTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1+dyTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1+dyTex+dxTex, 1.0)).xy, mipmapbias);\n\npix /= 9.0;\nreturn pix;\n}\nelse if (texData.y == 4 && aarefinecount == -1)\n{\n\nvec4 pix;\nvec2 dxTex = 0.5*dFdx(tex1);\nvec2 dyTex = 0.5*dFdy(tex1);\n\npix = 0.25*texture2D(texSampler, (texUVT*vec3(tex1 - dyTex - dxTex, 1.0)).xy, mipmapbias);\npix += 0.5*texture2D(texSampler, (texUVT*vec3(tex1 - dyTex, 1.0)).xy, mipmapbias);\npix += 0.25*texture2D(texSampler, (texUVT*vec3(tex1 - dyTex + dxTex, 1.0)).xy, mipmapbias);\n\npix += 0.5*texture2D(texSampler, (texUVT*vec3(tex1 - dxTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\npix += 0.5*texture2D(texSampler, (texUVT*vec3(tex1 + dxTex, 1.0)).xy, mipmapbias);\n\npix += 0.25*texture2D(texSampler, (texUVT*vec3(tex1 + dyTex - dxTex, 1.0)).xy, mipmapbias);\npix += 0.5*texture2D(texSampler, (texUVT*vec3(tex1 + dyTex, 1.0)).xy, mipmapbias);\npix += 0.25*texture2D(texSampler, (texUVT*vec3(tex1 + dyTex + dxTex, 1.0)).xy, mipmapbias);\n\npix /= 4.0;\nreturn pix;\n}\n#endif\nelse if (texData.y == 5)\n{\nvec3 dir = normalize(vert);\nvec2 latlong = vec2(mod((atan(-dir.x, dir.z) * 0.15915494309)+1.0, 1.0), 1.0-(acos(dir.y) * 0.31830988618));\nreturn texture2D(texSampler, latlong, mipmapbias);\n}\nreturn texture2D(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\n}\n\nvec3 RT_rand3(vec3 n) { return 2.0*fract(sin(n) * 43758.5453123) - 1.0; }\n\nuniform vec3 uCamPos;\nvec3 RT_Flakes(vec3 ngnormA, vec3 neyeDir, float size, float intensity)\n{\nfloat dotnd = dot(neyeDir, ngnormA);\nif (dotnd > 0.0)\ndotnd = -dotnd;\n\nfloat projfac = 1000.0*scenesize*fovfactor;\nfloat projsize = min(1.0, projfac*(-dotnd*size / length(uCamPos - vert)));\nif (projsize > 3.0)\nprojsize = 3.0;\n\nintensity *= 0.25*projsize;\n\nif (intensity < 0.01)\nreturn ngnormA;\nintensity -= 0.01;\n\nvec3 flakepos = vert;\nflakepos *= 1.0 / (size*(2.828427));\n\nvec3 r0 = RT_rand3(floor(vec3(dot(flakepos, vec3(0.0, 0.707106, 0.707106)) + 347.0, dot(flakepos, vec3(0.0, -0.707106, 0.707106)) + 125.0, dot(flakepos, vec3(0.707106, 0.0, 0.707106))) + 2376.0))\n+ RT_rand3(floor(vec3(dot(flakepos, vec3(-0.707106, 0.0, 0.707106)) + 674.0, dot(flakepos, vec3(0.707106, 0.707106, 0.0)) + 8294.0, dot(flakepos, vec3(-0.707106, 0.707106, 0.0))) + 263.0));\nfloat v = r0.x + r0.y + r0.z;\n\nvec3 valv0 = RT_rand3(vec3(v, v + 413.0, v + 273.0));\nvec3 valv1 = RT_rand3(vec3(v + 317.0, v + 113.0, v + 573.0));\n\n\nvec3 ax1 = normalize(valv0 - dot(ngnormA, valv0)*ngnormA);\nvec3 ax2 = cross(ngnormA, ax1);\n\n\nvec2 uv = 0.49*valv1.xy + 0.5;\nfloat gScale = sqrt(-2.0 * log(uv.x));\ngScale = max(gScale-1.0, 0.0);\nfloat z0 = gScale*cos(uv.y *2.0 *3.14159265);\nfloat z1 = gScale*sin(uv.y *2.0 *3.14159265);\n\n\nvec3 pert = ngnormA;\npert += ax1*z0*intensity;\npert += ax2*z1*intensity;\nreturn normalize(pert);\n}\n\nfloat intensity(in vec4 color){\nreturn sqrt((color.x*color.x)+(color.y*color.y)+(color.z*color.z));\n}\n\nvec3 ApplyLUT(vec3 textureColor)\n{\nreturn textureColor;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\n\n\nvec3 ApplyColorCorrection(vec3 col)\n{\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + cc_saturation * (col - rgbGrey);\nreturn ((rgbSat-0.5) * cc_contrast + 0.5) * cc_tint.rgb + cc_brightness;\n}\n";var shaderInfinityRT_Header_Minifs = "\nvec3 spow(vec3 f0, vec3 f1)\n{\nreturn vec3((f0.x < 0.0) ? 0.0 : pow(f0.x, f1.x),\n(f0.y < 0.0) ? 0.0 : pow(f0.y, f1.y),\n(f0.z < 0.0) ? 0.0 : pow(f0.z, f1.z));\n}\n\nfloat spow(float f0, float f1)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn pow(f0, f1);\n}\n\nfloat Pow2(float x)\n{\nreturn x*x;\n}\n\nfloat Pow4(float x)\n{\nfloat xx = x*x;\nreturn xx * xx;\n}\n\nfloat saturate(float x)\n{\nreturn clamp(x, 0.0, 1.0);\n}\n\nfloat lerp(float a, float b, float x)\n{\nreturn mix(a, b, x);\n}\n\nvec3 lerp(vec3 a, vec3 b, float x)\n{\nreturn mix(a, b, x);\n}\n\nvec3 lerp(vec3 a, vec3 b, vec3 x)\n{\nreturn mix(a, b, x);\n}\n\nfloat rcp(float x)\n{\nreturn 1.0 / x;\n}\n\nfloat Square(float x)\n{\nreturn x*x;\n}\n\nvec3 Square(vec3 x)\n{\nreturn x*x;\n}\n\nfloat Pow5(float x)\n{\nfloat xx = x*x;\nreturn xx * xx * x;\n}\n\nvec3 Pow5(vec3 x)\n{\nvec3 xx = x*x;\nreturn xx * xx * x;\n}\n\nfloat tetr(float f0)\n{\nreturn spow(f0, f0);\n}\n\nfloat ssqrt(float f0)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn sqrt(f0);\n}\n\nfloat rsqrt(float f0)\n{\nreturn 1.0/sqrt(f0);\n}\n\nfloat av(float a, float b)\n{\nreturn 0.5*(a + b);\n}\n\nvec3 av(vec3 a, vec3 b)\n{\nreturn 0.5*(a + b);\n}\n\nfloat av3(float a, float b, float c)\n{\nreturn (a + b + c) / 3.0;\n}\n\nfloat rt2()\n{\nreturn 1.41421356;\n}\n\nfloat mx3(float a, float b, float c)\n{\nreturn max(max(a, b), c);\n}\n\nfloat len3(float a, float b, float c)\n{\nreturn length(vec3(a, b, c));\n}\n\nfloat dpang(float bg)\n{\nreturn (acos(bg)) / (0.5*3.14159265358);\n}\n\nvec3 funchighlight(vec3 v00, vec3 v01)\n{\nvec3 v02 = sqrt(v00);\nvec3 v03 = v01*v02;\nvec3 v04 = min(v02, v00);\nvec3 v05 = v04 - v03;\nvec3 v06 = av(v04, v05);\nvec3 v07 = av(v05, v06);\nvec3 v08 = av(v07, v02);\nvec3 v09 = min(v08, v00);\nreturn v09;\n}\n\nvec3 ApplyInputCC(vec3 col, vec4 inputCC)\n{\n\nif (inputCC.a != 1.0)\ncol = pow(col, vec3(1.0 / inputCC.a));\n\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + inputCC.b * (col - rgbGrey);\nreturn ((rgbSat - 0.5) * inputCC.g + 0.5) + inputCC.r;\n}\n\nvec4 ReadRTTexture(sampler2D texSampler, ivec2 texData, mat3 texUVT, vec3 N, vec3 E)\n{\nreturn texture2D(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\n}\n\nfloat intensity(in vec4 color){\nreturn sqrt((color.x*color.x)+(color.y*color.y)+(color.z*color.z));\n}\n\nvec3 ApplyLUT(vec3 textureColor)\n{\nreturn textureColor;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\nvec3 ApplyColorCorrection(vec3 col)\n{\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + cc_saturation * (col - rgbGrey);\nreturn ((rgbSat-0.5) * cc_contrast + 0.5) * cc_tint + cc_brightness;\n}\n";var shaderInfinityRT_Corefs = "#if extOESSD\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n#if hasDiffuseEnv\nuniform samplerCube diffuseenv;\n#endif\n#if hasDiffuseTexture\nuniform sampler2D diffusetexture;\nuniform mat3 diffuseUVT;\n#endif\nuniform vec3 diffusecolor;\n\nuniform samplerCube glossyenv;\n#if hasGlossyTexture\nuniform sampler2D glossytexture;\nuniform mat3 glossyUVT;\n#endif\nuniform vec3 glossycolor;\n\nuniform samplerCube specularenv;\n#if hasSpecularTexture\nuniform sampler2D speculartexture;\nuniform mat3 specularUVT;\n#endif\nuniform vec3 specularcolor;\n\nuniform int fresnel;\nuniform float degree_0_specular;\nuniform float degree_90_specular;\nuniform float brdf_curve;\n\n#if hasAlphaTexture\nuniform sampler2D alphatexture;\nuniform mat3 alphaUVT;\n#endif\n\n#if hasBumpTexture\nuniform sampler2D bumptexture;\nuniform mat3 bumpUVT;\nuniform float bumpuserscale;\nvarying vec3 bu;\nvarying vec3 bv;\n#endif\n\n#if hasAdditionalTexture\nuniform sampler2D additionaltexture;\nuniform mat3 additionalUVT;\n#endif\nuniform vec3 additionalcolor;\n\n#if hasAmbOccTexture\nuniform sampler2D ambocctexture;\nuniform mat3 amboccUVT;\n#endif\n\nuniform float invertreflectiony;\nuniform float mipmapbias;\n\nuniform float gamma;\nuniform int refractionmode;\nuniform float highlightcompression;\nuniform int uhasLUTTexture;\n\nuniform float vignetting;\nuniform vec2 viewportsize;\nuniform int aarefinecount;\nuniform float scenesize;\nuniform float fovfactor;\n\nvarying vec2 tex1;\nvarying vec2 tex2;\nvarying vec3 g_norm;\nvarying vec3 eyeDir;\nvarying vec3 vert;\n\nuniform float cc_brightness;\nuniform float cc_contrast;\nuniform float cc_saturation;\nuniform vec3 cc_tint;\n\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\nSIRT_STANDARD_HEADER_INSERT\n\nvoid main(void)\n{\nvec3 reflectDir;\nvec3 neyeDir = normalize(eyeDir);\n\nvec3 ngnorm = g_norm;\n#if hasBumpTexture\nvec3 bumpValue = (texture2D(bumptexture, (bumpUVT*vec3(tex1,1.0)).xy, mipmapbias).xyz-0.498039)*2.0;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\nngnorm = normalize(ngnorm);\n#endif\n\nreflectDir = reflect(neyeDir, ngnorm);\nreflectDir = normalize(reflectDir);\nreflectDir.y *= invertreflectiony;\n\n\n\n\nvec4 diffuseSum = vec4(diffusecolor, 1.0);\n#if hasDiffuseEnv\nvec4 diffuseSample = textureCube(diffuseenv, ngnorm);\n#if encodeenvmapsinmono\nif (diffuseSample.b<1.0) diffuseSample=vec4(vec3(diffuseSample.r+diffuseSample.g+diffuseSample.b), 1.0);\nelse diffuseSample=vec4(vec3(diffuseSample.b+(1.0-diffuseSample.r)+(1.0-diffuseSample.g)+2.0), 1.0);\n#else\ndiffuseSample = vec4(diffuseSample.rgb+(1.0-diffuseSample.a)*64.0, 1.0);\n#endif\n#if hdribias\ndiffuseSample.rgb = pow(diffuseSample.rgb, vec3(gamma));\n#endif\ndiffuseSum *= diffuseSample;\n#endif\n#if hasDiffuseTexture\ndiffuseSum *= texture2D(diffusetexture, (diffuseUVT*vec3(tex1,1.0)).xy, mipmapbias);\n#endif\n\n\nvec4 glossySum = textureCube(glossyenv, reflectDir);\n#if encodeenvmapsinmono\nif (glossySum.b<1.0) glossySum=vec4(vec3(glossySum.r+glossySum.g+glossySum.b), 1.0);\nelse glossySum=vec4(vec3(glossySum.b+(1.0-glossySum.r)+(1.0-glossySum.g)+2.0), 1.0);\n#else\nglossySum = vec4(glossySum.rgb+(1.0-glossySum.a)*64.0, 1.0);\n#endif\n#if hdribias\nglossySum.rgb = pow(glossySum.rgb, vec3(gamma));\n#endif\nglossySum *= vec4(glossycolor, 1.0);\n#if hasGlossyTexture\nglossySum *= texture2D(glossytexture, (glossyUVT*vec3(tex1,1.0)).xy, mipmapbias);\n#endif\n\n\nvec4 specularSum = textureCube(specularenv, reflectDir);\n#if encodeenvmapsinmono\nif (specularSum.b<1.0) specularSum=vec4(vec3(specularSum.r+specularSum.g+specularSum.b), 1.0);\nelse specularSum=vec4(vec3(specularSum.b+(1.0-specularSum.r)+(1.0-specularSum.g)+2.0), 1.0);\n#else\nspecularSum = vec4(specularSum.rgb+(1.0-specularSum.a)*64.0, 1.0);\n#endif\n#if hdribias\nspecularSum.rgb = pow(specularSum.rgb, vec3(gamma));\n#endif\nspecularSum *= vec4(specularcolor, 1.0);\n#if hasSpecularTexture\nspecularSum *= texture2D(speculartexture, (specularUVT*vec3(tex1,1.0)).xy, mipmapbias);\n#endif\n\n\nif (fresnel != 0)\n{\nfloat dotnd = dot(neyeDir, ngnorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat fresnelFactor = pow(acos(-dotnd) / (3.14159625*0.5), brdf_curve);\nfresnelFactor = (fresnelFactor*degree_90_specular) + ((1.0-fresnelFactor)*degree_0_specular);\ndiffuseSum *= (1.0 - fresnelFactor);\nglossySum *= (1.0 - fresnelFactor);\nspecularSum *= fresnelFactor;\n}\n\n\nvec4 additionalSum = vec4(additionalcolor, 1.0);\n#if hasAdditionalTexture\nadditionalSum *= texture2D(additionaltexture, (additionalUVT*vec3(tex1,1.0)).xy, mipmapbias);\n#endif\n\n\n#if hasAmbOccTexture\nvec4 ambOccSum = diffuseSum + glossySum + specularSum;\nambOccSum *= texture2D(ambocctexture, (amboccUVT*vec3(tex1,1.0)).xy, mipmapbias);\ngl_FragColor = ambOccSum + additionalSum;\n#else\ngl_FragColor = diffuseSum + glossySum + specularSum + additionalSum;\n#endif\n\n\n#if hasAlphaTexture\ngl_FragColor.a = texture2D(alphatexture, (alphaUVT*vec3(tex1,1.0)).xy, mipmapbias).x;\n#if hasBrightReflections\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\n#endif\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\ngl_FragColor.rgb = funchighlight(gl_FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\ngl_FragColor.rgb = vec3(funcdscs315_1_red(gl_FragColor.r), funcdscs315_1_green(gl_FragColor.g), funcdscs315_1_blue(gl_FragColor.b));\n#elif (camresponse == 306)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\n\ngl_FragColor.rgb = vec3(funcdscs315_2_green(gl_FragColor.r), funcdscs315_2_green(gl_FragColor.g), funcdscs315_2_green(gl_FragColor.b));\n#endif\n\nif (gamma != 1.0)\ngl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1.0/gamma));\n\nif (refractionmode == 1)\nreturn;\n\n#if BUILDVERSION < 423\nif (uhasLUTTexture != 0)\ngl_FragColor.rgb = ApplyLUT(gl_FragColor.rgb);\n#endif\n\ngl_FragColor.rgb = ApplyColorCorrection(gl_FragColor.rgb);\n\nif (vignetting > 0.0)\ngl_FragColor.rgb = gl_FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n#if BUILDVERSION >= 423\nif (uhasLUTTexture != 0)\ngl_FragColor.rgb = ApplyLUT(gl_FragColor.rgb);\n#endif\n}\nif (isSecondaryMat != 0){\ngl_FragColor.a = gl_FragColor.a * secondaryMatAlpha;\ngl_FragColor.r = gl_FragColor.r * secondaryMatAlpha;\ngl_FragColor.g = gl_FragColor.g * secondaryMatAlpha;\ngl_FragColor.b = gl_FragColor.b * secondaryMatAlpha;\n}\n}\n";var shaderInfinityRT_Glassfs = "#if extOESSD\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n\nuniform samplerCube specularenv;\nuniform ivec2 specularTexData;\nuniform sampler2D speculartexture;\nuniform mat3 specularUVT;\nuniform vec3 specularcolor;\n\nuniform ivec2 baseTexData;\nuniform sampler2D basetexture;\nuniform mat3 baseUVT;\nuniform vec3 basecolor;\n\nuniform ivec2 bumpTexData;\nuniform sampler2D bumptexture;\nuniform mat3 bumpUVT;\nuniform float bumpuserscale;\nvarying vec3 bu;\nvarying vec3 bv;\n\nuniform float degree_0_specular;\nuniform float degree_90_specular;\nuniform float brdf_curve;\n\nuniform float mipmapbias;\n\nuniform float gamma;\nuniform int refractionmode;\nuniform float highlightcompression;\nuniform int uhasLUTTexture;\n\nuniform float vignetting;\nuniform vec2 viewportsize;\nuniform int aarefinecount;\nuniform float scenesize;\nuniform float fovfactor;\n\n#if PlanarReflectPassActive\n\nuniform vec3 planarreflectstrength;\nuniform sampler2D texPlanarReflect;\n#endif\n\nuniform vec3 exposure;\n\nvarying vec2 tex1;\nvarying vec2 tex2;\nvarying vec3 g_norm;\nvarying vec3 eyeDir;\nvarying vec3 vert;\n\nuniform float cc_brightness;\nuniform float cc_contrast;\nuniform float cc_saturation;\nuniform vec3 cc_tint;\n\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\nSIRT_STANDARD_HEADER_INSERT\n\nvoid main()\n{\nvec3 reflectDir;\nvec3 neyeDir = normalize(eyeDir);\n\nvec3 ngnorm = g_norm;\nif (bumpTexData.x != 0) {\nvec3 bumpValue = (texture2D(bumptexture, (bumpUVT*vec3(tex1,1.0)).xy, mipmapbias).xyz-0.498039)*2.0;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\n}\nngnorm = normalize(ngnorm);\n\nreflectDir = reflect(neyeDir, ngnorm);\nreflectDir = normalize(reflectDir);\n\n\nvec4 specularSum = textureCube(specularenv, reflectDir);\n#if encodeenvmapsinmono\nif (specularSum.b<1.0) specularSum=vec4(vec3(specularSum.r+specularSum.g+specularSum.b), 1.0);\nelse specularSum=vec4(vec3(specularSum.b+(1.0-specularSum.r)+(1.0-specularSum.g)+2.0), 1.0);\n#else\nspecularSum = vec4(specularSum.rgb+(1.0-specularSum.a)*64.0, 1.0);\n#endif\n#if hdribias\nspecularSum.rgb = pow(specularSum.rgb, vec3(gamma));\n#endif\nvec4 specularScale = vec4(specularcolor, 1.0);\nif (specularTexData.x != 0)\nspecularScale *= ReadRTTexture(speculartexture, specularTexData, specularUVT, ngnorm, neyeDir);\nspecularSum *= specularScale;\n\nvec4 baseScale = vec4(basecolor, 1.0);\nif (baseTexData.x != 0)\nbaseScale *= ReadRTTexture(basetexture, baseTexData, baseUVT, ngnorm, neyeDir);\nspecularSum += baseScale;\n\ngl_FragColor = specularSum;\n\n\nfloat dotnd = dot(neyeDir, ngnorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat angle = acos(-dotnd) / (3.14159625*0.5);\nfloat fresnelFactor = pow(angle, brdf_curve);\ngl_FragColor.a = (fresnelFactor*degree_90_specular) + ((1.0-fresnelFactor)*degree_0_specular);\n#if hasBrightReflections\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\n\n#if PlanarReflectPassActive\nif (planarreflectstrength.r > 0.0 || planarreflectstrength.g > 0.0 || planarreflectstrength.b > 0.0)\n{\nfloat powangle = pow(angle, 3.0);\n#if compPlanarRefl\nvec4 colPlanarReflect = texture2D(texPlanarReflect, gl_FragCoord.xy / viewportsize);\ngl_FragColor.rgb = mix(gl_FragColor.rgb, colPlanarReflect.rgb, powangle*colPlanarReflect.a*planarreflectstrength.r);\n#else\ngl_FragColor.rgb += powangle*planarreflectstrength.rgb*texture2D(texPlanarReflect, gl_FragCoord.xy/viewportsize).rgb;\n#endif\n}\n#endif\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\ngl_FragColor.rgb = funchighlight(gl_FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\ngl_FragColor.rgb = vec3(funcdscs315_1_red(gl_FragColor.r), funcdscs315_1_green(gl_FragColor.g), funcdscs315_1_blue(gl_FragColor.b));\n#elif (camresponse == 306)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\n\ngl_FragColor.rgb = vec3(funcdscs315_2_green(gl_FragColor.r), funcdscs315_2_green(gl_FragColor.g), funcdscs315_2_green(gl_FragColor.b));\n#endif\n\nif (gamma != 1.0)\ngl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1.0/gamma));\n\nif (refractionmode == 1)\n{\ngl_FragColor.rgb *= exposure.rgb;\nreturn;\n}\n\n#if BUILDVERSION < 423\nif (uhasLUTTexture != 0)\ngl_FragColor.rgb = ApplyLUT(gl_FragColor.rgb);\n#endif\n\ngl_FragColor.rgb = exposure.rgb*ApplyColorCorrection(gl_FragColor.rgb);\n\nif (vignetting > 0.0)\ngl_FragColor.rgb = gl_FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n#if BUILDVERSION >= 423\nif (uhasLUTTexture != 0)\ngl_FragColor.rgb = ApplyLUT(gl_FragColor.rgb);\n#endif\n}\nif (isSecondaryMat != 0){\ngl_FragColor.a = gl_FragColor.a * secondaryMatAlpha;\ngl_FragColor.r = gl_FragColor.r * secondaryMatAlpha;\ngl_FragColor.g = gl_FragColor.g * secondaryMatAlpha;\ngl_FragColor.b = gl_FragColor.b * secondaryMatAlpha;\n}\n}\n";var shaderInfinityRT_Ambientfs = "#if extOESSD\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n\nuniform ivec2 diffuseTexData;\nuniform sampler2D diffusetexture;\nuniform mat3 diffuseUVT;\nuniform vec3 diffusecolor;\nuniform vec4 diffuseInputCC;\n\nuniform ivec2 alphaTexData;\nuniform sampler2D alphatexture;\nuniform mat3 alphaUVT;\nuniform float alphacolor;\nuniform int decalalpha;\nuniform float ppexistencethreshold;\nuniform int ppexistence;\n\nuniform ivec2 amboccTexData;\nuniform sampler2D ambocctexture;\nuniform mat3 amboccUVT;\n\nuniform float mipmapbias;\n\nuniform float gamma;\nuniform float highlightcompression;\nuniform int uhasLUTTexture;\n\nuniform float vignetting;\nuniform vec2 viewportsize;\nuniform int aarefinecount;\nuniform float scenesize;\nuniform float fovfactor;\n\n#if PlanarReflectPassActive\n\nuniform vec3 planarreflectstrength;\nuniform sampler2D texPlanarReflect;\n#endif\n\nvarying vec2 tex1;\nvarying vec2 tex2;\nvarying vec3 g_norm;\nvarying vec3 eyeDir;\nvarying vec3 vert;\n\nuniform float cc_brightness;\nuniform float cc_contrast;\nuniform float cc_saturation;\nuniform vec3 cc_tint;\nuniform int linearworkflow;\n\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\nuniform ivec2 dynAmbOcc;\nuniform mat4 matAmbOcc[8];\nuniform vec3 vecAmbOccSize[8];\nuniform float dynAmbOccGamma;\n\nSIRT_STANDARD_HEADER_INSERT\n\nfloat boxOcclusion(vec3 ipos, vec3 inor, mat4 itxx, vec3 irad)\n{\nvec3 p = (itxx*vec4(ipos, 1.0)).xyz;\nvec3 n = (itxx*vec4(inor, 0.0)).xyz;\n\n\nvec3 f = irad * sign(p);\n\n\nvec3 s = sign(irad - abs(p));\n\n\nvec3 v0 = normalize(vec3(1.0, 1.0, -1.0)*f - p);\nvec3 v1 = normalize(vec3(1.0, s.x, s.x)*f - p);\nvec3 v2 = normalize(vec3(1.0, -1.0, 1.0)*f - p);\nvec3 v3 = normalize(vec3(s.z, s.z, 1.0)*f - p);\nvec3 v4 = normalize(vec3(-1.0, 1.0, 1.0)*f - p);\nvec3 v5 = normalize(vec3(s.y, 1.0, s.y)*f - p);\n\n\nfloat tot = 0.0;\nvec3 cr = cross(v0, v1);\ntot += (dot(cr, cr)>0.001) ? dot(n, normalize(cr)) * acos(dot(v0, v1)) : 0.0;\ncr = cross(v1, v2);\ntot += (dot(cr, cr)>0.001) ? dot(n, normalize(cr)) * acos(dot(v1, v2)) : 0.0;\ncr = cross(v2, v3);\ntot += (dot(cr, cr)>0.001) ? dot(n, normalize(cr)) * acos(dot(v2, v3)) : 0.0;\ncr = cross(v3, v4);\ntot += (dot(cr, cr)>0.001) ? dot(n, normalize(cr)) * acos(dot(v3, v4)) : 0.0;\ncr = cross(v4, v5);\ntot += (dot(cr, cr)>0.001) ? dot(n, normalize(cr)) * acos(dot(v4, v5)) : 0.0;\ncr = cross(v5, v0);\ntot += (dot(cr, cr)>0.001) ? dot(n, normalize(cr)) * acos(dot(v5, v0)) : 0.0;\nreturn abs(tot) / 6.283185;\n}\n\nfloat ReadRTDynAmbOcc(vec3 norm)\n{\nfloat occ = 0.0;\nfor (int i = 0; i < 8; i++) {\nif (i >= dynAmbOcc.x)\nbreak;\nocc += boxOcclusion(vert, norm, matAmbOcc[i], vecAmbOccSize[i]);\n}\nocc = clamp(occ, 0.0001, 0.9999);\nreturn pow(1.0 - occ, dynAmbOccGamma);\n}\n\n\n\nvoid main()\n{\nvec3 ngnorm = normalize(g_norm);\nvec4 ambientSum = vec4(diffusecolor, 1.0);\nif (diffuseTexData.x != 0) {\nvec4 ambientTexVal = ReadRTTexture(diffusetexture, diffuseTexData, diffuseUVT, g_norm, eyeDir);\nif (linearworkflow == 2)\nambientTexVal.rgb = pow(ambientTexVal.rgb, vec3(2.2));\nambientTexVal.rgb = ApplyInputCC(ambientTexVal.rgb, diffuseInputCC);\nambientSum *= ambientTexVal;\n}\nif (amboccTexData.x != 0) {\nvec4 amboccScale = ReadRTTexture(ambocctexture, amboccTexData, amboccUVT, g_norm, eyeDir);\nif (linearworkflow == 2)\namboccScale.rgb = pow(amboccScale.rgb, vec3(2.2));\nambientSum *= amboccScale;\n}\nif (dynAmbOcc.x > 0 && dynAmbOcc.y == 0)\n{\nambientSum *= vec4(vec3(ReadRTDynAmbOcc(ngnorm)), 1.0);\n}\ngl_FragColor = ambientSum;\n\n#if PlanarReflectPassActive\nif (planarreflectstrength.r > 0.0 || planarreflectstrength.g > 0.0 || planarreflectstrength.b > 0.0)\n{\nvec3 neyeDir = normalize(eyeDir);\n\nfloat dotnd = dot(neyeDir, ngnorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat powangle = pow(acos(-dotnd) / (3.14159625*0.5), 3.0);\n\n#if compPlanarRefl\nvec4 colPlanarReflect = texture2D(texPlanarReflect, gl_FragCoord.xy / viewportsize);\ngl_FragColor.rgb = mix(gl_FragColor.rgb, colPlanarReflect.rgb, powangle*colPlanarReflect.a*planarreflectstrength.r);\n#else\ngl_FragColor.rgb += powangle*planarreflectstrength.rgb*texture2D(texPlanarReflect, gl_FragCoord.xy/viewportsize).rgb;\n#endif\n}\n#endif\n\n\nif (alphaTexData.x != 0)\n{\nvec3 neyeDir = normalize(eyeDir);\n\ngl_FragColor.a = ReadRTTexture(alphatexture, alphaTexData, alphaUVT, ngnorm, neyeDir).x;\ngl_FragColor.a *= alphacolor;\n#if hasBrightReflections\nif (decalalpha == 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\nelse\n{\ngl_FragColor.a = alphacolor;\n}\nif (dynAmbOcc.x > 0 && dynAmbOcc.y == 1)\n{\ngl_FragColor.a *= mod(1.0 - ReadRTDynAmbOcc(ngnorm), 1.0);\n}\nif (ppexistence != 0 && gl_FragColor.a < ppexistencethreshold)\ndiscard;\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\ngl_FragColor.rgb = funchighlight(gl_FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\ngl_FragColor.rgb = vec3(funcdscs315_1_red(gl_FragColor.r), funcdscs315_1_green(gl_FragColor.g), funcdscs315_1_blue(gl_FragColor.b));\n#elif (camresponse == 306)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\n\ngl_FragColor.rgb = vec3(funcdscs315_2_green(gl_FragColor.r), funcdscs315_2_green(gl_FragColor.g), funcdscs315_2_green(gl_FragColor.b));\n#endif\n\nif (gamma != 1.0)\ngl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1.0/gamma));\n\n#if BUILDVERSION < 423\nif (uhasLUTTexture != 0)\ngl_FragColor.rgb = ApplyLUT(gl_FragColor.rgb);\n#endif\n\ngl_FragColor.rgb = ApplyColorCorrection(gl_FragColor.rgb);\n\nif (vignetting > 0.0)\ngl_FragColor.rgb = gl_FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n#if BUILDVERSION >= 423\nif (uhasLUTTexture != 0)\ngl_FragColor.rgb = ApplyLUT(gl_FragColor.rgb);\n#endif\n}\n\n#if hasBrightReflections\nif (decalalpha != 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\nif (isSecondaryMat != 0){\ngl_FragColor.a = gl_FragColor.a * secondaryMatAlpha;\ngl_FragColor.r = gl_FragColor.r * secondaryMatAlpha;\ngl_FragColor.g = gl_FragColor.g * secondaryMatAlpha;\ngl_FragColor.b = gl_FragColor.b * secondaryMatAlpha;\n}\n}\n";var shaderInfinityRT_ARKitfs = "#if extOESSD\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n\nuniform int uhasDiffuseEnv;\nuniform samplerCube diffuseenv;\nuniform int uhasDiffuseTexture;\nuniform sampler2D diffusetexture;\nuniform mat3 diffuseUVT;\nuniform vec3 diffusecolor;\n\nuniform samplerCube channelcache1cubetexture;\nuniform samplerCube channelcache2cubetexture;\nuniform samplerCube channelcache3cubetexture;\nuniform float roughness;\nuniform vec3 mapblurlevel;\nuniform int uhasRoughnessTexture;\nuniform sampler2D roughnesstexture;\nuniform mat3 roughnessUVT;\nuniform vec3 intensitycolor;\nuniform int uhasIntensityTexture;\nuniform sampler2D intensitytexture;\nuniform mat3 intensityUVT;\n\nuniform samplerCube specularenv;\nuniform int uhasSpecularTexture;\nuniform sampler2D speculartexture;\nuniform mat3 specularUVT;\nuniform vec3 specularcolor;\nuniform int specularworkflow;\n\nuniform float ior_R0DG;\nuniform float ior_R0Intensity;\nuniform float ior_R0Clear;\nuniform int ior_R0DGFlip;\nuniform int ior_R0IntensityFlip;\nuniform int ior_R0ClearFlip;\n\nuniform int uhasAlphaTexture;\nuniform sampler2D alphatexture;\nuniform mat3 alphaUVT;\nuniform float alphacolor;\nuniform int decalalpha;\n\nuniform int sphericalwhirl;\nuniform float bumpuserscale;\nuniform ivec2 bumpTexData;\nuniform sampler2D bumptexture;\nuniform mat3 bumpUVT;\n\nuniform int uhasAdditionalTexture;\nuniform sampler2D additionaltexture;\nuniform mat3 additionalUVT;\nuniform vec3 additionalcolor;\n\nuniform ivec2 amboccTexData;\nuniform sampler2D ambocctexture;\nuniform mat3 amboccUVT;\n#if hasAmbOccTextureParam\nuniform vec3 amboccParamValue;\n#endif\n\n#if amboccusevertcol\nvarying float vcolor;\n#endif\n\nuniform float invertreflectiony;\nuniform float mipmapbias;\n\nuniform float gamma;\nuniform int refractionmode;\nuniform float highlightcompression;\nuniform int uhasLUTTexture;\n\nuniform float vignetting;\nuniform vec2 viewportsize;\nuniform int aarefinecount;\nuniform float scenesize;\nuniform float fovfactor;\n\nuniform vec3 exposure;\n\nvarying vec2 tex1;\nvarying vec2 tex2;\nvarying vec3 g_norm;\nvarying vec3 eyeDir;\nvarying vec3 vert;\nvarying vec3 bu;\nvarying vec3 bv;\n\nuniform float cc_brightness;\nuniform float cc_contrast;\nuniform float cc_saturation;\nuniform vec3 cc_tint;\n\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\nuniform int hasIORDG;\nuniform int hasIORIntensity;\nuniform int hasIORClear;\n\nSIRT_STANDARD_HEADER_INSERT\n\nvec3 ArKitDiffusePP(vec3 v00)\n{\nreturn v00;\n}\n\nvoid main(void)\n{\nvec3 reflectDir;\nvec3 neyeDir = normalize(eyeDir);\nvec3 ngnorm = normalize(g_norm);\n\nif (sphericalwhirl != 0) {\nvec2 bumpValue = normalize(tex1.xy - vec2(0.5));\nfloat tmpX = bumpValue.x;\nbumpValue.x = bumpValue.y;\nbumpValue.y = -tmpX;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\nngnorm = normalize(ngnorm);\n}\nelse if (bumpTexData.x != 0) {\nvec3 bumpValue = ReadRTTexture(bumptexture, bumpTexData, bumpUVT, ngnorm, neyeDir).xyz;\nbumpValue = (bumpValue-0.498039)*2.0;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\nngnorm = normalize(ngnorm);\n}\n\nreflectDir = reflect(neyeDir, ngnorm);\nreflectDir = normalize(reflectDir);\nreflectDir.y *= invertreflectiony;\n\nfloat totRoughness = roughness;\nif (uhasRoughnessTexture != 0) {\ntotRoughness = texture2D(roughnesstexture, (roughnessUVT*vec3(tex1,1.0)).xy, mipmapbias).r;\n}\n\n\nfloat alphaVal = 1.0;\nvec4 diffuseSum = vec4(diffusecolor, 1.0) * max(0.2, 1.0 - totRoughness);\nif (uhasDiffuseTexture != 0) {\nvec4 diffuseTexVal = texture2D(diffusetexture, (diffuseUVT*vec3(tex1,1.0)).xy, mipmapbias);\nalphaVal = diffuseTexVal.a;\ndiffuseSum *= diffuseTexVal;\n}\ndiffuseSum.rgb = ArKitDiffusePP(diffuseSum.rgb);\nvec4 diffuseSample;\nif (uhasDiffuseEnv != 0) {\ndiffuseSample = textureCube(diffuseenv, ngnorm);\n#if encodeenvmapsinmono\nif (diffuseSample.b<1.0) diffuseSample=vec4(vec3(diffuseSample.r+diffuseSample.g+diffuseSample.b), 1.0);\nelse diffuseSample=vec4(vec3(diffuseSample.b+(1.0-diffuseSample.r)+(1.0-diffuseSample.g)+2.0), 1.0);\n#else\ndiffuseSample = vec4(diffuseSample.rgb+(1.0-diffuseSample.a)*64.0, 1.0);\n#endif\n#if hdribias\ndiffuseSample.rgb = pow(diffuseSample.rgb, vec3(gamma));\n#endif\n}\n\n\nfloat factor1 = totRoughness;\nfloat fAcosAngle = clamp(-dot(neyeDir, ngnorm), 0.0, 1.0);\nfactor1 *= fAcosAngle;\nvec4 colA1, colB1;\nfloat mixAB1;\nif (factor1 <= mapblurlevel.r)\n{\ncolA1 = textureCube(specularenv, reflectDir);\ncolB1 = textureCube(channelcache1cubetexture, reflectDir);\nmixAB1 = clamp((factor1-0.000000)/mapblurlevel.r, 0.0, 1.0);\n#if encodeenvmapsinmono\nif (colA1.b<1.0) colA1=vec4(vec3(colA1.r+colA1.g+colA1.b), 1.0);\nelse colA1=vec4(vec3(colA1.b+(1.0-colA1.r)+(1.0-colA1.g)+2.0), 1.0);\nif (colB1.b<1.0) colB1=vec4(vec3(colB1.r+colB1.g+colB1.b), 1.0);\nelse colB1=vec4(vec3(colB1.b+(1.0-colB1.r)+(1.0-colB1.g)+2.0), 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\n#endif\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\ncolB1.rgb = pow(colB1.rgb, vec3(gamma));\n#endif\n}\nelse if (factor1 <= mapblurlevel.g)\n{\ncolA1 = textureCube(channelcache1cubetexture, reflectDir);\ncolB1 = textureCube(channelcache2cubetexture, reflectDir);\nmixAB1 = clamp((factor1-mapblurlevel.r)/(mapblurlevel.g-mapblurlevel.r), 0.0, 1.0);\n#if encodeenvmapsinmono\nif (colA1.b<1.0) colA1=vec4(vec3(colA1.r+colA1.g+colA1.b), 1.0);\nelse colA1=vec4(vec3(colA1.b+(1.0-colA1.r)+(1.0-colA1.g)+2.0), 1.0);\nif (colB1.b<1.0) colB1=vec4(vec3(colB1.r+colB1.g+colB1.b), 1.0);\nelse colB1=vec4(vec3(colB1.b+(1.0-colB1.r)+(1.0-colB1.g)+2.0), 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\n#endif\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\ncolB1.rgb = pow(colB1.rgb, vec3(gamma));\n#endif\n}\nelse\n{\ncolA1 = textureCube(channelcache2cubetexture, reflectDir);\ncolB1 = textureCube(channelcache3cubetexture, reflectDir);\nmixAB1 = clamp((factor1-mapblurlevel.g)/(mapblurlevel.b-mapblurlevel.g), 0.0, 1.0);\n#if encodeenvmapsinmono\nif (colA1.b<1.0) colA1=vec4(vec3(colA1.r+colA1.g+colA1.b), 1.0);\nelse colA1=vec4(vec3(colA1.b+(1.0-colA1.r)+(1.0-colA1.g)+2.0), 1.0);\nif (colB1.b<1.0) colB1=vec4(vec3(colB1.r+colB1.g+colB1.b), 1.0);\nelse colB1=vec4(vec3(colB1.b+(1.0-colB1.r)+(1.0-colB1.g)+2.0), 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\n#endif\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\ncolB1.rgb = pow(colB1.rgb, vec3(gamma));\n#endif\n}\nvec4 glossySum = mix(colA1, colB1, mixAB1);\nvec4 intensitySum = vec4(intensitycolor, 1.0);\nif (uhasIntensityTexture != 0)\nintensitySum *= texture2D(intensitytexture, (intensityUVT*vec3(tex1,1.0)).xy, mipmapbias);\n\n\nvec4 specularSum = textureCube(specularenv, reflectDir);\n#if encodeenvmapsinmono\nif (specularSum.b<1.0) specularSum=vec4(vec3(specularSum.r+specularSum.g+specularSum.b), 1.0);\nelse specularSum=vec4(vec3(specularSum.b+(1.0-specularSum.r)+(1.0-specularSum.g)+2.0), 1.0);\n#else\nspecularSum = vec4(specularSum.rgb+(1.0-specularSum.a)*64.0, 1.0);\n#endif\n#if hdribias\nspecularSum.rgb = pow(specularSum.rgb, vec3(gamma));\n#endif\nvec4 specularScale = vec4(specularcolor, 1.0);\nif (uhasSpecularTexture != 0)\nspecularScale *= texture2D(speculartexture, (specularUVT*vec3(tex1,1.0)).xy, mipmapbias);\nspecularSum *= specularScale;\n\nfloat iorScale = ior_R0Intensity;\nif (specularworkflow == 0)\n{\nfloat fMetallic = intensitySum.r;\nif (fMetallic > 1.0)\nfMetallic = 1.0;\n\nintensitySum.rgb = mix(vec3((1.0 - ((diffuseSum.r + diffuseSum.g + diffuseSum.b) / 3.0))), diffuseSum.rgb, fMetallic);\ndiffuseSum.rgb = mix(diffuseSum.rgb, vec3(0.0), fMetallic);\niorScale = mix(ior_R0Intensity, 1.0, fMetallic);\n\nintensitySum *= 1.0 - roughness;\n}\ndiffuseSum *= diffuseSample;\nglossySum.rgb *= intensitySum.rgb;\n\n\nfloat dotnd = dot(neyeDir, ngnorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat powangle = pow(acos(-dotnd) / (3.14159625*0.5), 10.0);\n\n{\nfloat powangle_diffuse = powangle;\nif (ior_R0DGFlip == 1) powangle_diffuse = 1.0-powangle;\nfloat fresnelFactorDiffuse = iorScale + (1.0 - iorScale) * powangle_diffuse;\ndiffuseSum *= fresnelFactorDiffuse;\n}\n\n{\nfloat powangle_Intensity = powangle;\nif (ior_R0IntensityFlip == 1) powangle_Intensity = 1.0-powangle;\nfloat fresnelFactorIntensity = iorScale + (1.0 - iorScale) * powangle_Intensity;\nglossySum *= fresnelFactorIntensity;\n}\n\n{\nfloat powangle_Clear = powangle;\nif (ior_R0ClearFlip == 1) powangle_Clear = 1.0-powangle_Clear;\nfloat fresnelFactorClear = iorScale + (1.0 - iorScale) * powangle_Clear;\nspecularSum *= fresnelFactorClear;\n}\n\n\nvec4 additionalSum = vec4(additionalcolor, 1.0);\nif (uhasAdditionalTexture != 0)\nadditionalSum *= texture2D(additionaltexture, (additionalUVT*vec3(tex1,1.0)).xy, mipmapbias);\n\n\n#if amboccusevertcol\nvec4 ambOccSum = (diffuseSum + glossySum + specularSum) * (1.0-vcolor);\ngl_FragColor = ambOccSum + additionalSum;\n#else\nif (amboccTexData.x != 0) {\nvec4 ambOccSum = diffuseSum + glossySum + specularSum + additionalSum;\n#if hasAmbOccTextureParam\nvec4 amboccScale = ReadRTTexture(ambocctexture, amboccTexData, amboccUVT, ngnorm, neyeDir);\nvec3 amboccParamValueInv = 1.0-amboccParamValue;\namboccScale = vec4(vec3(amboccParamValueInv.x*amboccParamValueInv.y*amboccScale.r+\namboccParamValue.x*amboccParamValueInv.y*amboccScale.g+\namboccParamValueInv.x*amboccParamValue.y*amboccScale.b+\namboccParamValue.x*amboccParamValue.y*amboccScale.a), 1.0);\nambOccSum *= amboccScale;\n#else\nambOccSum *= texture2D(ambocctexture, (amboccUVT*vec3(tex1,1.0)).xy, mipmapbias);\n#endif\ngl_FragColor = ambOccSum;\n}\nelse\n{\ngl_FragColor = diffuseSum + glossySum + specularSum + additionalSum;\n}\n#endif\n\n\n/*if (uhasAlphaTexture != 0)\n{\ngl_FragColor.a = texture2D(alphatexture, (alphaUVT*vec3(tex1,1.0)).xy, mipmapbias).x;\ngl_FragColor.a *= alphacolor;\n#if hasBrightReflections\nif (decalalpha == 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\nelse\n{\ngl_FragColor.a = alphacolor;\n}*/\ngl_FragColor.a = alphaVal;\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\ngl_FragColor.rgb = funchighlight(gl_FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\ngl_FragColor.rgb = vec3(funcdscs315_1_red(gl_FragColor.r), funcdscs315_1_green(gl_FragColor.g), funcdscs315_1_blue(gl_FragColor.b));\n#elif (camresponse == 306)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\n\ngl_FragColor.rgb = vec3(funcdscs315_2_green(gl_FragColor.r), funcdscs315_2_green(gl_FragColor.g), funcdscs315_2_green(gl_FragColor.b));\n#endif\n\nif (gamma != 1.0)\ngl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1.0/gamma));\n\n#if BUILDVERSION < 423\nif (uhasLUTTexture != 0)\ngl_FragColor.rgb = ApplyLUT(gl_FragColor.rgb);\n#endif\n\nif (refractionmode == 1) {\ngl_FragColor.rgb *= exposure.rgb;\n#if hasBrightReflections\nif (decalalpha != 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\nreturn;\n}\n\ngl_FragColor.rgb = exposure.rgb*ApplyColorCorrection(gl_FragColor.rgb);\n\nif (vignetting > 0.0)\ngl_FragColor.rgb = gl_FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n#if BUILDVERSION >= 423\nif (uhasLUTTexture != 0)\ngl_FragColor.rgb = ApplyLUT(gl_FragColor.rgb);\n#endif\n\n#if hasBrightReflections\nif (decalalpha != 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\nif (isSecondaryMat != 0){\ngl_FragColor.a = gl_FragColor.a * secondaryMatAlpha;\ngl_FragColor.r = gl_FragColor.r * secondaryMatAlpha;\ngl_FragColor.g = gl_FragColor.g * secondaryMatAlpha;\ngl_FragColor.b = gl_FragColor.b * secondaryMatAlpha;\n}\n}\n";var shaderInfinityRT_Refinevs = "#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n#if (RT_GLVERSIONNUM > 1)\nin vec2 a_position;\nin vec2 a_tex0;\nout vec2 tex0;\n#else\nattribute vec2 a_position;\nattribute vec2 a_tex0;\nvarying vec2 tex0;\n#endif\n\nvoid main()\n{\ntex0 = a_tex0;\ngl_Position = vec4(a_position, 0.0, 1.0);\n}\n";var shaderInfinityRT_Refinefs = "#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n#if (RT_GLVERSIONNUM > 1)\nin vec2 tex0;\nout vec4 FragColor;\n#else\nvarying vec2 tex0;\n#endif\n\nuniform sampler2D logoTex;\nuniform sampler2D prevTex;\nuniform int solidColor;\nuniform float solidAlpha;\n\nuniform float sharpenscale;\nuniform vec2 renderstep;\n\nvec4 calcEdgeColor()\n{\nvec2 offset[9];\nfloat kernel[ 9 ];\n\noffset[ 0 ] = vec2(-renderstep.x, -renderstep.y);\noffset[ 1 ] = vec2(0.0, -renderstep.y);\noffset[ 2 ] = vec2(renderstep.x, -renderstep.y);\n\noffset[ 3 ] = vec2(-renderstep.x, 0.0);\noffset[ 4 ] = vec2(0.0, 0.0);\noffset[ 5 ] = vec2(renderstep.x, 0.0);\n\noffset[ 6 ] = vec2(-renderstep.x, renderstep.y);\noffset[ 7 ] = vec2(0.0, renderstep.y);\noffset[ 8 ] = vec2(renderstep.x, renderstep.y);\n\nkernel[ 0 ] = -1.;\nkernel[ 1 ] = -1.;\nkernel[ 2 ] = -1.;\n\nkernel[ 3 ] = -1.;\nkernel[ 4 ] = 8.;\nkernel[ 5 ] = -1.;\n\nkernel[ 6 ] = -1.;\nkernel[ 7 ] = -1.;\nkernel[ 8 ] = -1.;\n\nint i = 0;\nvec4 sum = vec4(0.0);\nfor( int i=0; i<9; i++ )\n{\n#if (RT_GLVERSIONNUM > 1)\nvec4 tmp = texture(logoTex, tex0 + offset[i]);\n#else\nvec4 tmp = texture2D(logoTex, tex0 + offset[i]);\n#endif\nsum += tmp * kernel[i];\nsum.a = 1.0;\n}\nreturn sum;\n}\n\nvec3 blendOverlay(vec3 base, vec3 blend)\n{\nreturn mix(1.0 - 2.0 * (1.0 - base) * (1.0 - blend), 2.0 * base * blend, step(base, vec3(0.5)));\n}\n\nvoid main()\n{\nvec4 OutColor;\n#if (RT_GLVERSIONNUM > 1)\nif (solidColor == 1)\nOutColor = solidAlpha*texture(logoTex, tex0) + (1.0-solidAlpha)*texture(prevTex, tex0);\nelse if (solidColor == 0)\nOutColor = vec4(texture(logoTex, tex0).xyz, solidAlpha);\nelse\nOutColor = vec4(texture(logoTex, tex0).xyz, texture(logoTex, tex0).w*solidAlpha);\n#else\nif (solidColor == 1)\nOutColor = solidAlpha*texture2D(logoTex, tex0) + (1.0-solidAlpha)*texture2D(prevTex, tex0);\nelse if (solidColor == 0)\nOutColor = vec4(texture2D(logoTex, tex0).xyz, solidAlpha);\nelse\nOutColor = vec4(texture2D(logoTex, tex0).xyz, texture2D(logoTex, tex0).w*solidAlpha);\n#endif\n\nif (sharpenscale > 0.0)\n{\nvec4 edgecolor = calcEdgeColor();\nedgecolor *= sharpenscale;\nedgecolor += vec4(0.5);\nedgecolor.rgb = vec3((edgecolor.r+edgecolor.g+edgecolor.b)/3.0);\nOutColor.rgb = blendOverlay(OutColor.rgb, edgecolor.rgb);\n}\n\n#if (RT_GLVERSIONNUM > 1)\nFragColor = OutColor;\n#else\ngl_FragColor = OutColor;\n#endif\n}\n";var shaderInfinityRT_Matchfs = "\n#if extOESSD\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nuniform  int uhasDiffuseEnv;\nuniform  samplerCube diffuseenv;\nuniform  ivec2 diffuseTexData;\nuniform  sampler2D diffusetexture;\nuniform  mat3 diffuseUVT;\nuniform  vec3 diffusecolor;\nuniform  int linearworkflow;\n\nuniform  vec2 bumpflakesdata;\n\nuniform  samplerCube channelcache1cubetexture;\nuniform  samplerCube channelcache2cubetexture;\nuniform  samplerCube channelcache3cubetexture;\nuniform  vec3 mapblurlevel;\nuniform  ivec2 roughnessTexData;\nuniform  sampler2D roughnesstexture;\nuniform  mat3 roughnessUVT;\nuniform  vec3 intensitycolor;\nuniform  ivec2 intensityTexData;\nuniform  sampler2D intensitytexture;\nuniform  mat3 intensityUVT;\n\nuniform  vec3 intensitybcolor;\n\nuniform  samplerCube specularenv;\nuniform  ivec2 specularTexData;\nuniform  sampler2D speculartexture;\nuniform  mat3 specularUVT;\nuniform  vec3 specularcolor;\n\nuniform  vec3 ior_R0;\nuniform  ivec3 ior_R0Flip;\nuniform  ivec3 hasIOR;\n\nuniform  ivec2 alphaTexData;\nuniform  sampler2D alphatexture;\nuniform  mat3 alphaUVT;\nuniform  float alphacolor;\n\nuniform  ivec2 bumpTexData;\nuniform  sampler2D bumptexture;\nuniform  mat3 bumpUVT;\n\nuniform  sampler2D reflectionplaneTex;\nuniform  sampler2D reflectionplaneTex2;\nuniform  int reflectionplanestotal;\nuniform  mat4 reflectionplanematrix[2];\nuniform  mat4 reflectionplanedynamicinfluence;\nuniform  ivec2 reflectionplanetexval;\nuniform  float reflectionplanescale;\nuniform  int reflectionplanescalealpha;\nuniform  float reflectionplanescalespecular;\nuniform  float reflectionplaneroughness;\nuniform  int reflectionplanealternativemix;\n\nuniform  ivec2 additionalTexData;\nuniform  sampler2D additionaltexture;\nuniform  mat3 additionalUVT;\nuniform  vec3 additionalcolor;\n\nuniform  ivec2 amboccTexData;\nuniform  sampler2D ambocctexture;\nuniform  mat3 amboccUVT;\nuniform  vec3 amboccBoost;\n#if hasAmbOccTextureParam\nuniform  vec3 amboccParamValue;\n#endif\n\n#if amboccusevertcol\nvarying float vcolor;\n#endif\n\nuniform  float mipmapbias;\nfloat mipmapbiasEnv = -1.0;\n\nuniform  float gamma;\nuniform  int refractionmode;\nuniform  float highlightcompression;\nuniform  int uhasLUTTexture;\nuniform  samplerCube specularblurenv;\nuniform  float curveMax;\nuniform  float curveMin;\nuniform  float vignetting;\nuniform  vec2 viewportsize;\nuniform  int aarefinecount;\nuniform  float scenesize;\nuniform  float fovfactor;\nuniform  float planarReflFlip;\n\nuniform  vec3 exposure;\nuniform vec3 camzv;\nuniform vec3 fAngVector;\n\nvarying vec2 tex1;\nvarying vec2 tex2;\nvarying vec3 g_norm;\nvarying vec3 eyeDir;\nvarying vec3 vert;\nvarying vec3 bu;\nvarying vec3 bv;\n\nuniform  vec3 cc_tint;\n\nuniform  vec3 cc_bri_con_sat;\nfloat cc_brightness;\nfloat cc_contrast;\nfloat cc_saturation;\nuniform  ivec4 iflagsA;\nint simpleintensity;\nint gammaDiffAddTexs;\nint decalalpha;\nint ppexistence;\nuniform  ivec4 iflagsB;\nint dualintensitycolor;\nint sphericalwhirl;\nint clearIgnoreBump;\nint usebumpflakes;\nuniform  vec4 fflagsA;\nfloat roughness;\nfloat roughnessEdgeFac;\nfloat invertreflectiony;\nfloat iorpower;\nuniform  vec4 fflagsB;\nfloat envScale;\nfloat dualintensityfalloff;\nfloat NormDerivThreshold;\nfloat bumpuserscale;\n\nuniform  int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\nuniform  float fadedReflectionsScale;\nuniform  float fadedReflectionsOffset;\nuniform  float fadedReflectionsPow;\nuniform  vec3 fadedReflectionsColor;\n\nuniform  vec3 envAABBMin;\nuniform  vec3 envAABBMax;\n\nSIRT_STANDARD_HEADER_INSERT\n\n#if num_scene_lights > 0\n#if MAXFRAGUNIVECS < 128\nuniform  mat4 ulights[2];\nuniform  float light_roughnessdelta[2];\n#else\nuniform  mat4 ulights[num_scene_lights];\nuniform  float light_roughnessdelta[num_scene_lights];\n#endif\nconst float PI = 3.1415926535897932;\n\nstruct Light {\nvec4 colorIntensity;\nvec3 l;\nfloat attenuation;\nfloat NoL;\n};\n\nfloat getSquareFalloffAttenuation(float distanceSquare, float falloff) {\nfloat factor = distanceSquare * falloff;\nfloat smoothFactor = saturate(1.0 - factor * factor);\nreturn smoothFactor * smoothFactor;\n}\n\nfloat getDistanceAttenuation(const /*highp*/ vec3 posToLight, float falloff) {\nfloat distanceSquare = dot(posToLight, posToLight);\nfloat attenuation = getSquareFalloffAttenuation(distanceSquare, falloff);\nreturn attenuation * 1.0 / max(distanceSquare, 1e-4);\n}\n\nfloat getAngleAttenuation(const vec3 lightDir, const vec3 l, const vec2 scaleOffset) {\nfloat cd = dot(lightDir, l);\nfloat attenuation = saturate(cd * scaleOffset.x + scaleOffset.y);\nreturn attenuation * attenuation;\n}\n\nfloat Filament_D_GGX(float roughness, float NoH) {\nfloat oneMinusNoHSquared = 1.0 - NoH * NoH;\nfloat a = NoH * roughness;\nfloat k = roughness / (oneMinusNoHSquared + a * a);\nfloat d = k * k * (1.0 / PI);\nreturn d;\n}\n\nfloat V_SmithGGXCorrelated(float roughness, float NoV, float NoL) {\nfloat a2 = roughness * roughness;\nfloat lambdaV = NoL * sqrt((NoV - a2 * NoV) * NoV + a2);\nfloat lambdaL = NoV * sqrt((NoL - a2 * NoL) * NoL + a2);\nfloat v = 0.5 / (lambdaV + lambdaL);\nreturn v;\n}\n\nfloat F_Schlick(float f0, float f90, float VoH) {\nreturn f0 + (f90 - f0) * Pow5(1.0 - VoH);\n}\n\nvec3 F_Schlick(const vec3 f0, float f90, float VoH) {\nreturn f0 + (f90 - f0) * Pow5(1.0 - VoH);\n}\n\nvec3 Filament_fresnel(const vec3 f0, float LoH) {\nfloat f90 = saturate(dot(f0, vec3(50.0 * 0.33)));\nreturn F_Schlick(f0, f90, LoH);\n}\n\nvec3 diffuseLobe(const vec3 f0, float NoV, float NoL, float LoH) {\nreturn f0 / PI;\n}\n\nvec3 specularLobe(Light light, float lightroughness, const vec3 h, float NoV, float NoL, float NoH, float LoH, const vec3 f0) {\nfloat D = Filament_D_GGX(lightroughness, NoH);\nfloat V = V_SmithGGXCorrelated(lightroughness, NoV, NoL);\nvec3  F = Filament_fresnel(f0, LoH);\nreturn (D * V) * F;\n}\n\nvec3 MatchLight_surfaceShading(Light light, float lightroughness, vec3 N, vec3 V, const vec3 f0, const vec3 f0_diff) {\nvec3 h = normalize(V + light.l);\n\nfloat NoV = dot(N, V);\nfloat NoL = light.NoL;\nif (NoL < 0.0001)\nreturn vec3(0.0);\nfloat NoH = clamp(dot(N, h), 0.0001, 1.0);\nfloat LoH = clamp(dot(light.l, h), 0.0001, 1.0);\n\nvec3 Fr = specularLobe(light, lightroughness, h, NoV, NoL, NoH, LoH, f0);\nvec3 Fd = diffuseLobe(f0_diff, NoV, NoL, LoH);\n\nvec3 color = Fd + Fr /* pixel.energyCompensation*/;\nreturn (color * light.colorIntensity.rgb) *\n(light.colorIntensity.w * light.attenuation * NoL /* occlusion*/);\n}\n#endif\n\nfloat ReflectionPlaneDynamicInfluence0(vec3 neyeDir)\n{\nfloat influence = 1.0;\nif (reflectionplanedynamicinfluence[0].x > 0.1) {\nvec3 reflectionplaneinfluencevec = vec3(reflectionplanedynamicinfluence[0+2].x, reflectionplanedynamicinfluence[0+2].y, reflectionplanedynamicinfluence[0+2].z);\nfloat reflectionplanestartfade	= reflectionplanedynamicinfluence[0].y;\nfloat reflectionplaneendfade	= reflectionplanedynamicinfluence[0].z;\nfloat dp = (1.0 + dot(neyeDir, reflectionplaneinfluencevec)) * 0.5;\ninfluence = smoothstep(reflectionplaneendfade, reflectionplanestartfade, dp);\n}\nreturn influence;\n}\n\nfloat ReflectionPlaneDynamicInfluence1(vec3 neyeDir)\n{\nfloat influence = 1.0;\nif (reflectionplanedynamicinfluence[1].x > 0.1) {\nvec3 reflectionplaneinfluencevec = vec3(reflectionplanedynamicinfluence[1+2].x, reflectionplanedynamicinfluence[1+2].y, reflectionplanedynamicinfluence[1+2].z);\nfloat reflectionplanestartfade	= reflectionplanedynamicinfluence[1].y;\nfloat reflectionplaneendfade	= reflectionplanedynamicinfluence[1].z;\nfloat dp = (1.0 + dot(neyeDir, reflectionplaneinfluencevec)) * 0.5;\ninfluence = smoothstep(reflectionplaneendfade, reflectionplanestartfade, dp);\n}\nreturn influence;\n}\n\nvec4 ReflectionPlaneCheck(mat4 rpmat, vec4 sumReflCol, vec3 reflectDir, vec2 offset, sampler2D texRefl, vec3 neyeDir, int i)\n{\nfloat rpdist = dot(rpmat[2].xyz,rpmat[3].xyz-vert);\nif (rpdist < 0.0)\n{\nrpdist /= dot(reflectDir,rpmat[2].xyz);\nif (rpdist > 0.0) {\nvec3 phit = vert+(rpdist*reflectDir)-rpmat[3].xyz;\nvec2 uvInPlane = vec2(dot(phit,rpmat[0].xyz), dot(phit,rpmat[1].xyz));\nif (uvInPlane.x>=0.0 && uvInPlane.x<=1.0 && uvInPlane.y>=0.0 && uvInPlane.y<=1.0) {\nvec4 reflCol = texture2D(texRefl, (0.5*uvInPlane)+offset);\n\nif ((uvInPlane.x < .01) || (uvInPlane.x > .99) ||(uvInPlane.y < .01) || (uvInPlane.y > .99)) {\nreflCol.a = 0.0;\n}\n\nif (i==0) {\n\nreflCol.a *= ReflectionPlaneDynamicInfluence0(neyeDir);\n} else {\nreflCol.a *=ReflectionPlaneDynamicInfluence1(neyeDir);\n}\n\nsumReflCol.rgb += reflCol.rgb*reflCol.a;\nsumReflCol.a += reflCol.a;\n}\n}\n}\nreturn sumReflCol;\n}\n\n\nvec4 AddReflectionPlane(vec4 colResultRP, vec3 reflectDir, vec2 offset, vec3 neyeDir, float scalespecular)\n{\nvec4 sumReflCol = vec4(0.0);\n#if AVOIDCONDITIONALUNIFORMS\n#if (NUM_REFLECTON_PLANES > 0)\nif (reflectionplanetexval.x != 0)\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[0], sumReflCol, reflectDir, offset, reflectionplaneTex2, neyeDir, 0);\nelse\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[0], sumReflCol, reflectDir, offset, reflectionplaneTex, neyeDir, 0);\nif (sumReflCol.a != 0.0) {\nsumReflCol.rgb /= sumReflCol.a;\nsumReflCol.a = clamp(sumReflCol.a, 0.0, 1.0);\nif (reflectionplanescalealpha == 0)\nreturn mix(colResultRP, vec4(reflectionplanescale * scalespecular * sumReflCol.rgb, 1.0), scalespecular * sumReflCol.a);\nreturn mix(colResultRP, vec4(reflectionplanescale*sumReflCol.rgb, 1.0), clamp(reflectionplanescale * scalespecular * sumReflCol.a, 0.0, 1.0));\n}\n#endif\n#else\nif (reflectionplanestotal > 0) {\nif (reflectionplanetexval.x != 0)\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[0], sumReflCol, reflectDir, offset, reflectionplaneTex2, neyeDir, 0);\nelse\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[0], sumReflCol, reflectDir, offset, reflectionplaneTex, neyeDir, 0);\nif (reflectionplanestotal > 1) {\nif (reflectionplanetexval.y != 0)\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[1], sumReflCol, reflectDir, offset, reflectionplaneTex2, neyeDir, 1);\nelse\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[1], sumReflCol, reflectDir, offset, reflectionplaneTex, neyeDir, 1);\n}\n}\nif (sumReflCol.a != 0.0) {\nsumReflCol.rgb /= sumReflCol.a;\nsumReflCol.a = clamp(sumReflCol.a, 0.0, 1.0);\nif (reflectionplanescalealpha == 0)\nreturn mix(colResultRP, vec4(reflectionplanescale * scalespecular *sumReflCol.rgb, 1.0), scalespecular * sumReflCol.a);\nreturn mix(colResultRP, vec4(reflectionplanescale * scalespecular *sumReflCol.rgb, 1.0), clamp(reflectionplanescale * scalespecular *sumReflCol.a, 0.0, 1.0));\n}\n#endif\nreturn colResultRP;\n}\n\nvec4 ReadRTGlossy(vec3 reflectDir, float roughness, vec3 neyeDir)\n{\nvec4 colA1, colB1;\nvec2 rpOffsetA1, rpOffsetB1;\nfloat mixAB1;\n#if AABBEnvironmentMapActive\nvec3 EnvBoxPos = ((envAABBMax + envAABBMin) * 0.5);\n\nvec3 rbmax = (envAABBMax - vert)/reflectDir;\nvec3 rbmin = (envAABBMin - vert)/reflectDir;\nvec3 rbminmax;\nrbminmax.x = (reflectDir.x > 0.0) ? rbmax.x : rbmin.x;\nrbminmax.y = (reflectDir.y > 0.0) ? rbmax.y : rbmin.y;\nrbminmax.z = (reflectDir.z > 0.0) ? rbmax.z : rbmin.z;\nfloat fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);\nvec3 posonbox = vert + reflectDir*fa;\nreflectDir = posonbox - EnvBoxPos;\n#endif\n#if ComplexGlossyRead\nif (simpleintensity != 1)\n{\nif (roughness <= mapblurlevel.r)\n{\ncolA1 = textureCube(specularenv, reflectDir, mipmapbiasEnv);\ncolB1 = textureCube(channelcache1cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = clamp((roughness-0.000000)/mapblurlevel.r, 0.0, 1.0);\nrpOffsetA1 = vec2(0.0);\nrpOffsetB1 = vec2(0.5, 0.0);\n}\nelse if (roughness <= mapblurlevel.g)\n{\ncolA1 = textureCube(channelcache1cubetexture, reflectDir, mipmapbiasEnv);\ncolB1 = textureCube(channelcache2cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = clamp((roughness-mapblurlevel.r)/(mapblurlevel.g-mapblurlevel.r), 0.0, 1.0);\nrpOffsetA1 = vec2(0.5, 0.0);\nrpOffsetB1 = vec2(0.0, 0.5);\n}\nelse\n{\ncolA1 = textureCube(channelcache2cubetexture, reflectDir, mipmapbiasEnv);\ncolB1 = textureCube(channelcache3cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = clamp((roughness-mapblurlevel.g)/(mapblurlevel.b-mapblurlevel.g), 0.0, 1.0);\nrpOffsetA1 = vec2(0.0, 0.5);\nrpOffsetB1 = vec2(0.5, 0.5);\n}\n}\nelse\n#endif\n{\ncolA1 = colB1 = textureCube(channelcache3cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = 0.5;\nrpOffsetA1 = vec2(0.0);\nrpOffsetB1 = vec2(0.5, 0.0);\n}\n\n#if encodeenvmapsinmono\nif (colA1.b<1.0) colA1=vec4(vec3(colA1.r+colA1.g+colA1.b), 1.0);\nelse colA1=vec4(vec3(colA1.b+(1.0-colA1.r)+(1.0-colA1.g)+2.0), 1.0);\nif (colB1.b<1.0) colB1=vec4(vec3(colB1.r+colB1.g+colB1.b), 1.0);\nelse colB1=vec4(vec3(colB1.b+(1.0-colB1.r)+(1.0-colB1.g)+2.0), 1.0);\n#else\n#if extrabrightenvmap\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*256.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*256.0, 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\n#endif\n\n#endif\ncolA1.rgb *= envScale;\ncolB1.rgb *= envScale;\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\ncolB1.rgb = pow(colB1.rgb, vec3(gamma));\n#endif\n\nfloat reflplaneblur = clamp(reflectionplaneroughness * 3.0, 0.0, 2.99);\nfloat fBlurLevel = floor(reflplaneblur);\nfloat reflplanemix = reflplaneblur - fBlurLevel;\nif (fBlurLevel < .9){\nrpOffsetA1 = vec2(0.0);\nrpOffsetB1 = vec2(0.5, 0.0);\n} else if (fBlurLevel < 1.9){\nrpOffsetA1 = vec2(0.5, 0.0);\nrpOffsetB1 = vec2(0.0, 0.5);\n} else {\nrpOffsetA1 = vec2(0.0, 0.5);\nrpOffsetB1 = vec2(0.5, 0.5);\n}\n\nif (reflectionplanealternativemix != 0) {\nif (reflectionplanestotal > 0) {\nvec4 glossySum = mix(colA1, colB1, mixAB1);\ncolA1 = AddReflectionPlane(vec4(0.0,0.0,0.0, 1.0), reflectDir, rpOffsetA1, neyeDir, reflectionplanescalespecular);\ncolB1 = AddReflectionPlane(vec4(0.0,0.0,0.0, 1.0), reflectDir, rpOffsetB1, neyeDir, reflectionplanescalespecular);\nif (simpleintensity != 1) {\nglossySum += mix(colA1, colB1, reflplanemix);\nreturn glossySum;\n}\n}\n}\nelse {\n\ncolA1 = AddReflectionPlane(colA1, reflectDir, rpOffsetA1, neyeDir, reflectionplanescalespecular);\ncolB1 = AddReflectionPlane(colB1, reflectDir, rpOffsetB1, neyeDir, reflectionplanescalespecular);\n}\n\n\nreturn mix(colA1, colB1, mixAB1);\n}\n\nvec4 ReadRTSpecular(vec3 reflectDir, float lod, float mixfac)\n{\n\nvec4 specularSum = vec4(0.0,0.0,0.0,1.0);\n\nvec4 colA1 = textureCube(specularenv, reflectDir, lod);\nvec4 colB1 = (mixfac > 0.01) ? textureCube(specularblurenv, reflectDir, lod) : colA1;\n\n\n#if encodeenvmapsinmono\nif (colA1.b<1.0) colA1=vec4(vec3(colA1.r+colA1.g+colA1.b), 1.0);\nelse colA1=vec4(vec3(colA1.b+(1.0-colA1.r)+(1.0-colA1.g)+2.0), 1.0);\nif (colB1.b<1.0) colB1=vec4(vec3(colB1.r+colB1.g+colB1.b), 1.0);\nelse colB1=vec4(vec3(colB1.b+(1.0-colB1.r)+(1.0-colB1.g)+2.0), 1.0);\n#else\n#if extrabrightenvmap\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*256.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*256.0, 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\n#endif\n#endif\ncolA1.rgb *= envScale;\ncolB1.rgb *= envScale;\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\ncolB1.rgb = pow(colB1.rgb, vec3(gamma));\n#endif\n\nspecularSum = mix(colA1, colB1, mixfac);\n\nreturn specularSum;\n}\n\nvoid main(void)\n{\n\ncc_brightness = cc_bri_con_sat.x;\ncc_contrast = cc_bri_con_sat.y;\ncc_saturation = cc_bri_con_sat.z;\nsimpleintensity = iflagsA.x;\ngammaDiffAddTexs = iflagsA.y;\ndecalalpha = iflagsA.z;\nppexistence = iflagsA.w;\ndualintensitycolor = iflagsB.x;\nsphericalwhirl = iflagsB.y;\nclearIgnoreBump = iflagsB.z;\nusebumpflakes = iflagsB.w;\nroughness = fflagsA.x;\nroughnessEdgeFac = fflagsA.y;\ninvertreflectiony = fflagsA.z;\niorpower = fflagsA.w;\nenvScale = fflagsB.x;\ndualintensityfalloff = fflagsB.y;\nNormDerivThreshold = fflagsB.z;\nbumpuserscale = fflagsB.w;\n\nvec3 reflectDir;\nvec3 neyeDir = normalize(eyeDir);\nvec3 ngnorm = 0.9999*normalize(g_norm);\n\nif (sphericalwhirl != 0) {\nvec2 bumpValue = normalize(tex1.xy - vec2(0.5));\nfloat tmpX = bumpValue.x;\nbumpValue.x = bumpValue.y;\nbumpValue.y = -tmpX;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\nngnorm = normalize(ngnorm);\n}\nelse if (bumpTexData.x != 0) {\nvec3 bumpValue = ReadRTTexture(bumptexture, bumpTexData, bumpUVT, ngnorm, neyeDir).xyz;\nbumpValue = (bumpValue-0.498039)*2.0;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\nngnorm = normalize(ngnorm);\n}\nif (usebumpflakes != 0)\nngnorm = RT_Flakes(ngnorm, neyeDir, bumpflakesdata.x, bumpflakesdata.y);\n\nreflectDir = reflect(neyeDir, ngnorm);\nreflectDir = normalize(reflectDir);\nreflectDir.y *= invertreflectiony*planarReflFlip;\nfloat Curve = 0.0;\n#if extOESSD\nvec3 dxTex = 0.5*dFdx(g_norm);\nvec3 dyTex = 0.5*dFdy(g_norm);\n\nCurve = max(length(dxTex), length(dyTex));\n#endif\n\nvec4 diffuseSum = vec4(0.0);\nvec4 diffuseScale = vec4(diffusecolor, 0.0);\nif (dot(diffuseScale, diffuseScale) > 0.0) {\ndiffuseSum = vec4(1.0);\nif (uhasDiffuseEnv != 0) {\nvec3 diffnorm = ngnorm;\ndiffnorm.y *= planarReflFlip;\nvec4 diffuseSample = textureCube(diffuseenv, diffnorm, mipmapbiasEnv);\n#if encodeenvmapsinmono\nif (diffuseSample.b<1.0) diffuseSample=vec4(vec3(diffuseSample.r+diffuseSample.g+diffuseSample.b), 1.0);\nelse diffuseSample=vec4(vec3(diffuseSample.b+(1.0-diffuseSample.r)+(1.0-diffuseSample.g)+2.0), 1.0);\n#else\n#if extrabrightenvmap\ndiffuseSample = vec4(diffuseSample.rgb+(1.0-diffuseSample.a)*256.0, 1.0);\n#else\ndiffuseSample = vec4(diffuseSample.rgb+(1.0-diffuseSample.a)*64.0, 1.0);\n#endif\n#endif\ndiffuseSample.rgb *= envScale;\n#if hdribias\ndiffuseSample.rgb = pow(diffuseSample.rgb, vec3(gamma));\n#endif\ndiffuseSum = diffuseSample;\n}\nif (diffuseTexData.x != 0) {\nvec4 diffuseTexPixel = ReadRTTexture(diffusetexture, diffuseTexData, diffuseUVT, ngnorm, neyeDir);\nif ((linearworkflow == 2) || (gammaDiffAddTexs != 0))\ndiffuseTexPixel.rgb = pow(diffuseTexPixel.rgb, vec3(2.2));\ndiffuseScale *= diffuseTexPixel;\n}\ndiffuseSum *= diffuseScale;\n}\n\n\nfloat totRoughness = roughness;\nif (roughnessTexData.x != 0) {\ntotRoughness *= ReadRTTexture(roughnesstexture, roughnessTexData, roughnessUVT, ngnorm, neyeDir).r;\n}\nfloat fAcosAngle = clamp(-dot(neyeDir, ngnorm), 0.0, 1.0);\nvec4 glossySum = vec4(0.0);\nvec3 intensitySum = (dualintensitycolor != 0) ? mix(intensitybcolor, intensitycolor, pow(fAcosAngle, dualintensityfalloff)) : intensitycolor;\nif (dot(intensitySum, intensitySum) > 0.0) {\nglossySum = ReadRTGlossy(reflectDir, totRoughness*((1.0 - roughnessEdgeFac) * fAcosAngle + roughnessEdgeFac), neyeDir);\nif (intensityTexData.x != 0) {\nvec3 intensityTexPixel = ReadRTTexture(intensitytexture, intensityTexData, intensityUVT, ngnorm, neyeDir).rgb;\nif (linearworkflow == 2)\nintensityTexPixel.rgb = pow(intensityTexPixel.rgb, vec3(2.2));\nintensitySum *= intensityTexPixel;\n}\nglossySum.rgb *= intensitySum;\n}\n\n\nfloat dotnd = dot(neyeDir, ngnorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nvec4 specularSum = vec4(0.0);\nvec4 specularScale = vec4(specularcolor, 1.0);\nvec3 specularNorm;\nvec3 specularReflectDir;\nif (clearIgnoreBump == 1) {\nspecularNorm = normalize(g_norm);\nspecularReflectDir = normalize(reflect(neyeDir, specularNorm));\n}\nelse {\nspecularNorm = ngnorm;\nspecularReflectDir = reflectDir;\n}\nif (dot(specularScale, specularScale) > 0.0) {\n\n\n\n\n\n\n\n\n\n\n\n\n#if AABBEnvironmentMapActive\n\n\nvec3 EnvBoxPos = ((envAABBMax + envAABBMin) * 0.5);\nvec3 rbmax = (envAABBMax - vert)/specularReflectDir;\nvec3 rbmin = (envAABBMin - vert)/specularReflectDir;\nvec3 rbminmax;\n\nrbminmax.x = (specularReflectDir.x > 0.0) ? rbmax.x : rbmin.x;\nrbminmax.y = (specularReflectDir.y > 0.0) ? rbmax.y : rbmin.y;\nrbminmax.z = (specularReflectDir.z > 0.0) ? rbmax.z : rbmin.z;\nfloat fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);\nvec3 posonbox = vert + specularReflectDir*fa;\nspecularReflectDir = posonbox - EnvBoxPos;\n#endif\n{\nfloat mixfac = 0.0;\n#if extOESSD\nmixfac = clamp((Curve-(curveMin))/(curveMax-curveMin),0.0,1.0);\n#endif\nspecularSum = ReadRTSpecular(specularReflectDir, mipmapbiasEnv, mixfac);\nif (mixfac > 0.01){\nvec4 specularSumA = AddReflectionPlane(specularSum, specularReflectDir, vec2(0.0), neyeDir, 1.0);\nvec4 specularSumB = AddReflectionPlane(specularSum, specularReflectDir, vec2(0.5, 0.5), neyeDir, 1.0);\nspecularSum = mix(specularSumA, specularSumB, mixfac);\n} else {\nspecularSum = AddReflectionPlane(specularSum, specularReflectDir, vec2(0.0), neyeDir, 1.0);\n}\n}\nif (specularTexData.x != 0) {\nspecularScale *= (specularTexData.y == 1) ? ReadRTTextureFAng(speculartexture, specularTexData, specularUVT, specularNorm, camzv, vert, fAngVector) : ReadRTTexture(speculartexture, specularTexData, specularUVT, specularNorm, neyeDir);\n\n}\n\nspecularSum *= specularScale;\n}\n\n\n\n#if num_scene_lights > 0\nvec4 lightsSum = vec4(0.0);\nvec3 blackColor = vec3(0.0);\nfloat fStoredRoughness = pow(totRoughness, 1.0 / 3.0);\n\n#if MAXFRAGUNIVECS < 128\nconst int numLights = (num_scene_lights > 2) ? 2 : num_scene_lights;\n#else\nconst int numLights = num_scene_lights;\n#endif\nfor (int lightIndex = 0; lightIndex < numLights; lightIndex++)\n{\nvec4 positionFalloff, colorIntensity, directionIES, scaleOffsetShadowType;\n\ncolorIntensity = ulights[lightIndex][1];\nif (colorIntensity.rgb == blackColor){\ncontinue;\n}\npositionFalloff = ulights[lightIndex][0];\ndirectionIES = ulights[lightIndex][2];\nscaleOffsetShadowType = ulights[lightIndex][3];\n\nvec3 posToLight = positionFalloff.xyz - vert;\nif (dot(ngnorm, posToLight) < 0.0001)\ncontinue;\n\nLight light;\nlight.l = normalize(posToLight);\nlight.attenuation = getDistanceAttenuation(posToLight, positionFalloff.w);\nlight.NoL = saturate(dot(ngnorm, light.l));\nif (scaleOffsetShadowType.w < 0.0)\nlight.attenuation *= getAngleAttenuation(-directionIES.xyz, light.l, scaleOffsetShadowType.xy);\nif (light.attenuation*(colorIntensity.r+colorIntensity.g+colorIntensity.b)*colorIntensity.w < 0.000333)\ncontinue;\nlight.colorIntensity.rgb = colorIntensity.rgb;\nlight.colorIntensity.w = colorIntensity.w;\nfloat light_roughness = fStoredRoughness + light_roughnessdelta[lightIndex];\n\nlightsSum.rgb += MatchLight_surfaceShading(light, light_roughness, ngnorm, -neyeDir, specularScale.rgb + intensitySum.rgb, diffuseScale.rgb);\n}\n#endif\n\n\nfloat powangle = pow(acos(-dotnd) / (3.14159625*0.5), iorpower);\nif (hasIOR.x != 0)\n{\nfloat powangle_diffuse = powangle;\nif (ior_R0Flip.x == 1) powangle_diffuse = 1.0-powangle;\nfloat fresnelFactorDiffuse = ior_R0.x + (1.0 - ior_R0.x) * powangle_diffuse;\ndiffuseSum *= fresnelFactorDiffuse;\n}\nif (hasIOR.y != 0)\n{\nfloat powangle_Intensity = powangle;\nif (ior_R0Flip.y == 1) powangle_Intensity = 1.0-powangle;\nfloat fresnelFactorIntensity = ior_R0.y + (1.0 - ior_R0.y) * powangle_Intensity;\nglossySum *= fresnelFactorIntensity;\n}\nif (hasIOR.z != 0)\n{\nfloat powangle_Clear = powangle;\nif (clearIgnoreBump == 1)\n{\ndotnd = dot(neyeDir, specularNorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\npowangle_Clear = pow(acos(-dotnd) / (3.14159625*0.5), iorpower);\n}\nif (ior_R0Flip.z == 1) powangle_Clear = 1.0-powangle_Clear;\nfloat fresnelFactorClear = ior_R0.z + (1.0 - ior_R0.z) * powangle_Clear;\nspecularSum *= fresnelFactorClear;\n#if num_scene_lights > 0\nlightsSum *= fresnelFactorClear;\n#endif\n}\n\n\nvec4 additionalSum = vec4(additionalcolor, 1.0);\nif (additionalTexData.x != 0)\n{\nvec4 additionalTexPixel = ReadRTTexture(additionaltexture, additionalTexData, additionalUVT, ngnorm, neyeDir);\nif ((linearworkflow == 2) || (gammaDiffAddTexs != 0))\nadditionalTexPixel.rgb = pow(additionalTexPixel.rgb, vec3(2.2));\nadditionalSum *= additionalTexPixel;\n}\n\n\n#if amboccusevertcol\nvec4 ambOccSum = (diffuseSum + glossySum + specularSum) * (1.0-vcolor);\ngl_FragColor = ambOccSum + additionalSum;\n#else\nif (amboccTexData.x != 0) {\nvec4 amboccScale = ReadRTTexture(ambocctexture, amboccTexData, amboccUVT, ngnorm, neyeDir);\nif (linearworkflow == 2)\namboccScale.rgb = pow(amboccScale.rgb, vec3(2.2));\n#if hasAmbOccTextureParam\nvec4 ambOccSum = diffuseSum + glossySum + specularSum;\nvec3 amboccParamValueInv = 1.0-amboccParamValue;\namboccScale = vec4(vec3(amboccParamValueInv.x*amboccParamValueInv.y*amboccScale.r+\namboccParamValue.x*amboccParamValueInv.y*amboccScale.g+\namboccParamValueInv.x*amboccParamValue.y*amboccScale.b+\namboccParamValue.x*amboccParamValue.y*amboccScale.a), 1.0);\nambOccSum *= amboccScale;\ngl_FragColor = ambOccSum + additionalSum;\n#else\ngl_FragColor = diffuseSum*pow(amboccScale, vec4(amboccBoost.x)) + glossySum*pow(amboccScale, vec4(amboccBoost.y)) + specularSum*pow(amboccScale, vec4(amboccBoost.z)) + additionalSum;\n#endif\n}\nelse\n{\ngl_FragColor = diffuseSum + glossySum + specularSum + additionalSum;\n}\n#endif\n\n\n#if num_scene_lights > 0\ngl_FragColor.rgb += lightsSum.rgb;\n#endif\n\n#if FadedReflectionsActive\nfloat fac = pow(clamp(fadedReflectionsScale*(vert.y + fadedReflectionsOffset), 0.0, 1.0), fadedReflectionsPow);\ngl_FragColor.rgb = mix(gl_FragColor.rgb, fadedReflectionsColor, fac);\n#endif\n\nif (alphaTexData.x != 0)\n{\ngl_FragColor.a = ReadRTTexture(alphatexture, alphaTexData, alphaUVT, ngnorm, neyeDir).x;\ngl_FragColor.a *= alphacolor;\n#if hasBrightReflections\nif (decalalpha == 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\nelse\n{\ngl_FragColor.a = alphacolor;\n}\n\n#if AVOIDCONDITIONALUNIFORMS\n#if HAS_PPEXISTENCE\nif (gl_FragColor.a < 0.5)\ndiscard;\n#endif\n#else\nif (ppexistence != 0 && gl_FragColor.a < 0.5)\ndiscard;\n#endif\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\ngl_FragColor.rgb = funchighlight(gl_FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\ngl_FragColor.rgb = vec3(funcdscs315_1_red(gl_FragColor.r), funcdscs315_1_green(gl_FragColor.g), funcdscs315_1_blue(gl_FragColor.b));\n#elif (camresponse == 306)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\n\ngl_FragColor.rgb = vec3(funcdscs315_2_green(gl_FragColor.r), funcdscs315_2_green(gl_FragColor.g), funcdscs315_2_green(gl_FragColor.b));\n#endif\n\nif (gamma != 1.0)\ngl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1.0/gamma));\n\n\n\n\n\n\n\n\nif (refractionmode == 1) {\ngl_FragColor.rgb *= exposure.rgb;\n#if hasBrightReflections\nif (decalalpha != 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\nreturn;\n}\n\ngl_FragColor.rgb = exposure.rgb*ApplyColorCorrection(gl_FragColor.rgb);\n\nif (vignetting > 0.0)\ngl_FragColor.rgb = gl_FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n\n\n\n\n\n#if hasBrightReflections\nif (decalalpha != 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\nif (isSecondaryMat != 0){\ngl_FragColor.a = gl_FragColor.a * secondaryMatAlpha;\ngl_FragColor.r = gl_FragColor.r * secondaryMatAlpha;\ngl_FragColor.g = gl_FragColor.g * secondaryMatAlpha;\ngl_FragColor.b = gl_FragColor.b * secondaryMatAlpha;\n}\n}\n";var shaderInfinityRT_Reflectivefs = "#define mipmapbiasEnv -1.0\n#define mipmapbias 0.0\n#define simpleintensity 0\n#define uhasDiffuseEnv 1\n#define PiDiv2 1.5707963267948966\n#define OneDivPi 0.3183098861837907\n\n#if extOESSD\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nuniform vec3 diffusecolor;\nuniform vec3 intensitycolor;\nuniform vec3 intensitybcolor;\nuniform vec3 specularcolor;\nuniform vec3 mapblurlevel;\nuniform vec3 additionalcolor;\nuniform vec3 ior_R0;\nuniform float invertreflectiony;\nuniform float alphacolor;\nuniform float gamma;\nuniform float highlightcompression;\nuniform float vignetting;\nuniform float envScale;\nuniform ivec3 ior_R0Flip;\nuniform ivec3 hasIOR;\n\nuniform samplerCube diffuseenv;\nuniform samplerCube specularenv;\nuniform samplerCube channelcache1cubetexture;\nuniform samplerCube channelcache2cubetexture;\nuniform samplerCube channelcache3cubetexture;\nuniform samplerCube specularblurenv;\n\nuniform float roughness;\nuniform int decalalpha;\nuniform int ppexistence;\nuniform int dualintensitycolor;\nuniform float dualintensityfalloff;\nuniform float roughnessEdgeFac;\nuniform float iorpower;\nuniform vec3 exposure;\nuniform vec3 glowbias;\n\nuniform float cc_brightness;\nuniform float cc_contrast;\nuniform float cc_saturation;\nuniform vec3 cc_tint;\nuniform int glowpass;\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\nuniform float fadedReflectionsScale;\nuniform float fadedReflectionsOffset;\nuniform float fadedReflectionsPow;\nuniform vec3 fadedReflectionsColor;\nuniform float curveMax;\nuniform float curveMin;\n\nuniform vec2 viewportsize;\nuniform float planarReflFlip;\n\nuniform  vec3 envAABBMin;\nuniform  vec3 envAABBMax;\n\nvarying vec2 tex1;\nvarying vec2 tex2;\nvarying vec3 g_norm;\nvarying vec3 eyeDir;\nvarying vec3 vert;\nvarying vec3 bu;\nvarying vec3 bv;\n\n\n\n\n\n\n\n\n\nvec3 spow(vec3 f0, vec3 f1)\n{\nreturn vec3((f0.x < 0.0) ? 0.0 : pow(f0.x, f1.x),\n(f0.y < 0.0) ? 0.0 : pow(f0.y, f1.y),\n(f0.z < 0.0) ? 0.0 : pow(f0.z, f1.z));\n}\n\nfloat spow(float f0, float f1)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn pow(f0, f1);\n}\n\nfloat ssqrt(float f0)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn sqrt(f0);\n}\n\nvec3 av(vec3 a, vec3 b)\n{\nreturn 0.5*(a + b);\n}\n\nvec3 funchighlight(vec3 v00, vec3 v01)\n{\nvec3 v02 = sqrt(v00);\nvec3 v03 = v01*v02;\nvec3 v04 = min(v02, v00);\nvec3 v05 = v04 - v03;\nvec3 v06 = av(v04, v05);\nvec3 v07 = av(v05, v06);\nvec3 v08 = av(v07, v02);\nvec3 v09 = min(v08, v00);\nreturn v09;\n}\n\nfloat funcdscs315_1_red(float v00)\n{\nfloat v01 = ssqrt(v00);\nfloat v02 = 0.571612;\nfloat v04 = v01 - v02;\nfloat v06 = 0.326853;\nfloat v07 = v04 + v01;\nfloat v08 = v06 + v07;\nfloat v10 = v04 + v08;\nfloat v13 = spow(v02, v10);\nfloat v15 = spow(v01, v13);\nreturn v15;\n}\n\nfloat funcdscs315_1_green(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = v01 + v00;\nfloat v04 = 0.207953;\nfloat v05 = 0.103824;\nfloat v06 = spow(v05, v02);\nfloat v07 = v06*v01;\nfloat v09 = spow(v04, v02);\nfloat v12 = spow(v05, v07);\nfloat v13 = spow(v12, v00);\nfloat v15 = v13 - v09;\nreturn v15;\n}\n\nfloat funcdscs315_1_blue(float v00)\n{\nfloat v01 = ssqrt(v00);\nfloat v02 = v00*v01;\nfloat v03 = v01 + v00;\nfloat v04 = spow(v02, v02);\nfloat v05 = -0.780725;\nfloat v07 = v04*v05;\nfloat v08 = v04 - v01;\nfloat v09 = v03*v02;\nfloat v11 = spow(v00, v07);\nfloat v12 = spow(v11, v08);\nfloat v14 = v09 - v03;\nfloat v16 = v08 - v14;\nfloat v18 = spow(v16, v12);\nfloat v23 = v07*v18;\nfloat v24 = spow(v11, v23);\nreturn v24;\n}\n\nfloat funcdscs315_2_red(float v00)\n{\nfloat v01 = v00*v00;\nfloat v02 = v01*v01;\nfloat v03 = v00 - v01;\nfloat v04 = 0.721305;\nfloat v05 = v04 - v03;\nfloat v07 = v00 + v03;\nfloat v09 = v02 + v05;\nfloat v10 = spow(v07, v09);\nreturn v10;\n}\n\nfloat funcdscs315_2_green(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = 0.067293;\nfloat v03 = 0.779595;\nfloat v05 = spow(v02, v01);\nfloat v06 = v01*v05;\nfloat v07 = spow(v06, v03);\nfloat v09 = spow(v07, v05);\nreturn v09;\n}\n\nfloat funcdscs315_2_blue(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = spow(v00, v01);\nfloat v03 = spow(v02, v02);\nfloat v04 = v00 - v02;\nfloat v05 = spow(v03, v02);\nfloat v06 = 0.796991;\nfloat v07 = v04 + v05;\nfloat v08 = spow(v07, v06);\nreturn v08;\n}\n\nvec3 ApplyInputCC(vec3 col, vec4 inputCC)\n{\n\nif (inputCC.a != 1.0)\ncol = pow(col, vec3(1.0 / inputCC.a));\n\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + inputCC.b * (col - rgbGrey);\nreturn ((rgbSat - 0.5) * inputCC.g + 0.5) + inputCC.r;\n}\n\n\nvec3 ApplyColorCorrection(vec3 col)\n{\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + cc_saturation * (col - rgbGrey);\nreturn ((rgbSat-0.5) * cc_contrast + 0.5) * cc_tint.rgb + cc_brightness;\n}\n\nfloat saturate(float x)\n{\nreturn clamp(x, 0.0, 1.0);\n}\nfloat Pow5(float x)\n{\nfloat xx = x*x;\nreturn xx * xx * x;\n}\n\nvec3 Pow5(vec3 x)\n{\nvec3 xx = x*x;\nreturn xx * xx * x;\n}\n\n\n#if num_scene_lights > 0\n#if MAXFRAGUNIVECS < 128\nuniform mat4 ulights[2];\nuniform float light_roughnessdelta[2];\n#else\nuniform mat4 ulights[num_scene_lights];\nuniform float light_roughnessdelta[num_scene_lights];\n#endif\nconst float PI = 3.1415926535897932;\n\nstruct Light {\nvec4 colorIntensity;\nvec3 l;\nfloat attenuation;\nfloat NoL;\n};\n\nfloat getSquareFalloffAttenuation(float distanceSquare, float falloff) {\nfloat factor = distanceSquare * falloff;\nfloat smoothFactor = saturate(1.0 - factor * factor);\nreturn smoothFactor * smoothFactor;\n}\n\nfloat getDistanceAttenuation(const /*highp*/ vec3 posToLight, float falloff) {\nfloat distanceSquare = dot(posToLight, posToLight);\nfloat attenuation = getSquareFalloffAttenuation(distanceSquare, falloff);\nreturn attenuation * 1.0 / max(distanceSquare, 1e-4);\n}\n\nfloat getAngleAttenuation(const vec3 lightDir, const vec3 l, const vec2 scaleOffset) {\nfloat cd = dot(lightDir, l);\nfloat attenuation = saturate(cd * scaleOffset.x + scaleOffset.y);\nreturn attenuation * attenuation;\n}\n\nfloat Filament_D_GGX(float roughness, float NoH) {\nfloat oneMinusNoHSquared = 1.0 - NoH * NoH;\nfloat a = NoH * roughness;\nfloat k = roughness / (oneMinusNoHSquared + a * a);\nfloat d = k * k * (1.0 / PI);\nreturn d;\n}\n\nfloat V_SmithGGXCorrelated(float roughness, float NoV, float NoL) {\nfloat a2 = roughness * roughness;\nfloat lambdaV = NoL * sqrt((NoV - a2 * NoV) * NoV + a2);\nfloat lambdaL = NoV * sqrt((NoL - a2 * NoL) * NoL + a2);\nfloat v = 0.5 / (lambdaV + lambdaL);\nreturn v;\n}\n\nfloat F_Schlick(float f0, float f90, float VoH) {\nreturn f0 + (f90 - f0) * Pow5(1.0 - VoH);\n}\n\nvec3 F_Schlick(const vec3 f0, float f90, float VoH) {\nreturn f0 + (f90 - f0) * Pow5(1.0 - VoH);\n}\n\nvec3 Filament_fresnel(const vec3 f0, float LoH) {\nfloat f90 = saturate(dot(f0, vec3(50.0 * 0.33)));\nreturn F_Schlick(f0, f90, LoH);\n}\n\nvec3 diffuseLobe(const vec3 f0, float NoV, float NoL, float LoH) {\nreturn f0 / PI;\n}\n\nvec3 specularLobe(Light light, float lightroughness, const vec3 h, float NoV, float NoL, float NoH, float LoH, const vec3 f0) {\nfloat D = Filament_D_GGX(lightroughness, NoH);\nfloat V = V_SmithGGXCorrelated(lightroughness, NoV, NoL);\nvec3  F = Filament_fresnel(f0, LoH);\nreturn (D * V) * F;\n}\n\nvec3 MatchLight_surfaceShading(Light light, float lightroughness, vec3 N, vec3 V, const vec3 f0, const vec3 f0_diff) {\nvec3 h = normalize(V + light.l);\n\nfloat NoV = dot(N, V);\nfloat NoL = light.NoL;\nif (NoL < 0.0001)\nreturn vec3(0.0);\nfloat NoH = clamp(dot(N, h), 0.0001, 1.0);\nfloat LoH = clamp(dot(light.l, h), 0.0001, 1.0);\n\nvec3 Fr = specularLobe(light, lightroughness, h, NoV, NoL, NoH, LoH, f0);\nvec3 Fd = diffuseLobe(f0_diff, NoV, NoL, LoH);\n\nvec3 color = Fd + Fr /* pixel.energyCompensation*/;\nreturn (color * light.colorIntensity.rgb) *\n(light.colorIntensity.w * light.attenuation * NoL /* occlusion*/);\n}\n#endif\n\n\nvec4 ReadRTGlossy(vec3 reflectDir, float roughness)\n{\nvec4 colA1, colB1;\nvec2 rpOffsetA1, rpOffsetB1;\nfloat mixAB1;\n#if AABBEnvironmentMapActive\nvec3 EnvBoxPos = ((envAABBMax + envAABBMin) * 0.5);\n\nvec3 rbmax = (envAABBMax - vert)/reflectDir;\nvec3 rbmin = (envAABBMin - vert)/reflectDir;\nvec3 rbminmax;\nrbminmax.x = (reflectDir.x > 0.0) ? rbmax.x : rbmin.x;\nrbminmax.y = (reflectDir.y > 0.0) ? rbmax.y : rbmin.y;\nrbminmax.z = (reflectDir.z > 0.0) ? rbmax.z : rbmin.z;\nfloat fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);\nvec3 posonbox = vert + reflectDir*fa;\nreflectDir = posonbox - EnvBoxPos;\n#endif\n#if ComplexGlossyRead\nif (simpleintensity != 1)\n{\nif (roughness <= mapblurlevel.r)\n{\ncolA1 = textureCube(specularenv, reflectDir, mipmapbiasEnv);\ncolB1 = textureCube(channelcache1cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = clamp((roughness-0.000000)/mapblurlevel.r, 0.0, 1.0);\nrpOffsetA1 = vec2(0.0);\nrpOffsetB1 = vec2(0.5, 0.0);\n}\nelse if (roughness <= mapblurlevel.g)\n{\ncolA1 = textureCube(channelcache1cubetexture, reflectDir, mipmapbiasEnv);\ncolB1 = textureCube(channelcache2cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = clamp((roughness-mapblurlevel.r)/(mapblurlevel.g-mapblurlevel.r), 0.0, 1.0);\nrpOffsetA1 = vec2(0.5, 0.0);\nrpOffsetB1 = vec2(0.0, 0.5);\n}\nelse\n{\ncolA1 = textureCube(channelcache2cubetexture, reflectDir, mipmapbiasEnv);\ncolB1 = textureCube(channelcache3cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = clamp((roughness-mapblurlevel.g)/(mapblurlevel.b-mapblurlevel.g), 0.0, 1.0);\nrpOffsetA1 = vec2(0.0, 0.5);\nrpOffsetB1 = vec2(0.5, 0.5);\n}\n}\nelse\n#endif\n{\ncolA1 = colB1 = textureCube(channelcache3cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = 0.5;\nrpOffsetA1 = vec2(0.0);\nrpOffsetB1 = vec2(0.5, 0.0);\n}\n#if encodeenvmapsinmono\nif (colA1.b<1.0) colA1=vec4(vec3(colA1.r+colA1.g+colA1.b), 1.0);\nelse colA1=vec4(vec3(colA1.b+(1.0-colA1.r)+(1.0-colA1.g)+2.0), 1.0);\nif (colB1.b<1.0) colB1=vec4(vec3(colB1.r+colB1.g+colB1.b), 1.0);\nelse colB1=vec4(vec3(colB1.b+(1.0-colB1.r)+(1.0-colB1.g)+2.0), 1.0);\n#else\n#if extrabrightenvmap\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*256.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*256.0, 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\n#endif\n#endif\ncolA1.rgb *= envScale;\ncolB1.rgb *= envScale;\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\ncolB1.rgb = pow(colB1.rgb, vec3(gamma));\n#endif\n\n\nreturn mix(colA1, colB1, mixAB1);\n}\n\nvec4 ReadRTSpecular(vec3 reflectDir, float lod, float mixfac)\n{\n\nvec4 specularSum = vec4(0.0,0.0,0.0,1.0);\n\nvec4 colA1 = textureCube(specularenv, reflectDir, lod);\nvec4 colB1 = (mixfac > 0.01) ? textureCube(specularblurenv, reflectDir, lod) : colA1;\n\n\n#if encodeenvmapsinmono\nif (colA1.b<1.0) colA1=vec4(vec3(colA1.r+colA1.g+colA1.b), 1.0);\nelse colA1=vec4(vec3(colA1.b+(1.0-colA1.r)+(1.0-colA1.g)+2.0), 1.0);\nif (colB1.b<1.0) colB1=vec4(vec3(colB1.r+colB1.g+colB1.b), 1.0);\nelse colB1=vec4(vec3(colB1.b+(1.0-colB1.r)+(1.0-colB1.g)+2.0), 1.0);\n#else\n#if extrabrightenvmap\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*256.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*256.0, 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\n#endif\n#endif\ncolA1.rgb *= envScale;\ncolB1.rgb *= envScale;\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\ncolB1.rgb = pow(colB1.rgb, vec3(gamma));\n#endif\n\nspecularSum = mix(colA1, colB1, mixfac);\n\nreturn specularSum;\n}\n\nvoid main(void)\n{\nvec3 reflectDir;\nvec3 neyeDir = normalize(eyeDir);\nvec3 ngnorm = 0.9999*normalize(g_norm);\n\nreflectDir = reflect(neyeDir, ngnorm);\nreflectDir = normalize(reflectDir);\nreflectDir.y *= invertreflectiony*planarReflFlip;\n\nfloat Curve = 0.0;\n#if extOESSD\nvec3 dxTex = 0.5*dFdx(g_norm);\nvec3 dyTex = 0.5*dFdy(g_norm);\n\nCurve = max(length(dxTex), length(dyTex));\n#endif\n\nvec4 diffuseSum = vec4(0.0);\nvec4 diffuseScale = vec4(diffusecolor, 0.0);\nif (dot(diffuseScale, diffuseScale) > 0.0) {\ndiffuseSum = vec4(1.0);\n\nvec3 diffnorm = ngnorm;\ndiffnorm.y *= planarReflFlip;\nvec4 diffuseSample = textureCube(diffuseenv, diffnorm, mipmapbiasEnv);\n#if encodeenvmapsinmono\nif (diffuseSample.b<1.0) diffuseSample=vec4(vec3(diffuseSample.r+diffuseSample.g+diffuseSample.b), 1.0);\nelse diffuseSample=vec4(vec3(diffuseSample.b+(1.0-diffuseSample.r)+(1.0-diffuseSample.g)+2.0), 1.0);\n#else\n#if extrabrightenvmap\ndiffuseSample = vec4(diffuseSample.rgb+(1.0-diffuseSample.a)*256.0, 1.0);\n#else\ndiffuseSample = vec4(diffuseSample.rgb+(1.0-diffuseSample.a)*64.0, 1.0);\n#endif\n#endif\ndiffuseSample.rgb *= envScale;\n#if hdribias\ndiffuseSample.rgb = pow(diffuseSample.rgb, vec3(gamma));\n#endif\ndiffuseSum = diffuseSample;\n\ndiffuseSum *= diffuseScale;\n}\n\n\nfloat totRoughness = roughness;\n\nfloat fAcosAngle = clamp(-dot(neyeDir, ngnorm), 0.0, 1.0);\nvec4 glossySum = vec4(0.0);\nvec3 intensitySum = (dualintensitycolor != 0) ? mix(intensitybcolor, intensitycolor, pow(fAcosAngle, dualintensityfalloff)) : intensitycolor;\nif (dot(intensitySum, intensitySum) > 0.0) {\nglossySum = ReadRTGlossy(reflectDir, totRoughness*((1.0 - roughnessEdgeFac) * fAcosAngle + roughnessEdgeFac));\nglossySum.rgb *= intensitySum;\n}\n\n\nfloat dotnd = dot(neyeDir, ngnorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nvec4 specularSum = vec4(0.0);\nvec4 specularScale = vec4(specularcolor, 1.0);\nvec3 specularNorm = normalize(g_norm);\nvec3 specularReflectDir = normalize(reflect(neyeDir, specularNorm));\nif (dot(specularScale, specularScale) > 0.0) {\n{\nfloat mixfac = 0.0;\n#if extOESSD\nmixfac = clamp((Curve-(curveMin))/(curveMax-curveMin),0.0,1.0);\n#endif\nspecularSum = ReadRTSpecular(specularReflectDir, mipmapbiasEnv, mixfac);\n}\nspecularSum *= specularScale;\n}\n\n#if num_scene_lights > 0\nvec4 lightsSum = vec4(0.0);\nvec3 blackColor = vec3(0.0);\nfloat fStoredRoughness = pow(totRoughness, 1.0 / 3.0);\n\n#if MAXFRAGUNIVECS < 128\nconst int numLights = (num_scene_lights > 2) ? 2 : num_scene_lights;\n#else\nconst int numLights = num_scene_lights;\n#endif\nfor (int lightIndex = 0; lightIndex < numLights; lightIndex++)\n{\nvec4 positionFalloff, colorIntensity, directionIES, scaleOffsetShadowType;\n\ncolorIntensity = ulights[lightIndex][1];\nif (colorIntensity.rgb == blackColor){\ncontinue;\n}\npositionFalloff = ulights[lightIndex][0];\ndirectionIES = ulights[lightIndex][2];\nscaleOffsetShadowType = ulights[lightIndex][3];\n\nvec3 posToLight = positionFalloff.xyz - vert;\nif (dot(ngnorm, posToLight) < 0.0001)\ncontinue;\n\nLight light;\nlight.l = normalize(posToLight);\nlight.attenuation = getDistanceAttenuation(posToLight, positionFalloff.w);\nlight.NoL = saturate(dot(ngnorm, light.l));\nif (scaleOffsetShadowType.w < 0.0)\nlight.attenuation *= getAngleAttenuation(-directionIES.xyz, light.l, scaleOffsetShadowType.xy);\nif (light.attenuation*(colorIntensity.r+colorIntensity.g+colorIntensity.b)*colorIntensity.w < 0.000333)\ncontinue;\nlight.colorIntensity.rgb = colorIntensity.rgb;\nlight.colorIntensity.w = colorIntensity.w;\nfloat light_roughness = fStoredRoughness + light_roughnessdelta[lightIndex];\n\nlightsSum.rgb += MatchLight_surfaceShading(light, light_roughness, ngnorm, -neyeDir, specularScale.rgb + intensitySum.rgb, diffuseScale.rgb);\n}\n#endif\n\n\nfloat powangle = pow(acos(-dotnd) / (3.14159625*0.5), iorpower);\nif (hasIOR.x != 0)\n{\nfloat powangle_diffuse = powangle;\nif (ior_R0Flip.x == 1) powangle_diffuse = 1.0-powangle;\nfloat fresnelFactorDiffuse = ior_R0.x + (1.0 - ior_R0.x) * powangle_diffuse;\ndiffuseSum *= fresnelFactorDiffuse;\n}\nif (hasIOR.y != 0)\n{\nfloat powangle_Intensity = powangle;\nif (ior_R0Flip.y == 1) powangle_Intensity = 1.0-powangle;\nfloat fresnelFactorIntensity = ior_R0.y + (1.0 - ior_R0.y) * powangle_Intensity;\nglossySum *= fresnelFactorIntensity;\n}\nif (hasIOR.z != 0)\n{\nfloat powangle_Clear = powangle;\n{\ndotnd = dot(neyeDir, specularNorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\npowangle_Clear = pow(acos(-dotnd) / (3.14159625*0.5), iorpower);\n}\nif (ior_R0Flip.z == 1) powangle_Clear = 1.0-powangle_Clear;\nfloat fresnelFactorClear = ior_R0.z + (1.0 - ior_R0.z) * powangle_Clear;\nspecularSum *= fresnelFactorClear;\n#if num_scene_lights > 0\nlightsSum *= fresnelFactorClear;\n#endif\n}\n\n\nvec4 additionalSum = vec4(additionalcolor, 1.0);\n\n\ngl_FragColor = diffuseSum + glossySum + specularSum + additionalSum;\n\n#if num_scene_lights > 0\ngl_FragColor.rgb += lightsSum.rgb;\n#endif\n\n#if FadedReflectionsActive\nfloat fac = pow(clamp(fadedReflectionsScale*(vert.y + fadedReflectionsOffset), 0.0, 1.0), fadedReflectionsPow);\ngl_FragColor.rgb = mix(gl_FragColor.rgb, fadedReflectionsColor, fac);\n#endif\n\ngl_FragColor.a = alphacolor;\n\n#if AVOIDCONDITIONALUNIFORMS\n#if HAS_PPEXISTENCE\nif (gl_FragColor.a < 0.5)\ndiscard;\n#endif\n#else\nif (ppexistence != 0 && gl_FragColor.a < 0.5)\ndiscard;\n#endif\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\ngl_FragColor.rgb = funchighlight(gl_FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\ngl_FragColor.rgb = vec3(funcdscs315_1_red(gl_FragColor.r), funcdscs315_1_green(gl_FragColor.g), funcdscs315_1_blue(gl_FragColor.b));\n#elif (camresponse == 306)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\n\ngl_FragColor.rgb = vec3(funcdscs315_2_green(gl_FragColor.r), funcdscs315_2_green(gl_FragColor.g), funcdscs315_2_green(gl_FragColor.b));\n#endif\n\nif (gamma != 1.0)\ngl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1.0/gamma));\n\n\n\n\n\n\n\n\ngl_FragColor.rgb = exposure.rgb*ApplyColorCorrection(gl_FragColor.rgb);\n\nif (vignetting > 0.0)\ngl_FragColor.rgb = gl_FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n\n\n\n\n\n#if hasBrightReflections\nif (decalalpha != 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\n\nif (isSecondaryMat != 0){\ngl_FragColor.a = gl_FragColor.a * secondaryMatAlpha;\ngl_FragColor.r = gl_FragColor.r * secondaryMatAlpha;\ngl_FragColor.g = gl_FragColor.g * secondaryMatAlpha;\ngl_FragColor.b = gl_FragColor.b * secondaryMatAlpha;\n}\n}\n";var shaderInfinityRT_Unlitfs = "\n#if extOESSD\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nuniform	vec3 additionalcolor;\nuniform	vec3 cc_tint;\nuniform	float fadedReflectionsScale;\nuniform	float fadedReflectionsOffset;\nuniform	float fadedReflectionsPow;\nuniform	vec3 fadedReflectionsColor;\nuniform	float alphacolor;\nuniform	float mipmapbias;\nuniform	float gamma;\nuniform	float highlightcompression;\nuniform	float vignetting;\nuniform	float cc_brightness;\nuniform	float cc_contrast;\nuniform	float cc_saturation;\nuniform	vec3 exposure;\nuniform	vec3 glowbias;\nuniform	mat3 alphaUVT;\nuniform	mat3 additionalUVT;\n\nuniform	ivec2 additionalTexData;\nuniform	ivec2 alphaTexData;\nuniform	int gammaDiffAddTexs;\nuniform	int linearworkflow;\nuniform	int decalalpha;\nuniform	int ppexistence;\n\n\nuniform sampler2D alphatexture;\nuniform sampler2D additionaltexture;\n\nuniform int glowpass;\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\n\n\n\n\n\n\nuniform vec2 viewportsize;\nuniform int aarefinecount;\n\n\n\nvarying vec2 tex1;\nvarying vec2 tex2;\nvarying vec3 g_norm;\nvarying vec3 eyeDir;\nvarying vec3 vert;\nvarying vec3 bu;\nvarying vec3 bv;\n\n\n\n\n\nvec3 spow(vec3 f0, vec3 f1)\n{\nreturn vec3((f0.x < 0.0) ? 0.0 : pow(f0.x, f1.x),\n(f0.y < 0.0) ? 0.0 : pow(f0.y, f1.y),\n(f0.z < 0.0) ? 0.0 : pow(f0.z, f1.z));\n}\n\nfloat spow(float f0, float f1)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn pow(f0, f1);\n}\n\nfloat ssqrt(float f0)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn sqrt(f0);\n}\n\nvec3 av(vec3 a, vec3 b)\n{\nreturn 0.5*(a + b);\n}\n\n\nvec3 funchighlight(vec3 v00, vec3 v01)\n{\nvec3 v02 = sqrt(v00);\nvec3 v03 = v01*v02;\nvec3 v04 = min(v02, v00);\nvec3 v05 = v04 - v03;\nvec3 v06 = av(v04, v05);\nvec3 v07 = av(v05, v06);\nvec3 v08 = av(v07, v02);\nvec3 v09 = min(v08, v00);\nreturn v09;\n}\n\nfloat funcdscs315_1_red(float v00)\n{\nfloat v01 = ssqrt(v00);\nfloat v02 = 0.571612;\nfloat v04 = v01 - v02;\nfloat v06 = 0.326853;\nfloat v07 = v04 + v01;\nfloat v08 = v06 + v07;\nfloat v10 = v04 + v08;\nfloat v13 = spow(v02, v10);\nfloat v15 = spow(v01, v13);\nreturn v15;\n}\n\nfloat funcdscs315_1_green(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = v01 + v00;\nfloat v04 = 0.207953;\nfloat v05 = 0.103824;\nfloat v06 = spow(v05, v02);\nfloat v07 = v06*v01;\nfloat v09 = spow(v04, v02);\nfloat v12 = spow(v05, v07);\nfloat v13 = spow(v12, v00);\nfloat v15 = v13 - v09;\nreturn v15;\n}\n\nfloat funcdscs315_1_blue(float v00)\n{\nfloat v01 = ssqrt(v00);\nfloat v02 = v00*v01;\nfloat v03 = v01 + v00;\nfloat v04 = spow(v02, v02);\nfloat v05 = -0.780725;\nfloat v07 = v04*v05;\nfloat v08 = v04 - v01;\nfloat v09 = v03*v02;\nfloat v11 = spow(v00, v07);\nfloat v12 = spow(v11, v08);\nfloat v14 = v09 - v03;\nfloat v16 = v08 - v14;\nfloat v18 = spow(v16, v12);\nfloat v23 = v07*v18;\nfloat v24 = spow(v11, v23);\nreturn v24;\n}\n\nfloat funcdscs315_2_red(float v00)\n{\nfloat v01 = v00*v00;\nfloat v02 = v01*v01;\nfloat v03 = v00 - v01;\nfloat v04 = 0.721305;\nfloat v05 = v04 - v03;\nfloat v07 = v00 + v03;\nfloat v09 = v02 + v05;\nfloat v10 = spow(v07, v09);\nreturn v10;\n}\n\nfloat funcdscs315_2_green(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = 0.067293;\nfloat v03 = 0.779595;\nfloat v05 = spow(v02, v01);\nfloat v06 = v01*v05;\nfloat v07 = spow(v06, v03);\nfloat v09 = spow(v07, v05);\nreturn v09;\n}\n\nfloat funcdscs315_2_blue(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = spow(v00, v01);\nfloat v03 = spow(v02, v02);\nfloat v04 = v00 - v02;\nfloat v05 = spow(v03, v02);\nfloat v06 = 0.796991;\nfloat v07 = v04 + v05;\nfloat v08 = spow(v07, v06);\nreturn v08;\n}\n\nvec3 ApplyInputCC(vec3 col, vec4 inputCC)\n{\n\nif (inputCC.a != 1.0)\ncol = pow(col, vec3(1.0 / inputCC.a));\n\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + inputCC.b * (col - rgbGrey);\nreturn ((rgbSat - 0.5) * inputCC.g + 0.5) + inputCC.r;\n}\n\nvec4 ReadRTTexture(sampler2D texSampler, ivec2 texData, mat3 texUVT, vec3 N, vec3 E)\n{\nif (texData.y == 0)\n{\nreturn texture2D(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\n}\nelse if (texData.y == 7)\n{\nreturn texture2D(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias).rrrr;\n}\nelse if (texData.y == 8)\n{\nreturn texture2D(texSampler, (texUVT*vec3(tex2, 1.0)).xy, mipmapbias);\n}\nelse if (texData.y == 9)\n{\nreturn texture2D(texSampler, (texUVT*vec3(tex2, 1.0)).xy, mipmapbias).rrrr;\n}\nelse if (texData.y == 1)\n{\n\nfloat dotnd = dot(N, E);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat FAng = acos(-dotnd) / (3.14159625*0.5);\nreturn texture2D(texSampler, vec2(FAng, 0.5), mipmapbias);\n}\n#if extOESSD\nelse if (texData.y == 2 && aarefinecount == -1)\n{\n\nvec4 pix;\nvec2 dxTex = 0.5*dFdx(tex1);\nvec2 dyTex = 0.5*dFdy(tex1);\npix = texture2D(texSampler, (texUVT*vec3(tex1-dxTex-dyTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1+dxTex-dyTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1-dxTex+dyTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1+dxTex+dyTex, 1.0)).xy, mipmapbias);\npix *= 0.25;\nreturn pix;\n}\nelse if (texData.y == 3 && aarefinecount == -1)\n{\n\nvec4 pix;\nvec2 dxTex = 0.5*dFdx(tex1);\nvec2 dyTex = 0.5*dFdy(tex1);\n\npix = texture2D(texSampler, (texUVT*vec3(tex1-dyTex-dxTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1-dyTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1-dyTex+dxTex, 1.0)).xy, mipmapbias);\n\npix += texture2D(texSampler, (texUVT*vec3(tex1-dxTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1+dxTex, 1.0)).xy, mipmapbias);\n\npix += texture2D(texSampler, (texUVT*vec3(tex1+dyTex-dxTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1+dyTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1+dyTex+dxTex, 1.0)).xy, mipmapbias);\n\npix /= 9.0;\nreturn pix;\n}\nelse if (texData.y == 4 && aarefinecount == -1)\n{\n\nvec4 pix;\nvec2 dxTex = 0.5*dFdx(tex1);\nvec2 dyTex = 0.5*dFdy(tex1);\n\npix = 0.25*texture2D(texSampler, (texUVT*vec3(tex1 - dyTex - dxTex, 1.0)).xy, mipmapbias);\npix += 0.5*texture2D(texSampler, (texUVT*vec3(tex1 - dyTex, 1.0)).xy, mipmapbias);\npix += 0.25*texture2D(texSampler, (texUVT*vec3(tex1 - dyTex + dxTex, 1.0)).xy, mipmapbias);\n\npix += 0.5*texture2D(texSampler, (texUVT*vec3(tex1 - dxTex, 1.0)).xy, mipmapbias);\npix += texture2D(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\npix += 0.5*texture2D(texSampler, (texUVT*vec3(tex1 + dxTex, 1.0)).xy, mipmapbias);\n\npix += 0.25*texture2D(texSampler, (texUVT*vec3(tex1 + dyTex - dxTex, 1.0)).xy, mipmapbias);\npix += 0.5*texture2D(texSampler, (texUVT*vec3(tex1 + dyTex, 1.0)).xy, mipmapbias);\npix += 0.25*texture2D(texSampler, (texUVT*vec3(tex1 + dyTex + dxTex, 1.0)).xy, mipmapbias);\n\npix /= 4.0;\nreturn pix;\n}\n#endif\nelse if (texData.y == 5)\n{\nvec3 dir = normalize(vert);\nvec2 latlong = vec2(mod((atan(-dir.x, dir.z) * 0.15915494309)+1.0, 1.0), 1.0-(acos(dir.y) * 0.31830988618));\nreturn texture2D(texSampler, latlong, mipmapbias);\n}\nreturn texture2D(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\n}\n\nvec3 ApplyColorCorrection(vec3 col)\n{\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + cc_saturation * (col - rgbGrey);\nreturn ((rgbSat-0.5) * cc_contrast + 0.5) * cc_tint.rgb + cc_brightness;\n}\n\n\n\nvoid main(void)\n{\nvec3 neyeDir = normalize(eyeDir);\nvec3 ngnorm = 0.9999*normalize(g_norm);\n\n\n\n\n\n\n\n\n\n\n\n\n\nvec4 additionalSum = vec4(additionalcolor, 1.0);\nif (additionalTexData.x != 0)\n{\nvec4 additionalTexPixel = ReadRTTexture(additionaltexture, additionalTexData, additionalUVT, ngnorm, neyeDir);\nif ((linearworkflow == 2) || (gammaDiffAddTexs != 0))\nadditionalTexPixel.rgb = pow(additionalTexPixel.rgb, vec3(2.2));\nadditionalSum *= additionalTexPixel;\n}\n\n\ngl_FragColor = additionalSum;\n\n#if FadedReflectionsActive\nfloat fac = pow(clamp(fadedReflectionsScale*(vert.y + fadedReflectionsOffset), 0.0, 1.0), fadedReflectionsPow);\ngl_FragColor.rgb = mix(gl_FragColor.rgb, fadedReflectionsColor, fac);\n#endif\n\nif (alphaTexData.x != 0)\n{\ngl_FragColor.a = ReadRTTexture(alphatexture, alphaTexData, alphaUVT, ngnorm, neyeDir).x;\ngl_FragColor.a *= alphacolor;\n#if hasBrightReflections\nif (decalalpha == 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\nelse\n{\ngl_FragColor.a = alphacolor;\n}\n\n#if AVOIDCONDITIONALUNIFORMS\n#if HAS_PPEXISTENCE\nif (gl_FragColor.a < 0.5)\ndiscard;\n#endif\n#else\nif (ppexistence != 0 && gl_FragColor.a < 0.5)\ndiscard;\n#endif\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\ngl_FragColor.rgb = funchighlight(gl_FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\ngl_FragColor.rgb = vec3(funcdscs315_1_red(gl_FragColor.r), funcdscs315_1_green(gl_FragColor.g), funcdscs315_1_blue(gl_FragColor.b));\n#elif (camresponse == 306)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\n\ngl_FragColor.rgb = vec3(funcdscs315_2_green(gl_FragColor.r), funcdscs315_2_green(gl_FragColor.g), funcdscs315_2_green(gl_FragColor.b));\n#endif\n\nif (gamma != 1.0)\ngl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1.0/gamma));\n\ngl_FragColor.rgb = exposure.rgb*ApplyColorCorrection(gl_FragColor.rgb);\n\nif (vignetting > 0.0)\ngl_FragColor.rgb = gl_FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n\n\n\n\n\n#if hasBrightReflections\nif (decalalpha != 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\nif (isSecondaryMat != 0){\ngl_FragColor.a = gl_FragColor.a * secondaryMatAlpha;\ngl_FragColor.r = gl_FragColor.r * secondaryMatAlpha;\ngl_FragColor.g = gl_FragColor.g * secondaryMatAlpha;\ngl_FragColor.b = gl_FragColor.b * secondaryMatAlpha;\n}\n}\n";var shaderInfinityRT_Match_Minifs = "#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nuniform int uhasDiffuseEnv;\nuniform samplerCube diffuseenv;\nuniform ivec2 diffuseTexData;\nuniform sampler2D diffusetexture;\nuniform mat3 diffuseUVT;\nuniform vec3 diffusecolor;\nuniform int linearworkflow;\n\nuniform samplerCube channelcache3cubetexture;\nuniform vec3 mapblurlevel;\nuniform ivec2 roughnessTexData;\nuniform sampler2D roughnesstexture;\nuniform mat3 roughnessUVT;\nuniform vec3 intensitycolor;\nuniform ivec2 intensityTexData;\nuniform sampler2D intensitytexture;\nuniform mat3 intensityUVT;\n\nuniform vec3 intensitybcolor;\n\nuniform samplerCube specularenv;\nuniform ivec2 specularTexData;\nuniform sampler2D speculartexture;\nuniform mat3 specularUVT;\nuniform vec3 specularcolor;\n\nuniform vec3 ior_R0;\nuniform ivec3 ior_R0Flip;\nuniform ivec3 hasIOR;\n\nuniform ivec2 alphaTexData;\nuniform sampler2D alphatexture;\nuniform mat3 alphaUVT;\nuniform float alphacolor;\n\nuniform ivec2 bumpTexData;\nuniform sampler2D bumptexture;\nuniform mat3 bumpUVT;\n\nuniform sampler2D reflectionplaneTex;\nuniform sampler2D reflectionplaneTex2;\nuniform int reflectionplanestotal;\nuniform mat4 reflectionplanematrix[2];\nuniform ivec2 reflectionplanetexval;\nuniform float reflectionplanescale;\n\nuniform ivec2 additionalTexData;\nuniform sampler2D additionaltexture;\nuniform mat3 additionalUVT;\nuniform vec3 additionalcolor;\n\nuniform ivec2 amboccTexData;\nuniform sampler2D ambocctexture;\nuniform mat3 amboccUVT;\nuniform vec3 amboccBoost;\n#if hasAmbOccTextureParam\nuniform vec3 amboccParamValue;\n#endif\n\n#if amboccusevertcol\nvarying float vcolor;\n#endif\n\nuniform float mipmapbias;\nfloat mipmapbiasEnv = -1.0;\n\nuniform float gamma;\nuniform int refractionmode;\nuniform float highlightcompression;\nuniform int uhasLUTTexture;\nuniform  samplerCube specularblurenv;\nuniform float vignetting;\nuniform vec2 viewportsize;\nuniform int aarefinecount;\nuniform float scenesize;\nuniform float fovfactor;\n\nuniform vec3 exposure;\n\nvarying vec2 tex1;\nvarying vec3 g_norm;\nvarying vec3 eyeDir;\nvarying vec3 vert;\nvarying vec3 bu;\nvarying vec3 bv;\n\nuniform vec3 cc_tint;\n\nuniform vec3 cc_bri_con_sat;\nfloat cc_brightness;\nfloat cc_contrast;\nfloat cc_saturation;\nuniform ivec4 iflagsA;\nint simpleintensity;\nint gammaDiffAddTexs;\nint decalalpha;\nint ppexistence;\nuniform ivec4 iflagsB;\nint dualintensitycolor;\nint sphericalwhirl;\nint clearIgnoreBump;\nint usebumpflakes;\nuniform vec4 fflagsA;\nfloat roughness;\nfloat roughnessEdgeFac;\nfloat invertreflectiony;\nfloat iorpower;\nuniform vec4 fflagsB;\nfloat envScale;\nfloat dualintensityfalloff;\nfloat NormDerivThreshold;\nfloat bumpuserscale;\n\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\nSIRT_STANDARD_HEADER_MINI_INSERT\n\nconst float PI = 3.1415926535897932;\n\nvec4 ReflectionPlaneCheck(mat4 rpmat, vec4 sumReflCol, vec3 reflectDir, vec2 offset, sampler2D texRefl)\n{\nfloat rpdist = dot(rpmat[2].xyz,rpmat[3].xyz-vert);\nif (rpdist < 0.0)\n{\nrpdist /= dot(reflectDir,rpmat[2].xyz);\nif (rpdist > 0.0) {\nvec3 phit = vert+(rpdist*reflectDir)-rpmat[3].xyz;\nvec2 uvInPlane = vec2(dot(phit,rpmat[0].xyz), dot(phit,rpmat[1].xyz));\nif (uvInPlane.x>=0.0 && uvInPlane.x<=1.0 && uvInPlane.y>=0.0 && uvInPlane.y<=1.0) {\nvec4 reflCol = texture2D(texRefl, (0.5*uvInPlane)+offset);\nsumReflCol.rgb += reflCol.rgb*reflCol.a;\nsumReflCol.a += reflCol.a;\n}\n}\n}\nreturn sumReflCol;\n}\n\nvec4 AddReflectionPlane(vec4 colResultRP, vec3 reflectDir, vec2 offset)\n{\nvec4 sumReflCol = vec4(0.0);\nif (reflectionplanestotal > 0) {\nif (reflectionplanetexval.x != 0)\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[0], sumReflCol, reflectDir, offset, reflectionplaneTex2);\nelse\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[0], sumReflCol, reflectDir, offset, reflectionplaneTex);\nif (reflectionplanestotal > 1) {\nif (reflectionplanetexval.y != 0)\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[1], sumReflCol, reflectDir, offset, reflectionplaneTex2);\nelse\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[1], sumReflCol, reflectDir, offset, reflectionplaneTex);\n}\n}\nif (sumReflCol.a != 0.0) {\nsumReflCol.rgb /= sumReflCol.a;\nsumReflCol.a = clamp(sumReflCol.a, 0.0, 1.0);\nreturn mix(colResultRP, vec4(reflectionplanescale*sumReflCol.rgb, 1.0), sumReflCol.a);\n}\nreturn colResultRP;\n}\n\nvec4 ReadRTGlossy(vec3 reflectDir, float roughness)\n{\nvec4 colA1 = textureCube(channelcache3cubetexture, reflectDir, mipmapbiasEnv);\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolA1.rgb *= envScale;\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\n#endif\ncolA1 = AddReflectionPlane(colA1, reflectDir, vec2(0.5, 0.0));\nreturn colA1;\n}\n\nvec4 ReadRTSpecular(vec3 reflectDir, float lod)\n{\nvec4 specularSum = textureCube(specularenv, reflectDir, lod);\nspecularSum = vec4(specularSum.rgb+(1.0-specularSum.a)*64.0, 1.0);\nspecularSum.rgb *= envScale;\n#if hdribias\nspecularSum.rgb = pow(specularSum.rgb, vec3(gamma));\n#endif\nreturn specularSum;\n}\n\nvoid main(void)\n{\n\ncc_brightness = cc_bri_con_sat.x;\ncc_contrast = cc_bri_con_sat.y;\ncc_saturation = cc_bri_con_sat.z;\nsimpleintensity = iflagsA.x;\ngammaDiffAddTexs = iflagsA.y;\ndecalalpha = iflagsA.z;\nppexistence = iflagsA.w;\ndualintensitycolor = iflagsB.x;\nsphericalwhirl = iflagsB.y;\nclearIgnoreBump = iflagsB.z;\nusebumpflakes = iflagsB.w;\nroughness = fflagsA.x;\nroughnessEdgeFac = fflagsA.y;\ninvertreflectiony = fflagsA.z;\niorpower = fflagsA.w;\nenvScale = fflagsB.x;\ndualintensityfalloff = fflagsB.y;\nNormDerivThreshold = fflagsB.z;\nbumpuserscale = fflagsB.w;\n\nvec3 reflectDir;\nvec3 neyeDir = normalize(eyeDir);\nvec3 ngnorm = normalize(g_norm);\n\nif (bumpTexData.x != 0) {\nvec3 bumpValue = ReadRTTexture(bumptexture, bumpTexData, bumpUVT, ngnorm, neyeDir).xyz;\nbumpValue = (bumpValue-0.498039)*2.0;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\nngnorm = normalize(ngnorm);\n}\n\nreflectDir = reflect(neyeDir, ngnorm);\nreflectDir = normalize(reflectDir);\nreflectDir.y *= invertreflectiony;\n\n\nvec4 diffuseSum = vec4(1.0);\nvec4 diffuseScale = vec4(diffusecolor, 0.0);\nif (uhasDiffuseEnv != 0) {\nvec4 diffuseSample = textureCube(diffuseenv, ngnorm, mipmapbiasEnv);\ndiffuseSample = vec4(diffuseSample.rgb+(1.0-diffuseSample.a)*64.0, 1.0);\ndiffuseSample.rgb *= envScale;\n#if hdribias\ndiffuseSample.rgb = pow(diffuseSample.rgb, vec3(gamma));\n#endif\ndiffuseSum = diffuseSample;\n}\nif (diffuseTexData.x != 0) {\nvec4 diffuseTexPixel = ReadRTTexture(diffusetexture, diffuseTexData, diffuseUVT, ngnorm, neyeDir);\nif ((linearworkflow == 2) || (gammaDiffAddTexs != 0))\ndiffuseTexPixel.rgb = pow(diffuseTexPixel.rgb, vec3(2.2));\ndiffuseScale *= diffuseTexPixel;\n}\ndiffuseSum *= diffuseScale;\n\n\nfloat totRoughness = roughness;\nif (roughnessTexData.x != 0) {\ntotRoughness *= ReadRTTexture(roughnesstexture, roughnessTexData, roughnessUVT, ngnorm, neyeDir).r;\n}\nfloat fAcosAngle = clamp(-dot(neyeDir, ngnorm), 0.0, 1.0);\nvec4 glossySum = ReadRTGlossy(reflectDir, totRoughness*((1.0 - roughnessEdgeFac) * fAcosAngle + roughnessEdgeFac));\nvec3 intensitySum = (dualintensitycolor != 0) ? mix(intensitybcolor, intensitycolor, pow(fAcosAngle, dualintensityfalloff)) : intensitycolor;\nif (intensityTexData.x != 0) {\nvec3 intensityTexPixel = ReadRTTexture(intensitytexture, intensityTexData, intensityUVT, ngnorm, neyeDir).rgb;\nif (linearworkflow == 2)\nintensityTexPixel.rgb = pow(intensityTexPixel.rgb, vec3(2.2));\nintensitySum *= intensityTexPixel;\n}\nglossySum.rgb *= intensitySum;\n\nfloat dotnd = dot(neyeDir, ngnorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\n\n\nvec3 specularNorm;\nvec3 specularReflectDir;\nif (clearIgnoreBump == 1) {\nspecularNorm = normalize(g_norm);\nspecularReflectDir = normalize(reflect(neyeDir, specularNorm));\n}\nelse {\nspecularNorm = ngnorm;\nspecularReflectDir = reflectDir;\n}\nvec4 specularSum = ReadRTSpecular(specularReflectDir, mipmapbiasEnv);\nspecularSum = AddReflectionPlane(specularSum, specularReflectDir, vec2(0.0));\nvec4 specularScale = vec4(specularcolor, 1.0);\nif (specularTexData.x != 0)\nspecularScale *= ReadRTTexture(speculartexture, specularTexData, specularUVT, specularNorm, neyeDir);\nspecularSum *= specularScale;\n\n\nfloat powangle = pow(acos(-dotnd) / (3.14159625*0.5), iorpower);\nif (hasIOR.x != 0)\n{\nfloat powangle_diffuse = powangle;\nif (ior_R0Flip.x == 1) powangle_diffuse = 1.0-powangle;\nfloat fresnelFactorDiffuse = ior_R0.x + (1.0 - ior_R0.x) * powangle_diffuse;\ndiffuseSum *= fresnelFactorDiffuse;\n}\nif (hasIOR.y != 0)\n{\nfloat powangle_Intensity = powangle;\nif (ior_R0Flip.y == 1) powangle_Intensity = 1.0-powangle;\nfloat fresnelFactorIntensity = ior_R0.y + (1.0 - ior_R0.y) * powangle_Intensity;\nglossySum *= fresnelFactorIntensity;\n}\nif (hasIOR.z != 0)\n{\nfloat powangle_Clear = powangle;\nif (clearIgnoreBump == 1)\n{\ndotnd = dot(neyeDir, specularNorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\npowangle_Clear = pow(acos(-dotnd) / (3.14159625*0.5), iorpower);\n}\nif (ior_R0Flip.z == 1) powangle_Clear = 1.0-powangle_Clear;\nfloat fresnelFactorClear = ior_R0.z + (1.0 - ior_R0.z) * powangle_Clear;\nspecularSum *= fresnelFactorClear;\n}\n\n\nvec4 additionalSum = vec4(additionalcolor, 1.0);\nif (additionalTexData.x != 0)\n{\nvec4 additionalTexPixel = ReadRTTexture(additionaltexture, additionalTexData, additionalUVT, ngnorm, neyeDir);\nif ((linearworkflow == 2) || (gammaDiffAddTexs != 0))\nadditionalTexPixel.rgb = pow(additionalTexPixel.rgb, vec3(2.2));\nadditionalSum *= additionalTexPixel;\n}\n\n\n#if amboccusevertcol\nvec4 ambOccSum = (diffuseSum + glossySum + specularSum) * (1.0-vcolor);\ngl_FragColor = ambOccSum + additionalSum;\n#else\nif (amboccTexData.x != 0) {\nvec4 amboccScale = ReadRTTexture(ambocctexture, amboccTexData, amboccUVT, ngnorm, neyeDir);\nif (linearworkflow == 2)\namboccScale.rgb = pow(amboccScale.rgb, vec3(2.2));\n#if hasAmbOccTextureParam\nvec4 ambOccSum = diffuseSum + glossySum + specularSum;\nvec3 amboccParamValueInv = 1.0-amboccParamValue;\namboccScale = vec4(vec3(amboccParamValueInv.x*amboccParamValueInv.y*amboccScale.r+\namboccParamValue.x*amboccParamValueInv.y*amboccScale.g+\namboccParamValueInv.x*amboccParamValue.y*amboccScale.b+\namboccParamValue.x*amboccParamValue.y*amboccScale.a), 1.0);\nambOccSum *= amboccScale;\ngl_FragColor = ambOccSum + additionalSum;\n#else\ngl_FragColor = diffuseSum*pow(amboccScale, vec4(amboccBoost.x)) + glossySum*pow(amboccScale, vec4(amboccBoost.y)) + specularSum*pow(amboccScale, vec4(amboccBoost.z)) + additionalSum;\n#endif\n}\nelse\n{\ngl_FragColor = diffuseSum + glossySum + specularSum + additionalSum;\n}\n#endif\n\n\nif (alphaTexData.x != 0)\n{\ngl_FragColor.a = ReadRTTexture(alphatexture, alphaTexData, alphaUVT, ngnorm, neyeDir).x;\ngl_FragColor.a *= alphacolor;\n#if hasBrightReflections\nif (decalalpha == 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\nelse\n{\ngl_FragColor.a = alphacolor;\n}\nif (ppexistence != 0 && gl_FragColor.a < 0.5)\ndiscard;\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\ngl_FragColor.rgb = funchighlight(gl_FragColor.rgb, vec3(highlightcompression));\n\nif (gamma != 1.0)\ngl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1.0/gamma));\n\n\n\n\n\n\n\n\nif (refractionmode == 1) {\ngl_FragColor.rgb *= exposure.rgb;\n#if hasBrightReflections\nif (decalalpha != 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\nreturn;\n}\n\ngl_FragColor.rgb = exposure.rgb*ApplyColorCorrection(gl_FragColor.rgb);\n\nif (vignetting > 0.0)\ngl_FragColor.rgb = gl_FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n\n\n\n\n\n#if hasBrightReflections\nif (decalalpha != 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\nif (isSecondaryMat != 0){\ngl_FragColor.a = gl_FragColor.a * secondaryMatAlpha;\ngl_FragColor.r = gl_FragColor.r * secondaryMatAlpha;\ngl_FragColor.g = gl_FragColor.g * secondaryMatAlpha;\ngl_FragColor.b = gl_FragColor.b * secondaryMatAlpha;\n}\n}\n";var shaderInfinityRT_Glass_Refractedfs = "#if extOESSD\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n\nuniform samplerCube specularenv;\nuniform int uhasSpecularTexture;\nuniform sampler2D speculartexture;\nuniform mat3 specularUVT;\nuniform vec3 specularcolor;\n\nuniform int uhasBaseTexture;\nuniform sampler2D basetexture;\nuniform mat3 baseUVT;\nuniform vec3 basecolor;\n\nuniform ivec2 bumpTexData;\nuniform sampler2D bumptexture;\nuniform mat3 bumpUVT;\nuniform float bumpuserscale;\n\nuniform sampler2D refractiontexture;\nuniform float refractscale;\nuniform float refractthinness;\nuniform vec3 camx;\nuniform vec3 camy;\nuniform vec3 camz;\nuniform int uhasTransmissionTexture;\nuniform sampler2D transmissiontexture;\nuniform mat3 transmissionUVT;\nuniform vec3 transmissioncolor;\nuniform float ior_R0Intensity;\nuniform float ior_R0Clear;\nuniform int ior_R0IntensityFlip;\nuniform int ior_R0ClearFlip;\nuniform float brdf_curve;\n\nuniform float mipmapbias;\n\nuniform float gamma;\nuniform float highlightcompression;\nuniform int uhasLUTTexture;\n\nuniform float vignetting;\nuniform vec2 viewportsize;\nuniform int aarefinecount;\nuniform float scenesize;\nuniform float fovfactor;\n\nuniform vec3 exposure;\n\nvarying vec2 tex1;\nvarying vec2 tex2;\nvarying vec3 g_norm;\nvarying vec3 eyeDir;\nvarying vec3 vert;\nvarying vec3 bu;\nvarying vec3 bv;\n\nuniform float cc_brightness;\nuniform float cc_contrast;\nuniform float cc_saturation;\nuniform vec3 cc_tint;\n\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\nuniform int hasIORIntensity;\nuniform int hasIORClear;\n\n#if has2ndRef\nuniform vec2 v2ndRef;\n#endif\n\nSIRT_STANDARD_HEADER_INSERT\n\nvoid main()\n{\nvec3 reflectDir;\nvec3 neyeDir = normalize(eyeDir);\n\nvec3 ngnorm = normalize(g_norm);\nif (bumpTexData.x != 0) {\nvec3 bumpValue = ReadRTTexture(bumptexture, bumpTexData, bumpUVT, ngnorm, neyeDir).xyz;\nbumpValue = (bumpValue-0.498039)*2.0;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\nngnorm = normalize(ngnorm);\n}\n\nreflectDir = reflect(neyeDir, ngnorm);\nreflectDir = normalize(reflectDir);\n\n\nvec4 specularSum = textureCube(specularenv, reflectDir);\n#if encodeenvmapsinmono\nif (specularSum.b<1.0) specularSum=vec4(vec3(specularSum.r+specularSum.g+specularSum.b), 1.0);\nelse specularSum=vec4(vec3(specularSum.b+(1.0-specularSum.r)+(1.0-specularSum.g)+2.0), 1.0);\n#else\nspecularSum = vec4(specularSum.rgb+(1.0-specularSum.a)*64.0, 1.0);\n#endif\n#if hdribias\nspecularSum.rgb = pow(specularSum.rgb, vec3(gamma));\n#endif\n#if has2ndRef\nvec3 reflectDir2 = neyeDir-(2.0+v2ndRef.x)*ngnorm*dot(neyeDir, ngnorm);\nvec4 specularSum2 = textureCube(specularenv, reflectDir2);\nspecularSum2 = vec4(specularSum2.rgb+(1.0-specularSum2.a)*64.0, 1.0);\n#if hdribias\nspecularSum2.rgb = pow(specularSum2.rgb, vec3(gamma));\n#endif\nspecularSum.rgb += specularSum2.rgb*v2ndRef.y;\n#endif\nvec4 specularScale = vec4(specularcolor, 1.0);\nif (uhasSpecularTexture != 0)\n{\nspecularScale *= texture2D(speculartexture, (specularUVT*vec3(tex1,1.0)).xy, mipmapbias);\n}\nspecularSum *= specularScale;\n\nvec4 baseScale = vec4(basecolor, 1.0);\nif (uhasBaseTexture != 0)\n{\nbaseScale *= texture2D(basetexture, (baseUVT*vec3(tex1,1.0)).xy, mipmapbias);\n}\nspecularSum += baseScale;\n\n\nvec2 scrpos = gl_FragCoord.xy/viewportsize;\nvec2 scroffset;\nfloat zDepth = dot(vert-uCamPos, camz);\nscroffset.x = dot(camx, ngnorm);\nscroffset.y = dot(camy, ngnorm);\nfloat scroffsetlen = length(scroffset);\nif (scroffsetlen == 0.0) scroffsetlen = 1.0;\nscroffset /= scroffsetlen;\nscroffsetlen = pow(scroffsetlen, refractthinness);\nscroffset *= refractscale*scroffsetlen/zDepth;\nvec4 colRefraction = texture2D(refractiontexture, scrpos+scroffset);\nif (gamma != 1.0)\ncolRefraction.rgb = pow(colRefraction.rgb, vec3(gamma));\ncolRefraction *= vec4(transmissioncolor, 1.0);\nif (uhasTransmissionTexture != 0)\n{\ncolRefraction *= texture2D(transmissiontexture, (transmissionUVT*vec3(tex1,1.0)).xy, mipmapbias);\n}\n\n\nfloat dotnd = dot(neyeDir, ngnorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat powangle = pow(acos(-dotnd) / (3.14159625*0.5), 5.0);\nif (hasIORIntensity != 0)\n{\nfloat powangle_Intensity = powangle;\nif (ior_R0IntensityFlip == 1) powangle_Intensity = 1.0-powangle;\nfloat fresnelFactorIntensity = ior_R0Intensity + (1.0 - ior_R0Intensity) * powangle_Intensity;\ncolRefraction *= fresnelFactorIntensity;\n\n\n}\nif (hasIORClear != 0)\n{\nfloat powangle_Clear = powangle;\nif (ior_R0ClearFlip == 1) powangle_Clear = 1.0-powangle_Clear;\nfloat fresnelFactorClear = ior_R0Clear + (1.0 - ior_R0Clear) * powangle_Clear;\nspecularSum *= fresnelFactorClear;\n}\n\ngl_FragColor.xyz = specularSum.xyz + colRefraction.rgb;\ngl_FragColor.a = 1.0;\n\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\ngl_FragColor.rgb = funchighlight(gl_FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\ngl_FragColor.rgb = vec3(funcdscs315_1_red(gl_FragColor.r), funcdscs315_1_green(gl_FragColor.g), funcdscs315_1_blue(gl_FragColor.b));\n#elif (camresponse == 306)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\n\ngl_FragColor.rgb = vec3(funcdscs315_2_green(gl_FragColor.r), funcdscs315_2_green(gl_FragColor.g), funcdscs315_2_green(gl_FragColor.b));\n#endif\n\nif (gamma != 1.0)\ngl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1.0/gamma));\n\n#if BUILDVERSION < 423\nif (uhasLUTTexture != 0)\ngl_FragColor.rgb = ApplyLUT(gl_FragColor.rgb);\n#endif\n\ngl_FragColor.rgb = exposure.rgb*ApplyColorCorrection(gl_FragColor.rgb);\n\nif (vignetting > 0.0)\ngl_FragColor.rgb = gl_FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n#if BUILDVERSION >= 423\nif (uhasLUTTexture != 0)\ngl_FragColor.rgb = ApplyLUT(gl_FragColor.rgb);\n#endif\n}\nif (isSecondaryMat != 0){\ngl_FragColor.a = gl_FragColor.a * secondaryMatAlpha;\ngl_FragColor.r = gl_FragColor.r * secondaryMatAlpha;\ngl_FragColor.g = gl_FragColor.g * secondaryMatAlpha;\ngl_FragColor.b = gl_FragColor.b * secondaryMatAlpha;\n}\n}\n";var shaderInfinityRT_PBR2fs = "#if extOESSD\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nuniform samplerCube diffuseenv;\nuniform int uhasDiffuseTexture;\nuniform sampler2D diffusetexture;\nuniform mat3 diffuseUVT;\nuniform vec3 diffusecolor;\n\nuniform samplerCube channelcache1cubetexture;\nuniform samplerCube channelcache2cubetexture;\nuniform samplerCube channelcache3cubetexture;\nuniform float roughness;\nuniform vec3 mapblurlevel;\nuniform int uhasRoughnessTexture;\nuniform sampler2D roughnesstexture;\nuniform mat3 roughnessUVT;\nuniform vec3 intensitycolor;\nuniform int uhasIntensityTexture;\nuniform sampler2D intensitytexture;\nuniform mat3 intensityUVT;\n\nuniform samplerCube specularenv;\nuniform int uhasSpecularTexture;\nuniform sampler2D speculartexture;\nuniform mat3 specularUVT;\nuniform vec3 specularcolor;\nuniform float envScale;\n\nuniform float metallic;\nuniform int uhasMetallicTexture;\nuniform mat3 metallicUVT;\nuniform sampler2D metallictexture;\n\nuniform int uhasAlphaTexture;\nuniform sampler2D alphatexture;\nuniform mat3 alphaUVT;\nuniform float alphacolor;\nuniform int decalalpha;\n\nuniform float bumpuserscale;\nuniform ivec2 bumpTexData;\nuniform sampler2D bumptexture;\nuniform mat3 bumpUVT;\n\nuniform int uhasAdditionalTexture;\nuniform sampler2D additionaltexture;\nuniform mat3 additionalUVT;\nuniform vec3 additionalcolor;\n\nuniform ivec2 amboccTexData;\nuniform sampler2D ambocctexture;\nuniform mat3 amboccUVT;\n#if hasAmbOccTextureParam\nuniform vec3 amboccParamValue;\n#endif\n\n#if amboccusevertcol\nvarying float vcolor;\n#endif\n\nuniform float invertreflectiony;\nuniform float mipmapbias;\n\nuniform float gamma;\nuniform int refractionmode;\nuniform float highlightcompression;\nuniform int uhasLUTTexture;\n\nuniform float vignetting;\nuniform vec2 viewportsize;\nuniform int aarefinecount;\nuniform float scenesize;\nuniform float fovfactor;\n\nuniform vec3 exposure;\n\nvarying vec2 tex1;\nvarying vec2 tex2;\nvarying vec3 g_norm;\nvarying vec3 eyeDir;\nvarying vec3 vert;\nvarying vec3 bu;\nvarying vec3 bv;\n\nuniform float cc_brightness;\nuniform float cc_contrast;\nuniform float cc_saturation;\nuniform vec3 cc_tint;\n\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\nuniform int hasIORDG;\nuniform int hasIORIntensity;\nuniform int hasIORClear;\n\nuniform int ShadingModel;\n\nuniform float ClearCoatRoughness;\n#if hasClearCoatRoughnessTexture\nuniform sampler2D clearcoatroughnessTex;\nuniform mat3 clearcoatroughnessUVT;\n#endif\n\nSIRT_STANDARD_HEADER_INSERT\n\n\n\nSIRT_PBR2_HEADER_INSERT\n\n\n\nvec4 ReadEnvMap_Roughness(FGBufferData GBuffer, float totRoughness, vec3 neyeDir, vec3 ngnorm)\n{\nfloat fAcosAngle = clamp(-dot(neyeDir, ngnorm), 0.0, 1.0);\nvec3 reflectDir = reflect(neyeDir, ngnorm);\nreflectDir.y *= invertreflectiony;\nreflectDir = normalize(reflectDir);\nfloat factor1 = totRoughness;\nfactor1 *= fAcosAngle;\nvec4 colA1, colB1;\nfloat mixAB1;\nif (factor1 <= mapblurlevel.r)\n{\ncolA1 = ReadEnvMap(specularenv, reflectDir);\ncolB1 = ReadEnvMap(channelcache1cubetexture, reflectDir);\nmixAB1 = clamp((factor1 - 0.000000) / mapblurlevel.r, 0.0, 1.0);\n}\nelse if (factor1 <= mapblurlevel.g)\n{\ncolA1 = ReadEnvMap(channelcache1cubetexture, reflectDir);\ncolB1 = ReadEnvMap(channelcache2cubetexture, reflectDir);\nmixAB1 = clamp((factor1 - mapblurlevel.r) / (mapblurlevel.g - mapblurlevel.r), 0.0, 1.0);\n}\nelse\n{\ncolA1 = ReadEnvMap(channelcache2cubetexture, reflectDir);\ncolB1 = ReadEnvMap(channelcache3cubetexture, reflectDir);\nmixAB1 = clamp((factor1 - mapblurlevel.g) / (mapblurlevel.b - mapblurlevel.g), 0.0, 1.0);\n}\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\ncolB1.rgb = pow(colB1.rgb, vec3(gamma));\n#endif\nvec4 envSample = mix(colA1, colB1, mixAB1);\nreturn envSample;\n}\n\nvec3 PPAmbient_MainPS(FGBufferData GBuffer, vec3 V, vec3 N)\n{\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvec3 R0 = 2.0 * dot(V, N) * N - V;\n\n\nfloat NoV = saturate(dot(N, V));\n\n\nfloat a = Square(GBuffer.Roughness);\nvec3 R = lerp(N, R0, (1.0 - a) * (sqrt(1.0 - a) + a));\n\n\n\nvec3 NonSpecularContribution = vec3(0.0);\nvec3 SpecularContribution = vec3(0.0);\n\n\n\n\n\n\n\n\n\n\n\n{\n\n\n}\n\n\n{\n\nif (GBuffer.ShadingModelID == SHADINGMODELID_CLEAR_COAT)\n{\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfloat totRoughness = roughness;\nif (uhasRoughnessTexture != 0)\ntotRoughness = pow(texture2D(roughnesstexture, (roughnessUVT*vec3(tex1, 1.0)).xy, mipmapbias).r, 3.0);\nvec3 SampleColor = ReadEnvMap_Roughness(GBuffer, totRoughness, -V, N).rgb;\n\nSpecularContribution += SampleColor * EnvBRDFApprox(GBuffer.SpecularColor, GBuffer.Roughness, NoV, (1.0 - GBuffer.ClearCoat));\n}\nelse\n{\nfloat totRoughness = roughness;\nif (uhasRoughnessTexture != 0)\ntotRoughness = pow(texture2D(roughnesstexture, (roughnessUVT*vec3(tex1, 1.0)).xy, mipmapbias).r, 3.0);\nvec3 SampleColor = ReadEnvMap_Roughness(GBuffer, totRoughness, -V, N).rgb;\n\nSpecularContribution += SampleColor * EnvBRDFApprox(GBuffer.SpecularColor, GBuffer.Roughness, NoV, 1.0);\n\n}\n}\n\nif (GBuffer.ShadingModelID == SHADINGMODELID_CLEAR_COAT)\n{\nfloat ClearCoat = GBuffer.ClearCoat;\nfloat ClearCoatRoughness = GBuffer.ClearCoatRoughness;\n\n\n\nvec3 SampleColor = ReadEnvMap_Roughness(GBuffer, pow(ClearCoatRoughness, 3.0), -V, N).rgb;\n\n\nSampleColor *= clamp(0.5 - (ClearCoatRoughness / 0.6), 0.0, 0.5);\n\n\nfloat F0 = 0.04;\nfloat Fc = pow(1.0 - NoV, 5.0);\nfloat F = Fc + (1.0 - Fc) * F0;\nF *= ClearCoat;\n\nfloat LayerAttenuation = (1.0 - F);\n\nNonSpecularContribution *= LayerAttenuation;\nSpecularContribution *= LayerAttenuation;\nSpecularContribution += SampleColor * F;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nreturn (NonSpecularContribution + SpecularContribution) /** AmbientCubemapColor.rgb*/;\n}\n\nvoid main(void)\n{\nvec3 reflectDir;\nvec3 neyeDir = normalize(eyeDir);\nvec3 ngnorm = normalize(g_norm);\n\nif (bumpTexData.x != 0) {\nvec3 bumpValue = ReadRTTexture(bumptexture, bumpTexData, bumpUVT, ngnorm, neyeDir).xyz;\nbumpValue = (bumpValue-0.498039)*2.0;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\nngnorm = normalize(ngnorm);\n}\n\nreflectDir = reflect(neyeDir, ngnorm);\nreflectDir = normalize(reflectDir);\nreflectDir.y *= invertreflectiony;\n\nvec4 amboccScale = vec4(1.0);\n#if amboccusevertcol\namboccScale = (diffuseSum + glossySum + specularSum) * (1.0-vcolor);\n#else\nif (amboccTexData.x != 0) {\n#if hasAmbOccTextureParam\nvec4 amboccScale = ReadRTTexture(ambocctexture, amboccTexData, amboccUVT, ngnorm, neyeDir);\nvec3 amboccParamValueInv = 1.0-amboccParamValue;\namboccScale = vec4(vec3(amboccParamValueInv.x*amboccParamValueInv.y*amboccScale.r+\namboccParamValue.x*amboccParamValueInv.y*amboccScale.g+\namboccParamValueInv.x*amboccParamValue.y*amboccScale.b+\namboccParamValue.x*amboccParamValue.y*amboccScale.a), 1.0);\n#else\namboccScale = ReadRTTexture(ambocctexture, amboccTexData, amboccUVT, ngnorm, neyeDir);\n#endif\n}\n#endif\n\nvec4 diffuseScale = vec4(diffusecolor, 1.0);\nif (uhasDiffuseTexture != 0)\ndiffuseScale *= texture2D(diffusetexture, (diffuseUVT*vec3(tex1,1.0)).xy, mipmapbias);\n\nvec4 intensityScale = vec4(intensitycolor, 1.0);\nif (uhasIntensityTexture != 0)\nintensityScale *= texture2D(intensitytexture, (intensityUVT*vec3(tex1,1.0)).xy, mipmapbias);\n\nfloat totRoughness = roughness;\nif (uhasRoughnessTexture != 0)\ntotRoughness = pow(texture2D(roughnesstexture, (roughnessUVT*vec3(tex1,1.0)).xy, mipmapbias).r, 3.0);\n\nfloat totMetallic = metallic;\nif (uhasMetallicTexture != 0)\ntotMetallic = texture2D(metallictexture, (metallicUVT*vec3(tex1,1.0)).xy, mipmapbias).r;\n\nvec4 specularScale = vec4(specularcolor, 1.0);\nif (uhasSpecularTexture != 0)\nspecularScale *= texture2D(speculartexture, (specularUVT*vec3(tex1,1.0)).xy, mipmapbias);\n\nvec4 additionalSum = vec4(additionalcolor, 1.0);\nif (uhasAdditionalTexture != 0)\nadditionalSum *= texture2D(additionaltexture, (additionalUVT*vec3(tex1,1.0)).xy, mipmapbias);\n\nfloat totClearCoatRoughness = ClearCoatRoughness;\n#if hasClearCoatRoughnessTexture\ntotClearCoatRoughness = texture2D(clearcoatroughnessTex, (clearcoatroughnessUVT*vec3(tex1, 1.0)).xy, mipmapbias).r;\n#endif\n\nFGBufferData GBuffer;\nGBuffer.DiffuseColor = diffuseScale.rgb - diffuseScale.rgb * totMetallic;\nGBuffer.SpecularColor = ComputeF0(intensityScale.rgb, diffuseScale.rgb, totMetallic);\nGBuffer.Roughness = pow(totRoughness, 1.0/3.0);\nGBuffer.ShadingModelID = ShadingModel;\nGBuffer.ClearCoat = specularScale.r;\nGBuffer.ClearCoatRoughness = totClearCoatRoughness;\nfloat dither = 0.0;\n\nif (GBuffer.ShadingModelID == SHADINGMODELID_CLEAR_COAT)\n{\nGBuffer.ClearCoat = saturate(GBuffer.ClearCoat);\nGBuffer.ClearCoatRoughness = saturate(GBuffer.ClearCoatRoughness);\nfloat MetalSpec = 0.9;\n\nfloat NoV = saturate(dot(ngnorm, -neyeDir));\n\n\nfloat RefractionScale = ((NoV * 0.5 + 0.5) * NoV - 1.0) * saturate(1.25 - 1.25 * GBuffer.Roughness) + 1.0;\n\n\nvec3 AbsorptionColor = GBuffer.DiffuseColor * (1.0 / MetalSpec);\nvec3 Absorption = AbsorptionColor * ((NoV - 1.0) * 0.85 * (1.0 - lerp(AbsorptionColor, vec3(Square(AbsorptionColor)), vec3(-0.78))) + 1.0);\n\nfloat F0 = 0.04;\nfloat Fc = Pow5(1.0 - NoV);\nfloat F = Fc + (1.0 - Fc) * F0;\nfloat LayerAttenuation = lerp(1.0, (1.0 - F), GBuffer.ClearCoat);\n\nGBuffer.DiffuseColor = lerp(GBuffer.DiffuseColor * LayerAttenuation, MetalSpec * Absorption * RefractionScale, totMetallic * GBuffer.ClearCoat);\nGBuffer.DiffuseColor += dither / 255.0;\nGBuffer.SpecularColor *= lerp(1.0, RefractionScale, GBuffer.ClearCoat);\n}\n\ngl_FragColor.rgb = vec3(0.0);\n\ngl_FragColor.rgb += PPAmbient_MainPS(GBuffer, -neyeDir, ngnorm);\n\ngl_FragColor.rgb *= amboccScale.rgb;\n\ngl_FragColor.rgb += additionalSum.rgb;\n\ngl_FragColor.a = 1.0;\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\ngl_FragColor.rgb = funchighlight(gl_FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\ngl_FragColor.rgb = vec3(funcdscs315_1_red(gl_FragColor.r), funcdscs315_1_green(gl_FragColor.g), funcdscs315_1_blue(gl_FragColor.b));\n#elif (camresponse == 306)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\n\ngl_FragColor.rgb = vec3(funcdscs315_2_green(gl_FragColor.r), funcdscs315_2_green(gl_FragColor.g), funcdscs315_2_green(gl_FragColor.b));\n#endif\n\nif (gamma != 1.0)\ngl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1.0/gamma));\n\n#if BUILDVERSION < 423\nif (uhasLUTTexture != 0)\ngl_FragColor.rgb = ApplyLUT(gl_FragColor.rgb);\n#endif\n\nif (refractionmode == 1) {\ngl_FragColor.rgb *= exposure.rgb;\n#if hasBrightReflections\nif (decalalpha != 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\nreturn;\n}\n\ngl_FragColor.rgb = exposure.rgb*ApplyColorCorrection(gl_FragColor.rgb);\n\nif (vignetting > 0.0)\ngl_FragColor.rgb = gl_FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n#if BUILDVERSION >= 423\nif (uhasLUTTexture != 0)\ngl_FragColor.rgb = ApplyLUT(gl_FragColor.rgb);\n#endif\n\n#if hasBrightReflections\nif (decalalpha != 0)\ngl_FragColor.rgb *= gl_FragColor.a;\n#endif\n}\nif (isSecondaryMat != 0){\ngl_FragColor.a = gl_FragColor.a * secondaryMatAlpha;\ngl_FragColor.r = gl_FragColor.r * secondaryMatAlpha;\ngl_FragColor.g = gl_FragColor.g * secondaryMatAlpha;\ngl_FragColor.b = gl_FragColor.b * secondaryMatAlpha;\n}\n}\n";var shaderInfinityRT_PBR2_Headerfs = "const float PI = 3.1415926535897932;\n\n#define SHADINGMODELID_DEFAULT_LIT		0\n#define SHADINGMODELID_CLEAR_COAT		1\n\nfloat D_GGX(float a2, float NoH)\n{\nfloat d = (NoH * a2 - NoH) * NoH + 1.0;\nreturn a2 / (PI*d*d);\n}\n\nfloat Vis_SmithJointApprox(float a2, float NoV, float NoL)\n{\nfloat a = sqrt(a2);\nfloat Vis_SmithV = NoL * (NoV * (1.0 - a) + a);\nfloat Vis_SmithL = NoV * (NoL * (1.0 - a) + a);\nreturn 0.5 * rcp(Vis_SmithV + Vis_SmithL);\n}\n\nvec3 F_Schlick(vec3 SpecularColor, float VoH)\n{\nfloat Fc = Pow5(1.0 - VoH);\n\n\nreturn saturate(50.0 * SpecularColor.g) * Fc + (1.0 - Fc) * SpecularColor;\n}\n\nvec3 Diffuse_Lambert(vec3 DiffuseColor)\n{\nreturn DiffuseColor * (1.0 / PI);\n}\n\nfloat Vis_Kelemen(float VoH)\n{\n\nreturn rcp(4.0 * VoH * VoH + 1e-5);\n}\n\nvec3 EnvBRDFApprox(vec3 SpecularColor, float Roughness, float NoV, float fOffsetScale)\n{\n\n\nvec4 c0 = vec4( -1, -0.0275, -0.572, 0.022 );\nvec4 c1 = vec4( 1, 0.0425, 1.04, -0.04 );\nvec4 r = Roughness * c0 + c1;\nfloat a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\nvec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n\n\n\nAB.y *= saturate(50.0 * SpecularColor.g);\n\nreturn SpecularColor * AB.x + AB.y * fOffsetScale;\n}\n\nfloat DielectricSpecularToF0(float Specular)\n{\nreturn 0.08 * Specular;\n}\n\nvec3 ComputeF0(vec3 Specular, vec3 BaseColor, float Metallic)\n{\nreturn mix(vec3(DielectricSpecularToF0(Specular.r)), BaseColor, vec3(Metallic));\n}\n\nvec4 ReadEnvMap(samplerCube cubetex, vec3 dir)\n{\nvec4 envSample = textureCube(cubetex, dir);\n#ifdef _MULTIPLICATIVE_RGBE_\nenvSample = vec4(envSample.rgb*((16.0 / 255.0) / envSample.a), 1.0);\n#else\nenvSample = vec4(envSample.rgb + (1.0 - envSample.a)*64.0, 1.0);\n#endif\nreturn envSample;\n}\n\nstruct BxDFContext\n{\nfloat NoV;\nfloat NoL;\nfloat VoL;\nfloat NoH;\nfloat VoH;\n};\n\nstruct FRect\n{\nvec3		Origin;\nmat3		Axis;\nvec2		Extent;\nvec2		FullExtent;\nvec2		Offset;\n};\n\nstruct FAreaLight\n{\nfloat		SphereSinAlpha;\nfloat		SphereSinAlphaSoft;\nfloat		LineCosSubtended;\n\nvec3		FalloffColor;\n\nFRect		Rect;\n\nbool		bIsRect;\n};\n\nstruct FShadowTerms\n{\nfloat	SurfaceShadow;\nfloat	TransmissionShadow;\nfloat	TransmissionThickness;\n};\n\nstruct FDirectLighting\n{\nvec3	Diffuse;\nvec3	Specular;\nvec3	Transmission;\n};\n\n\nstruct FGBufferData\n{\nvec3 DiffuseColor;\nvec3 SpecularColor;\nfloat Roughness;\nint ShadingModelID;\nfloat ClearCoat;\nfloat ClearCoatRoughness;\n};\n\nvoid Init(inout BxDFContext Context, vec3 N, vec3 V, vec3 L)\n{\nContext.NoL = dot(N, L);\nContext.NoV = dot(N, V);\nContext.VoL = dot(V, L);\nfloat InvLenH = rsqrt(2.0 + 2.0 * Context.VoL);\nContext.NoH = saturate((Context.NoL + Context.NoV) * InvLenH);\nContext.VoH = saturate(InvLenH + InvLenH * Context.VoL);\n\n\n}\n\n\nvoid SphereMaxNoH(inout BxDFContext Context, float SinAlpha, bool bNewtonIteration)\n{\nif (SinAlpha > 0.0)\n{\nfloat CosAlpha = sqrt(1.0 - Pow2(SinAlpha));\n\nfloat RoL = 2.0 * Context.NoL * Context.NoV - Context.VoL;\nif (RoL >= CosAlpha)\n{\nContext.NoH = 1.0;\nContext.VoH = abs(Context.NoV);\n}\nelse\n{\nfloat rInvLengthT = SinAlpha * rsqrt(1.0 - RoL*RoL);\nfloat NoTr = rInvLengthT * (Context.NoV - RoL * Context.NoL);\nfloat VoTr = rInvLengthT * (2.0 * Context.NoV*Context.NoV - 1.0 - RoL * Context.VoL);\n\nif (bNewtonIteration)\n{\n\nfloat NxLoV = sqrt(saturate(1.0 - Pow2(Context.NoL) - Pow2(Context.NoV) - Pow2(Context.VoL) + 2.0 * Context.NoL * Context.NoV * Context.VoL));\n\nfloat NoBr = rInvLengthT * NxLoV;\nfloat VoBr = rInvLengthT * NxLoV * 2.0 * Context.NoV;\nfloat NoLVTr = Context.NoL * CosAlpha + Context.NoV + NoTr;\nfloat VoLVTr = Context.VoL * CosAlpha + 1.0 + VoTr;\n\nfloat p = NoBr   * VoLVTr;\nfloat q = NoLVTr * VoLVTr;\nfloat s = VoBr   * NoLVTr;\n\nfloat xNum = q * (-0.5 * p + 0.25 * VoBr * NoLVTr);\nfloat xDenom = p*p + s * (s - 2.0 * p) + NoLVTr * ((Context.NoL * CosAlpha + Context.NoV) * Pow2(VoLVTr) + q * (-0.5 * (VoLVTr + Context.VoL * CosAlpha) - 0.5));\nfloat TwoX1 = 2.0 * xNum / (Pow2(xDenom) + Pow2(xNum));\nfloat SinTheta = TwoX1 * xDenom;\nfloat CosTheta = 1.0 - TwoX1 * xNum;\nNoTr = CosTheta * NoTr + SinTheta * NoBr;\nVoTr = CosTheta * VoTr + SinTheta * VoBr;\n}\n\nContext.NoL = Context.NoL * CosAlpha + NoTr;\nContext.VoL = Context.VoL * CosAlpha + VoTr;\nfloat InvLenH = rsqrt(2.0 + 2.0 * Context.VoL);\nContext.NoH = saturate((Context.NoL + Context.NoV) * InvLenH);\nContext.VoH = saturate(InvLenH + InvLenH * Context.VoL);\n}\n}\n}\n\nfloat New_a2(float a2, float SinAlpha, float VoH)\n{\nreturn a2 + 0.25 * SinAlpha * (3.0 * sqrt(a2) + SinAlpha) / (VoH + 0.001);\n\n\n}\n\nfloat EnergyNormalization(inout float a2, float VoH, FAreaLight AreaLight)\n{\nif (AreaLight.SphereSinAlphaSoft > 0.0)\n{\n\na2 = saturate(a2 + Pow2(AreaLight.SphereSinAlphaSoft) / (VoH * 3.6 + 0.4));\n}\n\nfloat Sphere_a2 = a2;\nfloat Energy = 1.0;\nif (AreaLight.SphereSinAlpha > 0.0)\n{\nSphere_a2 = New_a2(a2, AreaLight.SphereSinAlpha, VoH);\nEnergy = a2 / Sphere_a2;\n}\n\nif (AreaLight.LineCosSubtended < 1.0)\n{\n#if 1\nfloat LineCosTwoAlpha = AreaLight.LineCosSubtended;\nfloat LineTanAlpha = sqrt((1.0001 - LineCosTwoAlpha) / (1.0 + LineCosTwoAlpha));\nfloat Line_a2 = New_a2(Sphere_a2, LineTanAlpha, VoH);\nEnergy *= sqrt(Sphere_a2 / Line_a2);\n#else\nfloat LineCosTwoAlpha = AreaLight.LineCosSubtended;\nfloat LineSinAlpha = sqrt(0.5 - 0.5 * LineCosTwoAlpha);\nfloat Line_a2 = New_a2(Sphere_a2, LineSinAlpha, VoH);\nEnergy *= Sphere_a2 / Line_a2;\n#endif\n}\n\nreturn Energy;\n}\n\nvec3 SpecularGGX(float Roughness, vec3 SpecularColor, BxDFContext Context, float NoL, FAreaLight AreaLight)\n{\nfloat a2 = Pow4(Roughness);\nfloat Energy = EnergyNormalization(a2, Context.VoH, AreaLight);\n\n\nfloat D = D_GGX(a2, Context.NoH) * Energy;\nfloat Vis = Vis_SmithJointApprox(a2, Context.NoV, NoL);\nvec3 F = F_Schlick(SpecularColor, Context.VoH);\n\nreturn (D * Vis) * F;\n}\n\nFDirectLighting DefaultLitBxDF(FGBufferData GBuffer, vec3 N, vec3 V, vec3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow)\n{\nBxDFContext Context;\nInit(Context, N, V, L);\nSphereMaxNoH(Context, AreaLight.SphereSinAlpha, true);\nContext.NoV = saturate(abs(Context.NoV) + 1e-5);\n\nFDirectLighting Lighting;\nLighting.Diffuse = AreaLight.FalloffColor * (Falloff * NoL) * Diffuse_Lambert(GBuffer.DiffuseColor);\n\n\n\n\nLighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX(GBuffer.Roughness, GBuffer.SpecularColor, Context, NoL, AreaLight);\n\nLighting.Transmission = vec3(0.0);\nreturn Lighting;\n}\n\nFDirectLighting ClearCoatBxDF(FGBufferData GBuffer, vec3 N, vec3 V, vec3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow)\n{\nfloat ClearCoat = GBuffer.ClearCoat;\nfloat ClearCoatRoughness = max(GBuffer.ClearCoatRoughness, 0.02);\nfloat Film = 1.0 * ClearCoat;\nfloat MetalSpec = 0.9;\n\nBxDFContext Context;\n\nvec3 Nspec = N;\nfloat NoLSpec = NoL;\n\n\n\n\n\n\nInit(Context, Nspec, V, L);\nSphereMaxNoH(Context, AreaLight.SphereSinAlpha, true);\nContext.NoV = saturate(abs(Context.NoV) + 1e-5);\nContext.VoH = /*AreaLight.bIsRect ? Context.NoV :*/ Context.VoH;\n\n\n\n\n\n\n\nfloat F0 = 0.04;\nfloat Fc = Pow5(1.0 - Context.VoH);\nfloat F = Fc + (1.0 - Fc) * F0;\nF *= ClearCoat;\n\nFDirectLighting Lighting;\n\n\n\n\n\n\n{\nfloat a2 = Pow4(ClearCoatRoughness);\nfloat Energy = EnergyNormalization(a2, Context.VoH, AreaLight);\n\n\nfloat D = D_GGX(a2, Context.NoH) * Energy;\nfloat Vis = Vis_SmithJointApprox(a2, Context.NoV, NoLSpec);\n\nLighting.Specular = AreaLight.FalloffColor * (Falloff * NoLSpec) * D * Vis * F;\n}\n\n\n\n\n\n\n\n\nfloat LayerAttenuation = (1.0 - F);\nLighting.Diffuse = AreaLight.FalloffColor * (LayerAttenuation * Falloff * NoL) * Diffuse_Lambert(GBuffer.DiffuseColor);\n\n\n\n\n\n\n{\nLighting.Specular += AreaLight.FalloffColor * (LayerAttenuation * Falloff * NoL) * SpecularGGX(GBuffer.Roughness, GBuffer.SpecularColor, Context, NoL, AreaLight);\n}\n\nLighting.Transmission = vec3(0.0);\nreturn Lighting;\n}\n\nFDirectLighting IntegrateBxDF(FGBufferData GBuffer, vec3 N, vec3 V, vec3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow)\n{\nif (GBuffer.ShadingModelID == SHADINGMODELID_CLEAR_COAT)\nreturn ClearCoatBxDF(GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow);\nreturn DefaultLitBxDF(GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\nFDirectLighting EvaluateBxDF(FGBufferData GBuffer, vec3 N, vec3 V, vec3 L, float NoL, FShadowTerms Shadow)\n{\nFAreaLight AreaLight;\nAreaLight.SphereSinAlpha = 0.0;\nAreaLight.SphereSinAlphaSoft = 0.0;\nAreaLight.LineCosSubtended = 1.0;\nAreaLight.FalloffColor = vec3(1.0);\n\nAreaLight.bIsRect = false;\n\n\nreturn IntegrateBxDF(GBuffer, N, V, L, 1.0, NoL, AreaLight, Shadow);\n}\n\n\n\nfloat RadialAttenuation(vec3 WorldLightVector, float FalloffExponent)\n{\nfloat NormalizeDistanceSquared = dot(WorldLightVector, WorldLightVector);\n\nreturn pow(1.0 - saturate(NormalizeDistanceSquared), FalloffExponent);\n}\n\n#if num_scene_lights > 0\nvec3 BasePPS_GetSimpleForwardLightingDirectionalLight(int iLightIdx, FGBufferData GBuffer, vec3 WorldNormal, vec3 CameraVector)\n{\nvec3 V = CameraVector;\nvec3 N = WorldNormal;\nvec3 L;\nif (iLightIdx == 3)\n{\nif (light_type[3] == 0)\nL = light_direction[3];\nelse\nL = normalize(light_position[3] - vert);\n}\nelse if (iLightIdx == 2)\n{\nif (light_type[2] == 0)\nL = light_direction[2];\nelse\nL = normalize(light_position[2] - vert);\n}\nelse if (iLightIdx == 1)\n{\nif (light_type[1] == 0)\nL = light_direction[1];\nelse\nL = normalize(light_position[1] - vert);\n}\nelse\n{\nif (light_type[0] == 0)\nL = light_direction[0];\nelse\nL = normalize(light_position[0] - vert);\n}\nfloat NoL = saturate(dot(N, L));\n\nif (dot(N, L) < 0.0)\nreturn vec3(0.0);\n\nvec3 LightColor;\nif (iLightIdx == 3)\n{\nLightColor = light_intensity[3].rgb * PI;\nif (light_type[3] == 1)\nLightColor *= RadialAttenuation((light_position[3] - vert) / light_intensity[3].a, 2.0);\n}\nelse if (iLightIdx == 2)\n{\nLightColor = light_intensity[2].rgb * PI;\nif (light_type[2] == 1)\nLightColor *= RadialAttenuation((light_position[2] - vert) / light_intensity[2].a, 2.0);\n}\nelse if (iLightIdx == 1)\n{\nLightColor = light_intensity[1].rgb * PI;\nif (light_type[1] == 1)\nLightColor *= RadialAttenuation((light_position[1] - vert) / light_intensity[1].a, 2.0);\n}\nelse\n{\nLightColor = light_intensity[0].rgb * PI;\nif (light_type[0] == 1)\nLightColor *= RadialAttenuation((light_position[0] - vert) / light_intensity[0].a, 2.0);\n}\n\nFShadowTerms Shadow;\nShadow.SurfaceShadow = 1.0;\nShadow.TransmissionShadow = 1.0;\nShadow.TransmissionThickness = 1.0;\n\nFDirectLighting Lighting = EvaluateBxDF(GBuffer, N, V, L, NoL, Shadow);\n\n\n\nreturn LightColor * (Lighting.Diffuse + Lighting.Transmission + Lighting.Specular);\n}\n#endif\n";var shaderInfinityRT_Modularfs = "\n#if extOESSD\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nvarying vec2 tex1;\nvarying vec2 tex2;\nvarying vec3 g_norm;\nvarying vec3 eyeDir;\nvarying vec3 bu;\nvarying vec3 bv;\nvarying vec3 vert;\n#if amboccusevertcol\nvarying float vcolor;\n#endif\n\nstruct stState\n{\nvec3 lpos;\nvec3 norm;\nvec3 eyedir;\nvec2 uv;\nvec4 vcolor;\nfloat dotnd;\n} state;\n\nuniform vec2 viewportsize;\nuniform int aarefinecount;\nuniform float scenesize;\nuniform float fovfactor;\n\nuniform samplerCube diffusecachecubetexture;\nuniform samplerCube specularcachecubetexture;\nuniform float numblurmaps;\nuniform sampler2D texOctahedron;\nuniform float blurres;\n\n\nuniform float highlightcompression;\nuniform float vignetting;\nuniform float gamma;\nuniform vec3 exposure;\nuniform int uhasLUTTexture;\n\n\n\nuniform float cc_brightness;\nuniform float cc_contrast;\nuniform float cc_saturation;\nuniform vec3 cc_tint;\n\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\nMODULAR_FRAGMENT_HEADER_INSERT\n\nvec3 makeReflectDir(vec3 ngnorm, vec3 neyeDir, float fReflectFactor)\n{\nreturn normalize(fReflectFactor*reflect(neyeDir, ngnorm)+(1.0-fReflectFactor)*ngnorm);\n}\n\nSIRT_STANDARD_HEADER_INSERT\n\nvec4 Surface_Shader(vec4 col, vec4 shadow)\n{\nreturn col*shadow;\n}\n\nvec4 Surface_Shadow(float intensity)\n{\nreturn vec4(vec3(clamp((1.0 - state.vcolor.a)*intensity, 0.0, 1.0)), 1.0);\n}\n\nvec3 ReadRGBETexture(sampler2D textureA, vec2 uvA)\n{\nvec4 texSample = texture2D(textureA, uvA);\nreturn texSample.rgb+(1.0-texSample.a)*64.0;\n}\n\n#ifdef MOD_Octane_Texture2D\nvec4 Octane_Texture2D(sampler2D textureA, vec2 uvA, float powerA, float gammaA)\n{\nvec4 colTex = texture2D(textureA, uvA);\ncolTex.rgb = pow(colTex.rgb, vec3(gammaA));\ncolTex.rgb *= vec3(powerA);\nreturn colTex;\n}\n#endif\n\n#ifdef MOD_Octane_GreyscaleTexture2D\nvec4 Octane_GreyscaleTexture2D(sampler2D textureA, vec2 uvA, float powerA, float gammaA)\n{\nvec4 colTex = texture2D(textureA, uvA);\ncolTex.rgb = pow(colTex.rgb, vec3(gammaA));\ncolTex.rgb = vec3((colTex.r+colTex.g+colTex.b)/3.0);\ncolTex.rgb *= vec3(powerA);\nreturn colTex;\n}\n#endif\n\nvec3 rgb2hsv(vec3 c)\n{\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\nvec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn clamp(c.z, 0.0, 1.0) * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), clamp(c.y, 0.0, 1.0));\n}\n\n\nfloat cc_contrast_greyscale(float v00,float v01)\n{\nfloat v02=v00+v01;\nfloat v03=0.000793;\nfloat v04=0.187323;\nfloat v05=v00*v00;\nfloat v06=-1.249123;\nfloat v07=v06+v05;\nfloat v08=v03-v07;\nfloat v09=spow(v04,v04);\nfloat v10=v02*v09;\nfloat v11=v10-v00;\nfloat v12=spow(v08,v11);\nfloat v13=0.426466;\nfloat v14=v05*v05;\nfloat v15=spow(v00,v12);\nfloat v16=spow(v12,v14);\nfloat v17=v08*v14;\nfloat v18=max(v03,v15);\nfloat v19=v16+v18;\nfloat v20=av(v13,v19);\nfloat v21=v20*v15;\nfloat v22=v17+v21;\nfloat v23=v03+v00;\nfloat v24=spow(v22,v19);\nfloat v25=min(v23,v24);\nfloat v26=max(v18,v25);\nreturn v26;\n}\n\nvec2 Octane_GetIOR(float val)\n{\nfloat ni = 1.0;\nfloat R0 = (val - ni) / (val + ni);\nR0 *= R0;\nreturn vec2(R0,	0.299975*val+9.26843);\n}\n\nvec3 octane_filmior(float v00, float v01, float v02)\n{\nfloat v03 = pow(v01, v01);\nfloat v04 = v02 + v00;\nfloat v05 = v03 + v00;\nfloat v06 = pow(v03, v05);\nfloat v07 = pow(v06, v04);\nfloat v08 = v07*v07;\nfloat v09 = v05 + v05;\nfloat v10 = dpang(v08);\nfloat v11 = v08 - v10;\nfloat v12 = pow(v09, v11);\nfloat v14 = v10 / v12;\nfloat v15 = v08 + v06;\nfloat v16 = v12*v08;\nfloat v17 = v02*v16;\nfloat v18 = pow(v14, v15);\nfloat v20 = v00*v17;\nfloat v23 = pow(v17, v20);\nfloat v24 = pow(v07, v18);\nfloat v25 = pow(v24, v23);\nfloat v27 = v24*v25;\nreturn vec3(v25, v24, v27);\n}\n\nfloat octane_funcblurscale(float v00)\n{\nif (v00 == 0.0)\nreturn 0.0;\nfloat v01 = 0.513749;\nfloat v02 = spow(v00, v01);\nfloat v05 = spow(v00, v02);\nfloat v07 = 0.256905;\nfloat v08 = v02*v02*v02;\nfloat v10 = v07*v02;\nfloat v11 = v08 - v05;\nfloat v12 = v11*v11;\nfloat v15 = v07*v07*v07;\nfloat v17 = spow(v10, v12);\nfloat v18 = v17 + v15;\nreturn v18;\n}\n\n#ifdef MOD_Octane_Color_Correction\nvec4 Octane_Color_Correction(vec4 inputcolorA, float hueA, float saturationA, vec4 brightnessA, float gammaA, float contrastA)\n{\nvec3 colCC = inputcolorA.rgb;\n\n\nvec3 grey=normalize(vec3(1.0,1.0,1.0));\nvec3 col1=normalize(cross(vec3(0.0,1.0,0.0),grey));\nvec3 col2=cross(col1,grey);\nfloat gr=dot(colCC,grey);\nfloat c1=dot(colCC,col1);\nfloat c2=dot(colCC,col2);\n\nfloat ang=hueA*3.14139265;\nfloat nc1=cos(ang)*c1+sin(ang)*c2;\nfloat nc2=-sin(ang)*c1+cos(ang)*c2;\n\nnc1*=saturationA-0.0001;\nnc2*=saturationA-0.0001;\ncolCC=gr*grey+nc1*col1+nc2*col2;\ncolCC = clamp(colCC, vec3(0.0), vec3(1.0));\n\ncolCC *= brightnessA.rgb;\n\n\nif (gammaA != 1.0)\ncolCC = pow(colCC.rgb, vec3(gammaA));\n\n\nif (contrastA > 0.0015) {\nvec3 contrasted = vec3(cc_contrast_greyscale(colCC.r,contrastA),\ncc_contrast_greyscale(colCC.g,contrastA),\ncc_contrast_greyscale(colCC.b,contrastA));\ncolCC = contrasted;\n}\n\nreturn vec4(colCC, inputcolorA.a);\n}\n#endif\n\n#ifdef MOD_Octane_BlackBody\nvec4 Octane_BlackBody(vec4 tex1, float v00)\n{\nfloat v01=v00-v00;\nfloat v02=ssqrt(v00);\nfloat v03=spow(v01,v01);\nfloat v04=v03+v03;\nfloat v05=ssqrt(v02);\nfloat v07=ssqrt(v05);\nfloat v08=v04*v04*v04;\nfloat v09=ssqrt(v08);\nfloat v10=v03+v09;\nfloat v11=v08-v05;\nfloat v12=ssqrt(v09);\nfloat v13=v07-v04;\nfloat v14=v01-v13;\nfloat v15=spow(v10,v14);\nfloat v16=spow(v13,v11);\nfloat v17=v04+v16;\nfloat v18=v17*v16;\nfloat v19=spow(v11,v12);\nfloat v20=v13*v13*v13;\nfloat v21=v15+v18;\nfloat v22=spow(v21,v15);\nfloat v23=v13*v22;\nfloat v24=v23*v20;\nfloat v25=v19+v22;\nreturn tex1*vec4(v25, v23, v24, 1.0);\n}\n#endif\n\n#ifdef MOD_Octane_PolygonSide\nvec4 Octane_PolygonSide(vec3 ngnorm, vec3 neyeDir, int nInvert)\n{\nif (nInvert != 0)\nreturn (dot(ngnorm, neyeDir) > 0.0) ? vec4(1.0) : vec4(0.0, 0.0, 0.0, 1.0);\nreturn (dot(ngnorm, neyeDir) < 0.0) ? vec4(1.0) : vec4(0.0, 0.0, 0.0, 1.0);\n}\n#endif\n\n#ifdef MOD_Octane_Falloff_Map\nfloat Octane_Falloff_Map(vec3 ngnormA, vec3 neyeDirA, float minval, float maxval, float skewfactor)\n{\nngnormA = normalize(ngnormA);\n\nfloat dotnd = dot(neyeDirA, ngnormA);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat powangle = pow(acos(-dotnd) / (3.14159625*0.5), skewfactor);\nreturn minval + (maxval-minval) * powangle;\n}\n#endif\n\n#ifdef MOD_Octane_Portal\nvec4 Octane_Portal(vec3 ngnormA, vec3 neyeDirA)\n{\nvec3 reflectDir = makeReflectDir(ngnormA, neyeDirA, 1.0);\nvec4 colA1 = textureCube(specularcachecubetexture, reflectDir);\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\nreturn colA1;\n}\n#endif\n\nvec2 Octahedron_GetUV( vec3 d )\n{\n\nd /= dot(abs(d), vec3(1.0));\n\nif ( d.z < 0.0 )\nd.xy = (1.0-abs(d.yx)) * sign(d.xy);\n\nd.xy = d.xy * 0.5 + 0.5;\nreturn d.xy;\n}\n\nvec4 Octahedron_ReadEnvMap(vec3 d, float fMapIdx)\n{\nvec2 uv = Octahedron_GetUV(d);\n\nfloat fPixelSize = 1.0/blurres;\nif (fMapIdx == 0.0)\n{\n\nfPixelSize *= 2.0;\nuv = uv*(0.5-2.0*fPixelSize)+fPixelSize;\n}\nelse\n{\n\nfPixelSize *= 4.0;\nuv = uv*(0.25-2.0*fPixelSize)+fPixelSize;\n\nfMapIdx += (fMapIdx < 2.5) ? 1.0 : 3.0;\nfMapIdx = clamp(fMapIdx, 2.0, 15.0);\nuv += (vec2(mod(fMapIdx, 4.0), floor(fMapIdx/4.0))*vec2(0.25));\n}\n\nreturn texture2D(texOctahedron, uv);\n}\n\n\nfloat func_SpecIOR(float v00, float v01)\n{\nfloat v02 = v01 / v01;\nfloat v03 = v00 - v02;\nfloat v04 = v00 + v02;\nfloat v05 = v02 - v01;\nfloat v06 = v05*v03;\nfloat v07 = spow(v06, v05);\nfloat v08 = spow(v04, v05);\nfloat v10 = v07 / v08;\nfloat v11 = v10*v10;\nfloat v15 = v07*v11;\nreturn v15;\n}\n\n#ifdef MOD_Octane_Glossy_Material\nvec4 Octane_Glossy_Material(vec3 ngnormA, vec3 neyeDirA, vec4 diffusecolorA, vec4 specularcolorA, vec2 blurrinessA, float iorA, vec4 emissioncolorA, float reffactor, float opacity, float filmwidth, float filmindex)\n{\nngnormA = normalize(ngnormA);\nblurrinessA.x = octane_funcblurscale(blurrinessA.x);\n\n\nvec4 diffuseSum = textureCube(diffusecachecubetexture, ngnormA);\ndiffuseSum = vec4(diffuseSum.rgb+(1.0-diffuseSum.a)*64.0, 1.0);\n#if hdribias\ndiffuseSum.rgb = pow(diffuseSum.rgb, vec3(gamma));\n#endif\ndiffuseSum *= diffusecolorA;\n\n\nfloat fAcosAngle = clamp(-dot(neyeDirA, ngnormA), 0.0, 1.0);\nvec4 colA1, colB1;\nvec3 reflectDir = makeReflectDir(ngnormA, neyeDirA, reffactor);\nfloat blurfactor = (1.0+numblurmaps)*blurrinessA.x*(1.0-pow(acos(abs(fAcosAngle)) / (3.14159625*0.5), blurrinessA.y));\nfloat blurfraction = fract(blurfactor);\nif (blurfactor <= 1.0) {\n\ncolA1 = textureCube(specularcachecubetexture, reflectDir);\ncolB1 = Octahedron_ReadEnvMap(reflectDir, 0.0);\n} else {\ncolA1 = Octahedron_ReadEnvMap(reflectDir, floor(blurfactor)-1.0);\ncolB1 = Octahedron_ReadEnvMap(reflectDir, ceil(blurfactor)-1.0);\n}\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\nvec4 glossySum = (1.0-blurfraction)*colA1+blurfraction*colB1;\n#if hdribias\nglossySum = vec4(pow(glossySum.rgb, vec3(gamma)), 1.0);\n#endif\n\n\nfloat dotnd = dot(neyeDirA, ngnormA);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat glancingangle = acos(-dotnd) / (3.14159625*0.5);\nif (filmwidth > 0.0) {\n\nglossySum.rgb *= octane_filmior(filmindex, filmwidth, -dotnd);\n}\nif (iorA > 1.0) {\nglossySum *= specularcolorA;\nglossySum *= func_SpecIOR(iorA, glancingangle);\n\nreturn vec4(opacity*(diffuseSum + glossySum + emissioncolorA).rgb, opacity);\n}\n\nreturn vec4(opacity*(mix(diffuseSum, glossySum, specularcolorA)+emissioncolorA).rgb, opacity);\n}\n#endif\n\n#ifdef MOD_Octane_Specular_Material\nvec4 Octane_Specular_Material(vec3 ngnormA, vec3 neyeDirA, vec4 reflectioncolorA, vec4 transmissionA, vec2 blurrinessA, float iorA, float reffactor, float opacity, float filmwidth, float filmindex)\n{\nngnormA = normalize(ngnormA);\nblurrinessA.x = octane_funcblurscale(blurrinessA.x);\n\n\nfloat fAcosAngle = clamp(-dot(neyeDirA, ngnormA), 0.0, 1.0);\nvec4 colA1, colB1;\nvec3 reflectDir = makeReflectDir(ngnormA, neyeDirA, reffactor);\nfloat blurfactor = (1.0+numblurmaps)*blurrinessA.x*(1.0-pow(acos(abs(fAcosAngle)) / (3.14159625*0.5), blurrinessA.y));\nfloat blurfraction = fract(blurfactor);\nif (blurfactor <= 1.0) {\n\ncolA1 = textureCube(specularcachecubetexture, reflectDir);\ncolB1 = Octahedron_ReadEnvMap(reflectDir, 0.0);\n} else {\ncolA1 = Octahedron_ReadEnvMap(reflectDir, floor(blurfactor)-1.0);\ncolB1 = Octahedron_ReadEnvMap(reflectDir, ceil(blurfactor)-1.0);\n}\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\nvec4 glossySum = (1.0-blurfraction)*colA1+blurfraction*colB1;\n#if hdribias\nglossySum = vec4(pow(glossySum.rgb, vec3(gamma)), 1.0);\n#endif\nglossySum *= reflectioncolorA;\n\n\nfloat dotnd = dot(neyeDirA, ngnormA);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat glancingangle = acos(-dotnd) / (3.14159625*0.5);\nif (filmwidth > 0.0) {\n\nglossySum.rgb *= octane_filmior(filmindex, filmwidth, -dotnd);\n}\nglossySum *= func_SpecIOR(iorA, glancingangle);\n\nfloat alpha = opacity*(1.0-transmissionA.r);\nreturn vec4(opacity*(glossySum*reflectioncolorA).rgb, alpha);\n}\n#endif\n\n#ifdef MOD_Octane_Diffuse_Material\nvec4 Octane_Diffuse_Material(vec3 ngnormA, vec4 diffusecolorA, vec4 emissioncolorA, float opacity)\n{\nngnormA = normalize(ngnormA);\n\n\nvec4 diffuseSum = textureCube(diffusecachecubetexture, ngnormA);\ndiffuseSum = vec4(diffuseSum.rgb+(1.0-diffuseSum.a)*64.0, 1.0);\n#if hdribias\ndiffuseSum.rgb = pow(diffuseSum.rgb, vec3(gamma));\n#endif\ndiffuseSum *= diffusecolorA;\nreturn vec4(opacity*(diffuseSum+emissioncolorA).rgb, opacity);\n}\n#endif\n\n#ifdef MOD_Octane_Normalmap\nvec4 Octane_Normalmap(vec3 agnorm, vec3 neyeDirA, sampler2D textureA, vec2 uvA, float powerA)\n{\nvec3 ngnorm = agnorm;\nvec3 bumpValue = (texture2D(textureA, uvA).xyz-0.498039)*2.0;\nbumpValue *= powerA;\nngnorm -= bumpValue.x * normalize(bu);\nngnorm += bumpValue.y * normalize(bv);\nngnorm = normalize(ngnorm);\n\nvec3 relectDir = makeReflectDir(ngnorm, neyeDirA, 1.0);\nfloat fDPReflect = dot(relectDir, agnorm);\nif (fDPReflect < 0.0)\n{\nngnorm -= agnorm*fDPReflect;\nngnorm = normalize(ngnorm);\n}\nreturn vec4(ngnorm, 1.0);\n}\n#endif\n\nfloat Octane_RGBToFloat(vec3 col)\n{\nreturn (0.2989*col.r+0.5870*col.g+0.1140*col.b)/3.0;\n}\n\n#if defined(MOD_Octane_NoiseTexture) || defined(MOD_RT_NoiseTexture)\nfloat perlin_hash(vec3 p)\n{\np = fract(p*0.3183099 + 0.1);\np *= 17.0;\nreturn fract(p.x*p.y*p.z*(p.x + p.y + p.z));\n}\n\nfloat perlin_noise(in vec3 x)\n{\nvec3 p = floor(x);\nvec3 f = fract(x);\nf = f*f*(3.0 - 2.0*f);\n\nreturn mix(mix(mix(perlin_hash(p + vec3(0.0, 0.0, 0.0)),\nperlin_hash(p + vec3(1.0, 0.0, 0.0)), f.x),\nmix(perlin_hash(p + vec3(0.0, 1.0, 0.0)),\nperlin_hash(p + vec3(1.0, 1.0, 0.0)), f.x), f.y),\nmix(mix(perlin_hash(p + vec3(0.0, 0.0, 1.0)),\nperlin_hash(p + vec3(1.0, 0.0, 1.0)), f.x),\nmix(perlin_hash(p + vec3(0.0, 1.0, 1.0)),\nperlin_hash(p + vec3(1.0, 1.0, 1.0)), f.x), f.y), f.z);\n}\n#endif\n\n#ifdef MOD_Octane_NoiseTexture\nvec3 chips_hash(vec3 x)\n{\nx = vec3(dot(x, vec3(127.1, 311.7, 74.7)),\ndot(x, vec3(269.5, 183.3, 246.1)),\ndot(x, vec3(113.5, 271.9, 124.6)));\n\nreturn fract(sin(x)*43758.5453123);\n}\n\n\nvec3 chips_voronoi(in vec3 x)\n{\nvec3 p = floor(x);\nvec3 f = fract(x);\n\nfloat id = 0.0;\nvec2 res = vec2(100.0);\nfor (int k = -1; k <= 1; k++)\nfor (int j = -1; j <= 1; j++)\nfor (int i = -1; i <= 1; i++)\n{\nvec3 b = vec3(float(i), float(j), float(k));\nvec3 r = vec3(b) - f + chips_hash(p + b);\nfloat d = dot(r, r);\n\nif (d < res.x)\n{\nid = dot(p + b, vec3(1.0, 57.0, 113.0));\nres = vec2(d, res.x);\n}\nelse if (d < res.y)\n{\nres.y = d;\n}\n}\n\nreturn vec3(sqrt(res), abs(id));\n}\n\n\nvec3 circular_voronoi(in vec3 x)\n{\nvec3 p = floor(x);\nvec3 f = fract(x);\n\nfloat id = 0.0;\nvec2 res = vec2(100.0);\nfor (int k = -1; k <= 1; k++)\nfor (int j = -1; j <= 1; j++)\nfor (int i = -1; i <= 1; i++)\n{\nvec3 b = vec3(float(i), float(j), float(k));\nvec3 r = vec3(b) - f + chips_hash(p + b);\nfloat d = dot(r, r);\n\nif (d < res.x)\n{\nid = dot(p + b, vec3(1.0, 57.0, 113.0));\nres = vec2(d, res.x);\n}\nelse if (d < res.y)\n{\nres.y = d;\n}\n}\n\nreturn vec3(pow(1.0 - min(res*1.2, vec2(1.0)), vec2(0.7)), abs(id));\n}\n\nconst int nMaxNumOctaves = 64;\nvec4 Octane_NoiseTexture(int type, int octaves, float omega, mat3 mat, int projection, int invert, float gamma, float contrast)\n{\nif (type != 0 && type != 2 && type != 3)\nreturn vec4(1.0, 0.0, 0.0, 1.0);\nvec3 q;\nif (projection == 2)\n{\nvec2 uv2 = state.uv;\n\nuv2.x *= (viewportsize.x/viewportsize.y);\nq = 16.0*vec3((mat*vec3(uv2,1.0)).xy, 95.0);\n}\nelse\nq = 16.0*state.lpos;\nfloat f = 0.0;\nfloat mag = 1.0;\nfloat totmag = 0.0;\nfor (int cnt1 = 0; cnt1<nMaxNumOctaves; cnt1++) {\nif (cnt1 >= octaves){break;}\nif (type == 3)\nf += mag*chips_voronoi(q).x;\nelse if (type == 2)\nf += mag*circular_voronoi(q).x;\nelse\nf += mag*perlin_noise(q);\nq = q*2.01;\ntotmag += mag;\nmag *= omega;\n}\nf /= totmag;\nif (type == 3)\nf = 1.0 - f;\nif (invert != 0)\nf = 1.0 - f;\nf = pow(f, gamma);\nf = cc_contrast_greyscale(f, contrast);\nreturn vec4(f);\n}\n#endif\n\n#ifdef MOD_RT_NoiseTexture\nvec4 RT_NoiseTexture(mat3 mat, int projection)\n{\nvec3 q;\nif (projection == 2)\n{\nvec2 uv2 = state.uv;\n\nuv2.x *= (viewportsize.x / viewportsize.y);\nq = 16.0*vec3((mat*vec3(uv2, 1.0)).xy, 95.0);\n}\nelse\nq = 16.0*state.lpos;\nreturn vec4(perlin_noise(q));\n}\n#endif\n\n#ifdef MOD_Octane_Gradient\nvec4 Octane_Gradient(int interpolationA, vec4 inputA, vec4 startA, vec4 endA)\n{\nreturn mix(startA, endA, inputA.x);\n}\n#endif\n\n/*float rand(float n) { return 2.0*fract(sin(n) * 43758.5453123)-1.0; }\n\nvec3 VRED_Flakes(vec3 ngnormA, float size, float intensity)\n{\nngnormA = normalize(ngnormA);\n\nfloat projfac = 1000.0;\nfloat projsize = min(1.0, projfac*(-state.dotnd*size / length(viewPos - gpos)));\n\nintensity *= 0.25*projsize;\n\nvec3 flakepos = vert;\nflakepos *= 1.0/(size*(2.0*sqrt(2.0)));\n\nfloat idp0 = floor(abs(dot(flakepos, vec3(0.0,  0.707106, 0.707106))))+347.0;\nfloat idp1 = floor(abs(dot(flakepos, vec3(0.0, -0.707106, 0.707106))))+125.0;\nfloat idp2 = floor(abs(dot(flakepos, vec3( 0.707106, 0.0, 0.707106))))+2376.0;\nfloat idp3 = floor(abs(dot(flakepos, vec3(-0.707106, 0.0, 0.707106))))+674.0;\nfloat idp4 = floor(abs(dot(flakepos, vec3( 0.707106, 0.707106, 0.0))))+8294.0;\nfloat idp5 = floor(abs(dot(flakepos, vec3(-0.707106, 0.707106, 0.0))))+263.0;\n\nfloat off1 = 413.0;\nfloat off2 = 273.0;\nfloat off3 = 317.0;\nfloat off4 = 113.0;\nfloat val0 = rand(rand(idp0) + rand(idp1) + rand(idp2) + rand(idp3) + rand(idp4) + rand(idp5));\nfloat val1 = rand(val0 + off1);\nfloat val2 = rand(val0 + off2);\nfloat val3 = rand(val0 + off3);\nfloat val4 = rand(val0 + off4);\n\nvec3 r = vec3(val0, val1, val2);\nvec3 ax1 = normalize(r - dot(ngnormA, r)*ngnormA);\nvec3 ax2 = cross(ngnormA, ax1);\n\nfloat u = 0.49*val3 + 0.5;\nfloat v = 0.49*val4 + 0.5;\nfloat z0 = sqrt(-2.0 * log(u))*cos(v * 2.0 * 3.14159265);\nfloat z1 = sqrt(-2.0 * log(u))*sin(v * 2.0 * 3.14159265);\n\nvec3 pert = ngnormA;\npert += ax1*z0*intensity;\npert += ax2*z1*intensity;\nreturn normalize(pert);\n}\n\nfloat func_diffuse_attenuation(float v00, float v01, float v02, float v03, float v04, float v05)\n{\nfloat v06 = min(v03, v05);\nfloat v07 = v05*v00;\nfloat v08 = mx3(v03, v04, v05);\nfloat v09 = av3(v07, v07, v04);\nfloat v10 = len3(v06, v03, v08);\nfloat v12 = spow(v07, v10);\nfloat v13 = spow(v12, v09);\nfloat v15 = mx3(v10, v01, v13);\nfloat v16 = spow(v13, v15);\nfloat v17 = spow(v01, v05);\nfloat v19 = av3(v16, v16, v17);\nreturn v19;\n}\n\nfloat func_flake_attenuation(float v00, float v01, float v02, float v03, float v04, float v05)\n{\nfloat v06 = av(v05, v03);\nfloat v07 = av3(v06, v03, v04);\nfloat v08 = v01*v07;\nfloat v09 = v01*v01;\nfloat v10 = av3(v09, v00, v09);\nfloat v11 = av(v03, v10);\nfloat v14 = v11 + v08;\nfloat v15 = v00 + v09;\nfloat v16 = spow(v08, v15);\nfloat v20 = spow(v07, v14);\nfloat v22 = max(v16, v20);\nreturn v22;\n}\n\nvec4 VRED_Metallic_Carpaint(vec3 ngnormA, vec4 base, vec4 flakes, float blurrinessA, float reffactor, vec4 clearcoat, float reflectivity)\n{\nngnormA = normalize(ngnormA);\n\n\nif (flakes.r != 0.0 && flakes.g != 0.0 && flakes.b != 0.0)\nbase *= func_diffuse_attenuation(base.r, base.g, base.b, flakes.r, flakes.g, flakes.b);\nif (base.r != 0.0 && base.g != 0.0 && base.b != 0.0)\nflakes *= func_flake_attenuation(base.r, base.g, base.b, flakes.r, flakes.g, flakes.b);\n\n\nvec4 diffuseSum = textureCube(diffusecachecubetexture, state.norm);\ndiffuseSum = vec4(diffuseSum.rgb + (1.0 - diffuseSum.a)*64.0, 1.0);\n#if hdribias\ndiffuseSum.rgb = pow(diffuseSum.rgb, vec3(gamma));\n#endif\nbase *= diffuseSum;\n\n\nvec4 colA1, colB1;\nvec3 reflectDir = makeReflectDir(ngnormA, state.eyedir, reffactor);\nfloat blurfactor = (1.0 + numblurmaps)*blurrinessA;\nfloat blurfraction = fract(blurfactor);\nif (blurfactor <= 1.0) {\n\ncolA1 = textureCube(specularcachecubetexture, reflectDir);\ncolB1 = Octahedron_ReadEnvMap(reflectDir, 0.0);\n}\nelse {\ncolA1 = Octahedron_ReadEnvMap(reflectDir, floor(blurfactor) - 1.0);\ncolB1 = Octahedron_ReadEnvMap(reflectDir, ceil(blurfactor) - 1.0);\n}\ncolA1 = vec4(colA1.rgb + (1.0 - colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb + (1.0 - colB1.a)*64.0, 1.0);\nvec4 glossySum = (1.0 - blurfraction)*colA1 + blurfraction*colB1;\n#if hdribias\nglossySum = vec4(pow(glossySum.rgb, vec3(gamma)), 1.0);\n#endif\nflakes *= glossySum;\n\n\nvec3 reflectDirClear = makeReflectDir(state.norm, state.eyedir, reffactor);\nvec4 specular = textureCube(specularcachecubetexture, reflectDirClear);\nspecular = vec4(specular.rgb + (1.0 - specular.a)*64.0, 1.0);\nclearcoat *= specular;\n\n\nfloat powangle = 1.0-pow(acos(-state.dotnd) / (3.14159625*0.5), 15.0);\nreturn mix(base + flakes, clearcoat, (reflectivity == 0.0) ? 0.0 : mix(1.0, reflectivity, powangle));\n}*/\n\n#ifdef MOD_RT_NormalMap_Gen\nvec4 RT_NormalMap_Gen(sampler2D inTex, vec2 pixSize, float inScale)\n{\nvec4 texSample_00 = texture2D(inTex, vec2(state.uv.x - pixSize.x, state.uv.y - pixSize.y));\nvec4 texSample_01 = texture2D(inTex, vec2(state.uv.x            , state.uv.y - pixSize.y));\nvec4 texSample_02 = texture2D(inTex, vec2(state.uv.x + pixSize.x, state.uv.y - pixSize.y));\n\nvec4 texSample_10 = texture2D(inTex, vec2(state.uv.x - pixSize.x, state.uv.y));\n\nvec4 texSample_12 = texture2D(inTex, vec2(state.uv.x + pixSize.x, state.uv.y));\n\nvec4 texSample_20 = texture2D(inTex, vec2(state.uv.x - pixSize.x, state.uv.y + pixSize.y));\nvec4 texSample_21 = texture2D(inTex, vec2(state.uv.x            , state.uv.y + pixSize.y));\nvec4 texSample_22 = texture2D(inTex, vec2(state.uv.x + pixSize.x, state.uv.y + pixSize.y));\n\nvec4 val = vec4(0., 0.0, 1.0, 1.0);\nval.x = texSample_02.x + texSample_12.x + texSample_22.x - texSample_00.x - texSample_10.x - texSample_20.x;\nval.y = texSample_20.x + texSample_21.x + texSample_22.x - texSample_00.x - texSample_01.x - texSample_02.x;\nval.xy *= inScale;\nval.xy += vec2(0.5);\nval = clamp(val, 0.0, 1.0);\n\nreturn val;\n}\n#endif\n\n#ifdef MOD_RT_GaussianBlur\nfloat RT_normpdf(float x, float sigma)\n{\nreturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nvec4 RT_GaussianBlur(sampler2D inTex, vec2 pixSize, float inScale)\n{\nif (inScale == 0.0)\nreturn vec4(texture2D(inTex, state.uv.xy).rgb, 1.0);\n\nconst int mSize = 15;\nconst int kSize = (mSize-1)/2;\nfloat kernel[mSize];\nvec3 final_colour = vec3(0.0);\n\nfloat sigma = inScale;\nfloat Z = 0.0;\nfor (int j = 0; j <= kSize; ++j)\n{\nkernel[kSize+j] = kernel[kSize-j] = RT_normpdf(float(j), sigma);\n}\n\nfor (int j = 0; j < mSize; ++j)\n{\nZ += kernel[j];\n}\n\nfor (int i=-kSize; i <= kSize; ++i)\n{\nfor (int j=-kSize; j <= kSize; ++j)\n{\nfinal_colour += kernel[kSize+j]*kernel[kSize+i]*texture2D(inTex, state.uv.xy+(vec2(float(i),float(j))) * pixSize).rgb;\n}\n}\n\nreturn vec4(final_colour/(Z*Z), 1.0);\n}\n#endif\n\n#ifdef MOD_RT_Phong\nvec4 RT_Phong(sampler2D inTex, vec4 inLightDir, float inPower)\n{\nvec3 bumpValue = (texture2D(inTex, state.uv.xy).xyz-0.498039)*2.0;\nbumpValue = (bumpValue - 0.498039)*2.0;\nvec3 ngnorm = vec3(0.0, 1.0, 0.0);\nngnorm += bumpValue.x * vec3(1.0, 0.0, 0.0);\nngnorm += bumpValue.y * vec3(0.0, 0.0, 1.0);\nngnorm = normalize(ngnorm);\n\nvec3 lightdir = 2.0*inLightDir.xyz-1.0;\nlightdir = normalize(lightdir);\n\nfloat scaleP = clamp(-dot(ngnorm, lightdir), 0.0, 1.0);\nscaleP = pow(scaleP, inPower);\n\nreturn vec4(vec3(scaleP), 1.0);\n}\n#endif\n\n#ifdef MOD_RT_SobelFilter\nvec4 RT_SobelFilter(sampler2D inTex, vec2 pixSize, int gridsize)\n{\nvec2 index;\nvec2 sum = vec2(0.0);\n\nfor(int y = -2; y <= 2; y++)\n{\nindex.y = float(y);\n\nfor(int x = -2; x <= 2; x++)\n{\nif (x == 0 && y == 0)\ncontinue;\nindex.x = float(x);\n\nfloat pix = intensity(texture2D(inTex, state.uv.xy + index*pixSize));\nsum += vec2(index / (index.x*index.x + index.y*index.y)) * pix;\n}\n}\nfloat color = length(sum);\nreturn vec4(vec3(color), 1.0);\n}\n#endif\n\n#ifdef MOD_RT_EdgeDetect\nvec4 RT_EdgeDetect(sampler2D inTex, vec2 pixSize, float inScale)\n{\nvec4 texSample_00 = texture2D(inTex, vec2(state.uv.x - pixSize.x, state.uv.y - pixSize.y));\nvec4 texSample_01 = texture2D(inTex, vec2(state.uv.x            , state.uv.y - pixSize.y));\nvec4 texSample_02 = texture2D(inTex, vec2(state.uv.x + pixSize.x, state.uv.y - pixSize.y));\n\nvec4 texSample_10 = texture2D(inTex, vec2(state.uv.x - pixSize.x, state.uv.y));\n\nvec4 texSample_12 = texture2D(inTex, vec2(state.uv.x + pixSize.x, state.uv.y));\n\nvec4 texSample_20 = texture2D(inTex, vec2(state.uv.x - pixSize.x, state.uv.y + pixSize.y));\nvec4 texSample_21 = texture2D(inTex, vec2(state.uv.x            , state.uv.y + pixSize.y));\nvec4 texSample_22 = texture2D(inTex, vec2(state.uv.x + pixSize.x, state.uv.y + pixSize.y));\n\nvec2 vec;\nvec.x = texSample_02.x + texSample_12.x + texSample_22.x - texSample_00.x - texSample_10.x - texSample_20.x;\nvec.y = texSample_20.x + texSample_21.x + texSample_22.x - texSample_00.x - texSample_01.x - texSample_02.x;\nvec *= inScale;\n\nfloat val = length(vec);\nval = clamp(val, 0.0, 1.0);\n\nreturn vec4(val);\n}\n#endif\n\nvec4 RT_RootPixel()\n{\nMODULAR_FRAGMENT_INSERT\n}\n\nvoid main(void)\n{\nstate.lpos = vert;\nstate.norm = normalize(g_norm);\nstate.eyedir = normalize(eyeDir);\nstate.uv = tex1;\n#if amboccusevertcol\nstate.vcolor = vec4(vcolor);\n#else\nstate.vcolor = vec4(1.0);\n#endif\nstate.dotnd = dot(state.eyedir, state.norm);\nif (state.dotnd > 0.0)\nstate.dotnd = -state.dotnd;\n\n\nMODULAR_FRAGMENT_SAMPLING\n\nif (ColCorrAndCamResp != 0)\n{\n\ngl_FragColor.rgb = exposure.rgb*ApplyColorCorrection(gl_FragColor.rgb);\n\n\nif (highlightcompression > 0.0)\ngl_FragColor.rgb = funchighlight(gl_FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\ngl_FragColor.rgb = vec3(funcdscs315_1_red(gl_FragColor.r), funcdscs315_1_green(gl_FragColor.g), funcdscs315_1_blue(gl_FragColor.b));\n#elif (camresponse == 306)\ngl_FragColor.rgb = clamp(gl_FragColor.rgb, vec3(0.0), vec3(1.0));\n\ngl_FragColor.rgb = vec3(funcdscs315_2_green(gl_FragColor.r), funcdscs315_2_green(gl_FragColor.g), funcdscs315_2_green(gl_FragColor.b));\n#endif\n\nif (gamma != 1.0)\ngl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(1.0/gamma));\n\n#if BUILDVERSION < 423\nif (uhasLUTTexture != 0)\ngl_FragColor.rgb = ApplyLUT(gl_FragColor.rgb);\n#endif\n\nif (vignetting > 0.0)\ngl_FragColor.rgb = gl_FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n#if BUILDVERSION >= 423\nif (uhasLUTTexture != 0)\ngl_FragColor.rgb = ApplyLUT(gl_FragColor.rgb);\n#endif\n}\n}\n";var shaderes3_InfinityRT_BlockVertexvs = "uniform BlockFrame {\nmat4 uMVPMatrix;\nvec4 uCamPos;\nvec2 jitter;\nvec2 viewportsize;\nfloat scenesize;\nfloat fovfactor;\nfloat planarReflFlip;\n\n\n\n\n\n\nmediump int aarefinecount;\n};\n\nuniform BlockInstance {\nmat4 uOMatrix;\nvec4 bbmin;\nvec4 bbmax;\nvec2 texbbmin;\nvec2 texbbmax;\nvec2 tex2bbmin;\nvec2 tex2bbmax;\nfloat scaleFactor;\nfloat pad1;\nfloat pad2;\nfloat pad3;\n\n};\n";var shaderes3_InfinityRT_Headerfs = "\nSIRT_BLOCKVERTEX_INSERT\n\nvec3 spow(vec3 f0, vec3 f1)\n{\nreturn vec3((f0.x < 0.0) ? 0.0 : pow(f0.x, f1.x),\n(f0.y < 0.0) ? 0.0 : pow(f0.y, f1.y),\n(f0.z < 0.0) ? 0.0 : pow(f0.z, f1.z));\n}\n\nfloat spow(float f0, float f1)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn pow(f0, f1);\n}\n\nfloat Pow2(float x)\n{\nreturn x*x;\n}\n\nfloat Pow4(float x)\n{\nfloat xx = x*x;\nreturn xx * xx;\n}\n\nfloat saturate(float x)\n{\nreturn clamp(x, 0.0, 1.0);\n}\n\nfloat lerp(float a, float b, float x)\n{\nreturn mix(a, b, x);\n}\n\nvec3 lerp(vec3 a, vec3 b, float x)\n{\nreturn mix(a, b, x);\n}\n\nvec3 lerp(vec3 a, vec3 b, vec3 x)\n{\nreturn mix(a, b, x);\n}\n\nfloat rcp(float x)\n{\nreturn 1.0 / x;\n}\n\nfloat Square(float x)\n{\nreturn x*x;\n}\n\nvec3 Square(vec3 x)\n{\nreturn x*x;\n}\n\nfloat Pow5(float x)\n{\nfloat xx = x*x;\nreturn xx * xx * x;\n}\n\nvec3 Pow5(vec3 x)\n{\nvec3 xx = x*x;\nreturn xx * xx * x;\n}\n\nfloat tetr(float f0)\n{\nreturn spow(f0, f0);\n}\n\nfloat ssqrt(float f0)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn sqrt(f0);\n}\n\nfloat rsqrt(float f0)\n{\nreturn 1.0/sqrt(f0);\n}\n\nfloat av(float a, float b)\n{\nreturn 0.5*(a + b);\n}\n\nvec3 av(vec3 a, vec3 b)\n{\nreturn 0.5*(a + b);\n}\n\nfloat av3(float a, float b, float c)\n{\nreturn (a + b + c) / 3.0;\n}\n\nfloat rt2()\n{\nreturn 1.41421356;\n}\n\nfloat mx3(float a, float b, float c)\n{\nreturn max(max(a, b), c);\n}\n\nfloat len3(float a, float b, float c)\n{\nreturn length(vec3(a, b, c));\n}\n\nfloat dpang(float bg)\n{\nreturn (acos(bg)) / (0.5*3.14159265358);\n}\n\nvec3 funchighlight(vec3 v00, vec3 v01)\n{\nvec3 v02 = sqrt(v00);\nvec3 v03 = v01*v02;\nvec3 v04 = min(v02, v00);\nvec3 v05 = v04 - v03;\nvec3 v06 = av(v04, v05);\nvec3 v07 = av(v05, v06);\nvec3 v08 = av(v07, v02);\nvec3 v09 = min(v08, v00);\nreturn v09;\n}\n\nfloat funcdscs315_1_red(float v00)\n{\nfloat v01 = ssqrt(v00);\nfloat v02 = 0.571612;\nfloat v04 = v01 - v02;\nfloat v06 = 0.326853;\nfloat v07 = v04 + v01;\nfloat v08 = v06 + v07;\nfloat v10 = v04 + v08;\nfloat v13 = spow(v02, v10);\nfloat v15 = spow(v01, v13);\nreturn v15;\n}\n\nfloat funcdscs315_1_green(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = v01 + v00;\nfloat v04 = 0.207953;\nfloat v05 = 0.103824;\nfloat v06 = spow(v05, v02);\nfloat v07 = v06*v01;\nfloat v09 = spow(v04, v02);\nfloat v12 = spow(v05, v07);\nfloat v13 = spow(v12, v00);\nfloat v15 = v13 - v09;\nreturn v15;\n}\n\nfloat funcdscs315_1_blue(float v00)\n{\nfloat v01 = ssqrt(v00);\nfloat v02 = v00*v01;\nfloat v03 = v01 + v00;\nfloat v04 = spow(v02, v02);\nfloat v05 = -0.780725;\nfloat v07 = v04*v05;\nfloat v08 = v04 - v01;\nfloat v09 = v03*v02;\nfloat v11 = spow(v00, v07);\nfloat v12 = spow(v11, v08);\nfloat v14 = v09 - v03;\nfloat v16 = v08 - v14;\nfloat v18 = spow(v16, v12);\nfloat v23 = v07*v18;\nfloat v24 = spow(v11, v23);\nreturn v24;\n}\n\nfloat funcdscs315_2_red(float v00)\n{\nfloat v01 = v00*v00;\nfloat v02 = v01*v01;\nfloat v03 = v00 - v01;\nfloat v04 = 0.721305;\nfloat v05 = v04 - v03;\nfloat v07 = v00 + v03;\nfloat v09 = v02 + v05;\nfloat v10 = spow(v07, v09);\nreturn v10;\n}\n\nfloat funcdscs315_2_green(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = 0.067293;\nfloat v03 = 0.779595;\nfloat v05 = spow(v02, v01);\nfloat v06 = v01*v05;\nfloat v07 = spow(v06, v03);\nfloat v09 = spow(v07, v05);\nreturn v09;\n}\n\nfloat funcdscs315_2_blue(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = spow(v00, v01);\nfloat v03 = spow(v02, v02);\nfloat v04 = v00 - v02;\nfloat v05 = spow(v03, v02);\nfloat v06 = 0.796991;\nfloat v07 = v04 + v05;\nfloat v08 = spow(v07, v06);\nreturn v08;\n}\n\nvec3 ApplyInputCC(vec3 col, vec4 inputCC)\n{\n\nif (inputCC.a != 1.0)\ncol = pow(col, vec3(1.0 / inputCC.a));\n\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + inputCC.b * (col - rgbGrey);\nreturn ((rgbSat - 0.5) * inputCC.g + 0.5) + inputCC.r;\n}\n\nvec4 ReadRTTextureFAng(sampler2D texSampler, ivec2 texData, mat3 texUVT, vec3 N, vec3 E, vec3 P, vec3 fAngVector)\n{\n\nfloat dotnd = dot(N, E);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat FAng = 3.0 * acos(-dotnd) / (3.14159625*0.5);\n\nFAng += .1 * dot(P, fAngVector);\nreturn texture(texSampler, vec2(FAng, 0.5), mipmapbias);\n}\n\nvec4 ReadRTTexture(sampler2D texSampler, ivec2 texData, mat3 texUVT, vec3 N, vec3 E)\n{\nif (texData.y == 0)\n{\nreturn texture(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\n}\nelse if (texData.y == 7)\n{\nreturn texture(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias).rrrr;\n}\nelse if (texData.y == 8)\n{\nreturn texture(texSampler, (texUVT*vec3(tex2, 1.0)).xy, mipmapbias);\n}\nelse if (texData.y == 9)\n{\nreturn texture(texSampler, (texUVT*vec3(tex2, 1.0)).xy, mipmapbias).rrrr;\n}\nelse if (texData.y == 1)\n{\n\n\n\n\n\n\n\n\n\n\n\nfloat dotnd = dot(N, E);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat FAng = acos(-dotnd) / (3.14159625*0.5);\n\n\nreturn texture(texSampler, vec2(FAng, 0.5), mipmapbias);\n}\n#if extOESSD\nelse if (texData.y == 2 && aarefinecount == -1)\n{\n\nvec4 pix;\nvec2 dxTex = 0.5*dFdx(tex1);\nvec2 dyTex = 0.5*dFdy(tex1);\npix = texture(texSampler, (texUVT*vec3(tex1-dxTex-dyTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1+dxTex-dyTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1-dxTex+dyTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1+dxTex+dyTex, 1.0)).xy, mipmapbias);\npix *= 0.25;\nreturn pix;\n}\nelse if (texData.y == 3 && aarefinecount == -1)\n{\n\nvec4 pix;\nvec2 dxTex = 0.5*dFdx(tex1);\nvec2 dyTex = 0.5*dFdy(tex1);\n\npix = texture(texSampler, (texUVT*vec3(tex1-dyTex-dxTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1-dyTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1-dyTex+dxTex, 1.0)).xy, mipmapbias);\n\npix += texture(texSampler, (texUVT*vec3(tex1-dxTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1+dxTex, 1.0)).xy, mipmapbias);\n\npix += texture(texSampler, (texUVT*vec3(tex1+dyTex-dxTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1+dyTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1+dyTex+dxTex, 1.0)).xy, mipmapbias);\n\npix /= 9.0;\nreturn pix;\n}\nelse if (texData.y == 4 && aarefinecount == -1)\n{\n\nvec4 pix;\nvec2 dxTex = 0.5*dFdx(tex1);\nvec2 dyTex = 0.5*dFdy(tex1);\n\npix = 0.25*texture(texSampler, (texUVT*vec3(tex1 - dyTex - dxTex, 1.0)).xy, mipmapbias);\npix += 0.5*texture(texSampler, (texUVT*vec3(tex1 - dyTex, 1.0)).xy, mipmapbias);\npix += 0.25*texture(texSampler, (texUVT*vec3(tex1 - dyTex + dxTex, 1.0)).xy, mipmapbias);\n\npix += 0.5*texture(texSampler, (texUVT*vec3(tex1 - dxTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\npix += 0.5*texture(texSampler, (texUVT*vec3(tex1 + dxTex, 1.0)).xy, mipmapbias);\n\npix += 0.25*texture(texSampler, (texUVT*vec3(tex1 + dyTex - dxTex, 1.0)).xy, mipmapbias);\npix += 0.5*texture(texSampler, (texUVT*vec3(tex1 + dyTex, 1.0)).xy, mipmapbias);\npix += 0.25*texture(texSampler, (texUVT*vec3(tex1 + dyTex + dxTex, 1.0)).xy, mipmapbias);\n\npix /= 4.0;\nreturn pix;\n}\n#endif\nelse if (texData.y == 5)\n{\n\nvec3 dir = normalize(vert);\nreturn texture(texSampler, vec2(atan(-dir.x, dir.z) * 0.15915494309, 1.0-(acos(dir.y) * 0.31830988618)), mipmapbias);\n}\nreturn texture(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\n}\n\nvec3 RT_rand3(vec3 n) { return 2.0*fract(sin(n) * 43758.5453123) - 1.0; }\n\nvec3 RT_Flakes(vec3 ngnormA, vec3 neyeDir, float size, float intensity)\n{\nfloat dotnd = dot(neyeDir, ngnormA);\nif (dotnd > 0.0)\ndotnd = -dotnd;\n\nfloat projfac = 1000.0*scenesize*fovfactor;\nfloat projsize = min(1.0, projfac*(-dotnd*size / (length(uCamPos.xyz - lvert))));\nif (projsize > 3.0)\nprojsize = 3.0;\n\nintensity *= 0.25*projsize;\n\nif (intensity < 0.01)\nreturn ngnormA;\nintensity -= 0.01;\n\nvec3 flakepos = lvert;\nflakepos *= 1.0 / (size*(2.828427));\n\nvec3 r0 = RT_rand3(floor(vec3(dot(flakepos, vec3(0.0, 0.707106, 0.707106)) + 347.0, dot(flakepos, vec3(0.0, -0.707106, 0.707106)) + 125.0, dot(flakepos, vec3(0.707106, 0.0, 0.707106))) + 2376.0))\n+ RT_rand3(floor(vec3(dot(flakepos, vec3(-0.707106, 0.0, 0.707106)) + 674.0, dot(flakepos, vec3(0.707106, 0.707106, 0.0)) + 8294.0, dot(flakepos, vec3(-0.707106, 0.707106, 0.0))) + 263.0));\nfloat v = r0.x + r0.y + r0.z;\n\nvec3 valv0 = RT_rand3(vec3(v, v + 413.0, v + 273.0));\nvec3 valv1 = RT_rand3(vec3(v + 317.0, v + 113.0, v + 573.0));\n\n\nvec3 ax1 = normalize(valv0 - dot(ngnormA, valv0)*ngnormA);\nvec3 ax2 = cross(ngnormA, ax1);\n\n\nvec2 uv = 0.49*valv1.xy + 0.5;\nfloat gScale = sqrt(-2.0 * log(uv.x));\ngScale = max(gScale-1.0, 0.0);\nfloat z0 = gScale*cos(uv.y *2.0 *3.14159265);\nfloat z1 = gScale*sin(uv.y *2.0 *3.14159265);\n\n\nvec3 pert = ngnormA;\npert += ax1*z0*intensity;\npert += ax2*z1*intensity;\nreturn normalize(pert);\n}\n\nfloat intensity(in vec4 color){\nreturn sqrt((color.x*color.x)+(color.y*color.y)+(color.z*color.z));\n}\n\nvec3 ApplyLUT(vec3 textureColor)\n{\nreturn textureColor;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\nvec3 ApplyColorCorrection(vec3 col)\n{\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + cc_saturation * (col - rgbGrey);\nreturn ((rgbSat-0.5) * cc_contrast + 0.5) * cc_tint.rgb + cc_brightness;\n}\n\n#if OutputDoFDepth\nfloat linearize(float depth) {\nreturn -zfar * znear / (depth * (zfar - znear) - zfar);\n}\nvec4 GetDepthValue()\n{\nfloat dist = linearize(gl_FragCoord.z);\ndist = (dist - focalnear) / (focalfar - focalnear);\nif (dist > 0.5)\ndist = (pow((dist*2.0)-1.0, dofbias)+1.0)*0.5;\nelse\ndist = 0.5-(pow(((0.5-dist)*2.0), dofbias)*0.5);\nreturn vec4(vec3(clamp(dist, 0.0, 0.995)), 1.0);\n}\n#endif\n";var shaderes3_InfinityRT_Header_Minifs = "\nSIRT_BLOCKVERTEX_INSERT\n\nvec3 spow(vec3 f0, vec3 f1)\n{\nreturn vec3((f0.x < 0.0) ? 0.0 : pow(f0.x, f1.x),\n(f0.y < 0.0) ? 0.0 : pow(f0.y, f1.y),\n(f0.z < 0.0) ? 0.0 : pow(f0.z, f1.z));\n}\n\nfloat spow(float f0, float f1)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn pow(f0, f1);\n}\n\nfloat Pow2(float x)\n{\nreturn x*x;\n}\n\nfloat Pow4(float x)\n{\nfloat xx = x*x;\nreturn xx * xx;\n}\n\nfloat saturate(float x)\n{\nreturn clamp(x, 0.0, 1.0);\n}\n\nfloat lerp(float a, float b, float x)\n{\nreturn mix(a, b, x);\n}\n\nvec3 lerp(vec3 a, vec3 b, float x)\n{\nreturn mix(a, b, x);\n}\n\nvec3 lerp(vec3 a, vec3 b, vec3 x)\n{\nreturn mix(a, b, x);\n}\n\nfloat rcp(float x)\n{\nreturn 1.0 / x;\n}\n\nfloat Square(float x)\n{\nreturn x*x;\n}\n\nvec3 Square(vec3 x)\n{\nreturn x*x;\n}\n\nfloat Pow5(float x)\n{\nfloat xx = x*x;\nreturn xx * xx * x;\n}\n\nvec3 Pow5(vec3 x)\n{\nvec3 xx = x*x;\nreturn xx * xx * x;\n}\n\nfloat tetr(float f0)\n{\nreturn spow(f0, f0);\n}\n\nfloat ssqrt(float f0)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn sqrt(f0);\n}\n\nfloat rsqrt(float f0)\n{\nreturn 1.0/sqrt(f0);\n}\n\nfloat av(float a, float b)\n{\nreturn 0.5*(a + b);\n}\n\nvec3 av(vec3 a, vec3 b)\n{\nreturn 0.5*(a + b);\n}\n\nfloat av3(float a, float b, float c)\n{\nreturn (a + b + c) / 3.0;\n}\n\nfloat rt2()\n{\nreturn 1.41421356;\n}\n\nfloat mx3(float a, float b, float c)\n{\nreturn max(max(a, b), c);\n}\n\nfloat len3(float a, float b, float c)\n{\nreturn length(vec3(a, b, c));\n}\n\nfloat dpang(float bg)\n{\nreturn (acos(bg)) / (0.5*3.14159265358);\n}\n\nvec3 funchighlight(vec3 v00, vec3 v01)\n{\nvec3 v02 = sqrt(v00);\nvec3 v03 = v01*v02;\nvec3 v04 = min(v02, v00);\nvec3 v05 = v04 - v03;\nvec3 v06 = av(v04, v05);\nvec3 v07 = av(v05, v06);\nvec3 v08 = av(v07, v02);\nvec3 v09 = min(v08, v00);\nreturn v09;\n}\n\nvec3 ApplyInputCC(vec3 col, vec4 inputCC)\n{\n\nif (inputCC.a != 1.0)\ncol = pow(col, vec3(1.0 / inputCC.a));\n\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + inputCC.b * (col - rgbGrey);\nreturn ((rgbSat - 0.5) * inputCC.g + 0.5) + inputCC.r;\n}\n\nvec4 ReadRTTexture(sampler2D texSampler, ivec2 texData, mat3 texUVT, vec3 N, vec3 E)\n{\nreturn texture(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\n}\n\nvec3 RT_rand3(vec3 n) { return 2.0*fract(sin(n) * 43758.5453123) - 1.0; }\n\nfloat intensity(in vec4 color){\nreturn sqrt((color.x*color.x)+(color.y*color.y)+(color.z*color.z));\n}\n\nvec3 ApplyLUT(vec3 textureColor)\n{\nreturn texture(lutTex, textureColor).rgb;\n}\n\nvec3 ApplyColorCorrection(vec3 col)\n{\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + cc_saturation * (col - rgbGrey);\nreturn ((rgbSat-0.5) * cc_contrast + 0.5) * cc_tint.rgb + cc_brightness;\n}\n";var shaderes3_InfinityRT_PBR2_Headerfs = "const float PI = 3.1415926535897932;\n\n#define SHADINGMODELID_DEFAULT_LIT		0\n#define SHADINGMODELID_CLEAR_COAT		1\n\nfloat D_GGX(float a2, float NoH)\n{\nfloat d = (NoH * a2 - NoH) * NoH + 1.0;\nreturn a2 / (PI*d*d);\n}\n\nfloat Vis_SmithJointApprox(float a2, float NoV, float NoL)\n{\nfloat a = sqrt(a2);\nfloat Vis_SmithV = NoL * (NoV * (1.0 - a) + a);\nfloat Vis_SmithL = NoV * (NoL * (1.0 - a) + a);\nreturn 0.5 * rcp(Vis_SmithV + Vis_SmithL);\n}\n\nvec3 F_Schlick(vec3 SpecularColor, float VoH)\n{\nfloat Fc = Pow5(1.0 - VoH);\n\n\nreturn saturate(50.0 * SpecularColor.g) * Fc + (1.0 - Fc) * SpecularColor;\n}\n\nvec3 Diffuse_Lambert(vec3 DiffuseColor)\n{\nreturn DiffuseColor * (1.0 / PI);\n}\n\nfloat Vis_Kelemen(float VoH)\n{\n\nreturn rcp(4.0 * VoH * VoH + 1e-5);\n}\n\nvec3 EnvBRDFApprox(vec3 SpecularColor, float Roughness, float NoV, float fOffsetScale)\n{\n\n\nvec4 c0 = vec4( -1, -0.0275, -0.572, 0.022 );\nvec4 c1 = vec4( 1, 0.0425, 1.04, -0.04 );\nvec4 r = Roughness * c0 + c1;\nfloat a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\nvec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n\n\n\nAB.y *= saturate(50.0 * SpecularColor.g);\n\nreturn SpecularColor * AB.x + AB.y * fOffsetScale;\n}\n\nfloat DielectricSpecularToF0(float Specular)\n{\nreturn 0.08 * Specular;\n}\n\nvec3 ComputeF0(vec3 Specular, vec3 BaseColor, float Metallic)\n{\nreturn mix(vec3(DielectricSpecularToF0(Specular.r)), BaseColor, vec3(Metallic));\n}\n\nvec4 ReadEnvMap(samplerCube cubetex, vec3 dir)\n{\nvec4 envSample = texture(cubetex, dir);\n#ifdef _MULTIPLICATIVE_RGBE_\nenvSample = vec4(envSample.rgb*((16.0 / 255.0) / envSample.a), 1.0);\n#else\nenvSample = vec4(envSample.rgb + (1.0 - envSample.a)*64.0, 1.0);\n#endif\nreturn envSample;\n}\n\nstruct BxDFContext\n{\nfloat NoV;\nfloat NoL;\nfloat VoL;\nfloat NoH;\nfloat VoH;\n};\n\nstruct FRect\n{\nvec3		Origin;\nmat3		Axis;\nvec2		Extent;\nvec2		FullExtent;\nvec2		Offset;\n};\n\nstruct FAreaLight\n{\nfloat		SphereSinAlpha;\nfloat		SphereSinAlphaSoft;\nfloat		LineCosSubtended;\n\nvec3		FalloffColor;\n\nFRect		Rect;\n\nbool		bIsRect;\n};\n\nstruct FShadowTerms\n{\nfloat	SurfaceShadow;\nfloat	TransmissionShadow;\nfloat	TransmissionThickness;\n};\n\nstruct FDirectLighting\n{\nvec3	Diffuse;\nvec3	Specular;\nvec3	Transmission;\n};\n\n\nstruct FGBufferData\n{\nvec3 DiffuseColor;\nvec3 SpecularColor;\nfloat Roughness;\nint ShadingModelID;\nfloat ClearCoat;\nfloat ClearCoatRoughness;\n};\n\nvoid Init(inout BxDFContext Context, vec3 N, vec3 V, vec3 L)\n{\nContext.NoL = dot(N, L);\nContext.NoV = dot(N, V);\nContext.VoL = dot(V, L);\nfloat InvLenH = rsqrt(2.0 + 2.0 * Context.VoL);\nContext.NoH = saturate((Context.NoL + Context.NoV) * InvLenH);\nContext.VoH = saturate(InvLenH + InvLenH * Context.VoL);\n\n\n}\n\n\nvoid SphereMaxNoH(inout BxDFContext Context, float SinAlpha, bool bNewtonIteration)\n{\nif (SinAlpha > 0.0)\n{\nfloat CosAlpha = sqrt(1.0 - Pow2(SinAlpha));\n\nfloat RoL = 2.0 * Context.NoL * Context.NoV - Context.VoL;\nif (RoL >= CosAlpha)\n{\nContext.NoH = 1.0;\nContext.VoH = abs(Context.NoV);\n}\nelse\n{\nfloat rInvLengthT = SinAlpha * rsqrt(1.0 - RoL*RoL);\nfloat NoTr = rInvLengthT * (Context.NoV - RoL * Context.NoL);\nfloat VoTr = rInvLengthT * (2.0 * Context.NoV*Context.NoV - 1.0 - RoL * Context.VoL);\n\nif (bNewtonIteration)\n{\n\nfloat NxLoV = sqrt(saturate(1.0 - Pow2(Context.NoL) - Pow2(Context.NoV) - Pow2(Context.VoL) + 2.0 * Context.NoL * Context.NoV * Context.VoL));\n\nfloat NoBr = rInvLengthT * NxLoV;\nfloat VoBr = rInvLengthT * NxLoV * 2.0 * Context.NoV;\nfloat NoLVTr = Context.NoL * CosAlpha + Context.NoV + NoTr;\nfloat VoLVTr = Context.VoL * CosAlpha + 1.0 + VoTr;\n\nfloat p = NoBr   * VoLVTr;\nfloat q = NoLVTr * VoLVTr;\nfloat s = VoBr   * NoLVTr;\n\nfloat xNum = q * (-0.5 * p + 0.25 * VoBr * NoLVTr);\nfloat xDenom = p*p + s * (s - 2.0 * p) + NoLVTr * ((Context.NoL * CosAlpha + Context.NoV) * Pow2(VoLVTr) + q * (-0.5 * (VoLVTr + Context.VoL * CosAlpha) - 0.5));\nfloat TwoX1 = 2.0 * xNum / (Pow2(xDenom) + Pow2(xNum));\nfloat SinTheta = TwoX1 * xDenom;\nfloat CosTheta = 1.0 - TwoX1 * xNum;\nNoTr = CosTheta * NoTr + SinTheta * NoBr;\nVoTr = CosTheta * VoTr + SinTheta * VoBr;\n}\n\nContext.NoL = Context.NoL * CosAlpha + NoTr;\nContext.VoL = Context.VoL * CosAlpha + VoTr;\nfloat InvLenH = rsqrt(2.0 + 2.0 * Context.VoL);\nContext.NoH = saturate((Context.NoL + Context.NoV) * InvLenH);\nContext.VoH = saturate(InvLenH + InvLenH * Context.VoL);\n}\n}\n}\n\nfloat New_a2(float a2, float SinAlpha, float VoH)\n{\nreturn a2 + 0.25 * SinAlpha * (3.0 * sqrt(a2) + SinAlpha) / (VoH + 0.001);\n\n\n}\n\nfloat EnergyNormalization(inout float a2, float VoH, FAreaLight AreaLight)\n{\nif (AreaLight.SphereSinAlphaSoft > 0.0)\n{\n\na2 = saturate(a2 + Pow2(AreaLight.SphereSinAlphaSoft) / (VoH * 3.6 + 0.4));\n}\n\nfloat Sphere_a2 = a2;\nfloat Energy = 1.0;\nif (AreaLight.SphereSinAlpha > 0.0)\n{\nSphere_a2 = New_a2(a2, AreaLight.SphereSinAlpha, VoH);\nEnergy = a2 / Sphere_a2;\n}\n\nif (AreaLight.LineCosSubtended < 1.0)\n{\n#if 1\nfloat LineCosTwoAlpha = AreaLight.LineCosSubtended;\nfloat LineTanAlpha = sqrt((1.0001 - LineCosTwoAlpha) / (1.0 + LineCosTwoAlpha));\nfloat Line_a2 = New_a2(Sphere_a2, LineTanAlpha, VoH);\nEnergy *= sqrt(Sphere_a2 / Line_a2);\n#else\nfloat LineCosTwoAlpha = AreaLight.LineCosSubtended;\nfloat LineSinAlpha = sqrt(0.5 - 0.5 * LineCosTwoAlpha);\nfloat Line_a2 = New_a2(Sphere_a2, LineSinAlpha, VoH);\nEnergy *= Sphere_a2 / Line_a2;\n#endif\n}\n\nreturn Energy;\n}\n\nvec3 SpecularGGX(float Roughness, vec3 SpecularColor, BxDFContext Context, float NoL, FAreaLight AreaLight)\n{\nfloat a2 = Pow4(Roughness);\nfloat Energy = EnergyNormalization(a2, Context.VoH, AreaLight);\n\n\nfloat D = D_GGX(a2, Context.NoH) * Energy;\nfloat Vis = Vis_SmithJointApprox(a2, Context.NoV, NoL);\nvec3 F = F_Schlick(SpecularColor, Context.VoH);\n\nreturn (D * Vis) * F;\n}\n\nFDirectLighting DefaultLitBxDF(FGBufferData GBuffer, vec3 N, vec3 V, vec3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow)\n{\nBxDFContext Context;\nInit(Context, N, V, L);\nSphereMaxNoH(Context, AreaLight.SphereSinAlpha, true);\nContext.NoV = saturate(abs(Context.NoV) + 1e-5);\n\nFDirectLighting Lighting;\nLighting.Diffuse = AreaLight.FalloffColor * (Falloff * NoL) * Diffuse_Lambert(GBuffer.DiffuseColor);\n\n\n\n\nLighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX(GBuffer.Roughness, GBuffer.SpecularColor, Context, NoL, AreaLight);\n\nLighting.Transmission = vec3(0.0);\nreturn Lighting;\n}\n\nFDirectLighting ClearCoatBxDF(FGBufferData GBuffer, vec3 N, vec3 V, vec3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow)\n{\nfloat ClearCoat = GBuffer.ClearCoat;\nfloat ClearCoatRoughness = max(GBuffer.ClearCoatRoughness, 0.02);\nfloat Film = 1.0 * ClearCoat;\nfloat MetalSpec = 0.9;\n\nBxDFContext Context;\n\nvec3 Nspec = N;\nfloat NoLSpec = NoL;\n\n\n\n\n\n\nInit(Context, Nspec, V, L);\nSphereMaxNoH(Context, AreaLight.SphereSinAlpha, true);\nContext.NoV = saturate(abs(Context.NoV) + 1e-5);\nContext.VoH = /*AreaLight.bIsRect ? Context.NoV :*/ Context.VoH;\n\n\n\n\n\n\n\nfloat F0 = 0.04;\nfloat Fc = Pow5(1.0 - Context.VoH);\nfloat F = Fc + (1.0 - Fc) * F0;\nF *= ClearCoat;\n\nFDirectLighting Lighting;\n\n\n\n\n\n\n{\nfloat a2 = Pow4(ClearCoatRoughness);\nfloat Energy = EnergyNormalization(a2, Context.VoH, AreaLight);\n\n\nfloat D = D_GGX(a2, Context.NoH) * Energy;\nfloat Vis = Vis_SmithJointApprox(a2, Context.NoV, NoLSpec);\n\nLighting.Specular = AreaLight.FalloffColor * (Falloff * NoLSpec) * D * Vis * F;\n}\n\n\n\n\n\n\n\n\nfloat LayerAttenuation = (1.0 - F);\nLighting.Diffuse = AreaLight.FalloffColor * (LayerAttenuation * Falloff * NoL) * Diffuse_Lambert(GBuffer.DiffuseColor);\n\n\n\n\n\n\n{\nLighting.Specular += AreaLight.FalloffColor * (LayerAttenuation * Falloff * NoL) * SpecularGGX(GBuffer.Roughness, GBuffer.SpecularColor, Context, NoL, AreaLight);\n}\n\nLighting.Transmission = vec3(0.0);\nreturn Lighting;\n}\n\nFDirectLighting IntegrateBxDF(FGBufferData GBuffer, vec3 N, vec3 V, vec3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow)\n{\nif (GBuffer.ShadingModelID == SHADINGMODELID_CLEAR_COAT)\nreturn ClearCoatBxDF(GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow);\nreturn DefaultLitBxDF(GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\nFDirectLighting EvaluateBxDF(FGBufferData GBuffer, vec3 N, vec3 V, vec3 L, float NoL, FShadowTerms Shadow)\n{\nFAreaLight AreaLight;\nAreaLight.SphereSinAlpha = 0.0;\nAreaLight.SphereSinAlphaSoft = 0.0;\nAreaLight.LineCosSubtended = 1.0;\nAreaLight.FalloffColor = vec3(1.0);\n\nAreaLight.bIsRect = false;\n\n\nreturn IntegrateBxDF(GBuffer, N, V, L, 1.0, NoL, AreaLight, Shadow);\n}\n\n\n\nfloat RadialAttenuation(vec3 WorldLightVector, float FalloffExponent)\n{\nfloat NormalizeDistanceSquared = dot(WorldLightVector, WorldLightVector);\n\nreturn pow(1.0 - saturate(NormalizeDistanceSquared), FalloffExponent);\n}\n\n#if num_scene_lights > 0\nvec3 BasePPS_GetSimpleForwardLightingDirectionalLight(int iLightIdx, FGBufferData GBuffer, vec3 WorldNormal, vec3 CameraVector)\n{\nvec3 V = CameraVector;\nvec3 N = WorldNormal;\nvec3 L;\nif (iLightIdx == 3)\n{\nif (light_type[3] == 0)\nL = light_direction[3];\nelse\nL = normalize(light_position[3] - vert);\n}\nelse if (iLightIdx == 2)\n{\nif (light_type[2] == 0)\nL = light_direction[2];\nelse\nL = normalize(light_position[2] - vert);\n}\nelse if (iLightIdx == 1)\n{\nif (light_type[1] == 0)\nL = light_direction[1];\nelse\nL = normalize(light_position[1] - vert);\n}\nelse\n{\nif (light_type[0] == 0)\nL = light_direction[0];\nelse\nL = normalize(light_position[0] - vert);\n}\nfloat NoL = saturate(dot(N, L));\n\nif (dot(N, L) < 0.0)\nreturn vec3(0.0);\n\nvec3 LightColor;\nif (iLightIdx == 3)\n{\nLightColor = light_intensity[3].rgb * PI;\nif (light_type[3] == 1)\nLightColor *= RadialAttenuation((light_position[3] - vert) / light_intensity[3].a, 2.0);\n}\nelse if (iLightIdx == 2)\n{\nLightColor = light_intensity[2].rgb * PI;\nif (light_type[2] == 1)\nLightColor *= RadialAttenuation((light_position[2] - vert) / light_intensity[2].a, 2.0);\n}\nelse if (iLightIdx == 1)\n{\nLightColor = light_intensity[1].rgb * PI;\nif (light_type[1] == 1)\nLightColor *= RadialAttenuation((light_position[1] - vert) / light_intensity[1].a, 2.0);\n}\nelse\n{\nLightColor = light_intensity[0].rgb * PI;\nif (light_type[0] == 1)\nLightColor *= RadialAttenuation((light_position[0] - vert) / light_intensity[0].a, 2.0);\n}\n\nFShadowTerms Shadow;\nShadow.SurfaceShadow = 1.0;\nShadow.TransmissionShadow = 1.0;\nShadow.TransmissionThickness = 1.0;\n\nFDirectLighting Lighting = EvaluateBxDF(GBuffer, N, V, L, NoL, Shadow);\n\n\n\nreturn LightColor * (Lighting.Diffuse + Lighting.Transmission + Lighting.Specular);\n}\n#endif\n";var shaderes3_InfinityRT_Corevs = "#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\ninvariant gl_Position;\nin vec3 aVertexPosition;\nin vec3 aNormal;\nin vec2 aTextureCoord;\n#if uvch > 1\nin vec2 aTextureCoord2;\n#endif\n\nSIRT_BLOCKVERTEX_INSERT\n\nout vec2 tex1;\nout vec2 tex2;\nout vec3 g_norm;\nout vec3 eyeDir;\nout vec3 vert;\nout vec3 lvert;\n\n#if usesTangents\nin vec3 aSurfTanU;\nout vec3 bu;\nout vec3 bv;\n#endif\n\n#if amboccusevertcol\nuniform int amboccchannel;\nin vec4 aColor;\nout float vcolor;\n#endif\n\n#if skinned > 0\nuniform int numBones;\nuniform mat4 matBone[4];\nin vec4 a_skinweights;\n#endif\n\nvoid main(void)\n{\n\n#if geomgen == 4\nvec3 v = (aVertexPosition / vec3(65535.0)) * (bbmax.xyz - bbmin.xyz) + bbmin.xyz;\nvec4 vPosition = uOMatrix * vec4(v, 1.0);\ntex1 = (aTextureCoord / vec2(65535.0)) * (texbbmax - texbbmin) + texbbmin;\n#if uvch > 1\ntex2 = (aTextureCoord2 / vec2(65535.0)) * (tex2bbmax - tex2bbmin) + tex2bbmin;\n#else\ntex2 = tex1;\n#endif\nvec3 vn = aNormal / vec3(32757.0);\n#elif geomgen == 5\nvec3 v = (aVertexPosition / vec3(16383.0)) * (bbmax.xyz - bbmin.xyz) + bbmin.xyz;\nvec4 vPosition = uOMatrix * vec4(v, 1.0);\ntex1 = (aTextureCoord / vec2(16383.0)) * (texbbmax - texbbmin) + texbbmin;\nvec3 vn = aNormal / vec3(8191.0);\n#if uvch > 1\ntex2 = (aTextureCoord2 / vec2(16383.0)) * (tex2bbmax - tex2bbmin) + tex2bbmin;\n#else\ntex2 = tex1;\n#endif\n#else\n#if eScale\nvec3 v = aVertexPosition;\nvec3 frac = (v - floor(v))*6.59623;\nv -= (step(0.5, frac - floor(frac))*2.0 - 1.0)*float(eScale);\nvec4 vPosition = uOMatrix * vec4(v, 1.0);\n#else\nvec3 v = aVertexPosition;\nvec4 vPosition = uOMatrix * vec4(aVertexPosition, 1.0);\n#endif\ntex1 = aTextureCoord;\n#if uvch > 1\ntex2 = aTextureCoord2;\n#else\ntex2 = tex1;\n#endif\nvec3 vn = aNormal;\n#endif\n#if usesTangents\nvec3 tanu = aSurfTanU;\n#endif\n\n#if skinned > 0\nif (numBones > 0) {\nvec4 tvert = vec4(0.0);\nvec3 tnorm = vec3(0.0);\n#if geomgen == 5\nvec4 skinweights = a_skinweights / vec4(16383.0);\n#else\nvec4 skinweights = a_skinweights;\n#endif\nfor (int boneIdx = 0; boneIdx < numBones; boneIdx++)\n{\nfloat weight = skinweights[boneIdx];\ntvert += weight * (matBone[boneIdx] * vec4(v, 1.0));\ntnorm += weight * (matBone[boneIdx] * vec4(vn, 0.0)).xyz;\n}\nvPosition = tvert;\ng_norm = vn = normalize(tnorm);\n}\nelse\n#endif\n{\ng_norm = normalize(uOMatrix * vec4(vn,0.0)).xyz;\n}\ngl_Position = uMVPMatrix * vPosition;\n\nlvert = v * scaleFactor;\nvert = vPosition.xyz;\ngl_Position.xy += jitter * gl_Position.w;\n#if usesTangents\nbu = tanu;\nbv = cross(vn, tanu);\n#endif\neyeDir = (vPosition.xyz - uCamPos.xyz);\n\n#if amboccusevertcol\nif (amboccchannel == 3)\nvcolor = aColor.a;\nelse if (amboccchannel == 2)\nvcolor = aColor.b;\nelse if (amboccchannel == 1)\nvcolor = aColor.g;\nelse\nvcolor = aColor.r;\n#endif\n}\n";var shaderes3_InfinityRT_Matchfs = "#define piDiv2 1.5707963267948966\n#define OneDivPi 0.3183098861837907\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nuniform BlockMatch {\nvec4 diffusecolor;\nvec4 intensitycolor;\nvec4 intensitybcolor;\nvec4 specularcolor;\nvec4 mapblurlevel;\nvec4 additionalcolor;\nvec4 amboccBoost;\nvec4 ior_R0;\nvec4 cc_tint;\n\nmat3 diffuseUVT;\nmat3 roughnessUVT;\nmat3 intensityUVT;\nmat3 specularUVT;\nmat3 alphaUVT;\n\nmat3 bumpUVT;\nmat3 additionalUVT;\nmat3 amboccUVT;\n\n\nfloat envScale;\n\n\n\n\n\n\nfloat bumpuserscale;\nfloat mipmapbias;\nfloat mipmapbiasEnv;\nfloat gamma;\nfloat highlightcompression;\n\nfloat vignetting;\nfloat cc_brightness;\nfloat cc_contrast;\nfloat cc_saturation;\nfloat reflectionplanescale;\nfloat roughnessEdgeFac;\nvec4 exposure;\nvec4 glowbias;\n\nivec4 ior_R0Flip;\nivec4 hasIOR;\nivec2 diffuseTexData;\nivec2 roughnessTexData;\nivec2 intensityTexData;\nivec2 specularTexData;\nivec2 additionalTexData;\nivec2 alphaTexData;\nivec2 amboccTexData;\nivec2 bumpTexData;\nivec2 reflectionplanetexval;\nint uhasDiffuseEnv;\nint usebumpflakes;\nint gammaDiffAddTexs;\nint linearworkflow;\nint simpleintensity;\nint dualintensitycolor;\nint sphericalwhirl;\nint decalalpha;\nint clearIgnoreBump;\nint refractionmode;\nint uhasLUTTexture;\nint reflectionplanestotal;\nint ppexistence;\n\nfloat fadedReflectionsScale;\nfloat fadedReflectionsOffset;\nfloat fadedReflectionsPow;\nfloat fadedReflectionsColorR;\nfloat fadedReflectionsColorG;\nfloat fadedReflectionsColorB;\n\nfloat envAABBMinX;\nfloat envAABBMinY;\nfloat envAABBMinZ;\nfloat envAABBMaxX;\nfloat envAABBMaxY;\nfloat envAABBMaxZ;\n\nfloat fAngVectorX;\nfloat fAngVectorY;\nfloat fAngVectorZ;\n};\n\nuniform samplerCube diffuseenv;\nuniform samplerCube specularenv;\nuniform samplerCube specularblurenv;\nuniform samplerCube channelcache1cubetexture;\nuniform samplerCube channelcache2cubetexture;\nuniform samplerCube channelcache3cubetexture;\nuniform sampler2D diffusetexture;\nuniform sampler2D roughnesstexture;\nuniform sampler2D intensitytexture;\nuniform sampler2D speculartexture;\nuniform sampler2D alphatexture;\nuniform sampler2D bumptexture;\nuniform sampler2D additionaltexture;\nuniform sampler2D ambocctexture;\nuniform sampler2D reflectionplaneTex;\nuniform sampler2D reflectionplaneTex2;\n\nuniform mat4 reflectionplanematrix[2];\nuniform mat4 reflectionplanedynamicinfluence;\nuniform float curveMax;\nuniform float curveMin;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\n#if hasAmbOccTextureParam\nuniform vec3 amboccParamValue;\n#endif\n\n#if amboccusevertcol\nin float vcolor;\n#endif\n\nin vec2 tex1;\nin vec2 tex2;\nin vec3 g_norm;\nin vec3 eyeDir;\nin vec3 vert;\nin vec3 lvert;\nin vec3 bu;\nin vec3 bv;\n\nuniform int glowpass;\nuniform int ColCorrAndCamResp;\nuniform vec3 camzv;\n#if OutputDoFDepth\nlayout(location = 0) out vec4 FragColor;\nlayout(location = 1) out vec4 DepthValues;\n#else\nout vec4 FragColor;\n#endif\n\nSIRT_STANDARD_HEADER_INSERT\n\n#if num_scene_lights > 0\nuniform BlockLights {\nmat4 ulights[num_scene_lights];\nfloat light_roughnessdelta[num_scene_lights];\n};\nconst float PI = 3.1415926535897932;\n\nstruct Light {\nvec4 colorIntensity;\nvec3 l;\nfloat attenuation;\nfloat NoL;\n};\n\nfloat getSquareFalloffAttenuation(float distanceSquare, float falloff) {\nfloat factor = distanceSquare * falloff;\nfloat smoothFactor = saturate(1.0 - factor * factor);\nreturn smoothFactor * smoothFactor;\n}\n\nfloat getDistanceAttenuation(const /*highp*/ vec3 posToLight, float falloff) {\nfloat distanceSquare = dot(posToLight, posToLight);\nfloat attenuation = getSquareFalloffAttenuation(distanceSquare, falloff);\nreturn attenuation * 1.0 / max(distanceSquare, 1e-4);\n}\n\nfloat getAngleAttenuation(const vec3 lightDir, const vec3 l, const vec2 scaleOffset) {\nfloat cd = dot(lightDir, l);\nfloat attenuation = saturate(cd * scaleOffset.x + scaleOffset.y);\nreturn attenuation * attenuation;\n}\n\nfloat Filament_D_GGX(float roughness, float NoH) {\nfloat oneMinusNoHSquared = 1.0 - NoH * NoH;\nfloat a = NoH * roughness;\nfloat k = roughness / (oneMinusNoHSquared + a * a);\nfloat d = k * k * OneDivPi;\nreturn d;\n}\n\nfloat V_SmithGGXCorrelated(float roughness, float NoV, float NoL) {\nfloat a2 = roughness * roughness;\nfloat lambdaV = NoL * sqrt((NoV - a2 * NoV) * NoV + a2);\nfloat lambdaL = NoV * sqrt((NoL - a2 * NoL) * NoL + a2);\nfloat v = 0.5 / (lambdaV + lambdaL);\nreturn v;\n}\n\nfloat F_Schlick(float f0, float f90, float VoH) {\nreturn f0 + (f90 - f0) * Pow5(1.0 - VoH);\n}\n\nvec3 F_Schlick(const vec3 f0, float f90, float VoH) {\nreturn f0 + (f90 - f0) * Pow5(1.0 - VoH);\n}\n\nvec3 Filament_fresnel(const vec3 f0, float LoH) {\nfloat f90 = saturate(dot(f0, vec3(50.0 * 0.33)));\nreturn F_Schlick(f0, f90, LoH);\n}\n\nvec3 diffuseLobe(const vec3 f0, float NoV, float NoL, float LoH) {\nreturn f0 / PI;\n}\n\nvec3 specularLobe(Light light, float lightroughness, const vec3 h, float NoV, float NoL, float NoH, float LoH, const vec3 f0) {\nfloat D = Filament_D_GGX(lightroughness, NoH);\nfloat V = V_SmithGGXCorrelated(lightroughness, NoV, NoL);\nvec3  F = Filament_fresnel(f0, LoH);\nreturn (D * V) * F;\n}\n\nvec3 MatchLight_surfaceShading(Light light, float lightroughness, vec3 N, vec3 V, const vec3 f0, const vec3 f0_diff) {\nvec3 h = normalize(V + light.l);\n\nfloat NoV = dot(N, V);\nfloat NoL = light.NoL;\nfloat NoH = clamp(dot(N, h), 0.0001, 1.0);\nfloat LoH = clamp(dot(light.l, h), 0.0001, 1.0);\n\nvec3 Fr = specularLobe(light, lightroughness, h, NoV, NoL, NoH, LoH, f0);\nvec3 Fd = diffuseLobe(f0_diff, NoV, NoL, LoH);\n\nvec3 color = Fd + Fr /* pixel.energyCompensation*/;\nreturn (color * light.colorIntensity.rgb) *\n(light.colorIntensity.w * light.attenuation * NoL /* occlusion*/);\n}\n#endif\n\nvec4 ReflectionPlaneCheck(mat4 rpmat, vec4 sumReflCol, vec3 reflectDir, vec2 offset, sampler2D texRefl, vec3 neyeDir, int i)\n{\nfloat rpdist = dot(rpmat[2].xyz,rpmat[3].xyz-vert);\nif (rpdist < 0.0)\n{\nrpdist /= dot(reflectDir,rpmat[2].xyz);\nif (rpdist > 0.0) {\nvec3 phit = vert+(rpdist*reflectDir)-rpmat[3].xyz;\nvec2 uvInPlane = vec2(dot(phit,rpmat[0].xyz), dot(phit,rpmat[1].xyz));\nif (uvInPlane.x>=0.0 && uvInPlane.x<=1.0 && uvInPlane.y>=0.0 && uvInPlane.y<=1.0) {\nvec4 reflCol = texture(texRefl, (0.5*uvInPlane)+offset);\nif ((uvInPlane.x < .01) || (uvInPlane.x > .99) ||(uvInPlane.y < .01) || (uvInPlane.y > .99)) {\nreflCol.a = 0.0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\nif (i < 2 && reflectionplanedynamicinfluence[i].x > 0.1) {\nvec3 reflectionplaneinfluencevec = vec3(reflectionplanedynamicinfluence[i+2].x, reflectionplanedynamicinfluence[i+2].y, reflectionplanedynamicinfluence[i+2].z);\nfloat reflectionplanestartfade	= reflectionplanedynamicinfluence[i].y;\nfloat reflectionplaneendfade	= reflectionplanedynamicinfluence[i].z;\nfloat dp = (1.0 + dot(neyeDir, reflectionplaneinfluencevec)) * 0.5;\nfloat influence = smoothstep(reflectionplaneendfade, reflectionplanestartfade, dp);\nreflCol.a *= influence;\n}\nsumReflCol.rgb += reflCol.rgb*reflCol.a;\nsumReflCol.a += reflCol.a;\n}\n}\n}\nreturn sumReflCol;\n}\n\nvec4 AddReflectionPlane(vec4 colResultRP, vec3 reflectDir, vec2 offset, vec3 neyeDir, int reflectionplanescalealpha, float scalespecular)\n{\nvec4 sumReflCol = vec4(0.0);\n#if AVOIDCONDITIONALUNIFORMS\n#if (NUM_REFLECTON_PLANES > 0)\nif (reflectionplanetexval.x != 0)\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[0], sumReflCol, reflectDir, offset, reflectionplaneTex2, neyeDir, 0);\nelse\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[0], sumReflCol, reflectDir, offset, reflectionplaneTex, neyeDir, 0);\nif (sumReflCol.a != 0.0) {\nsumReflCol.rgb /= sumReflCol.a;\nsumReflCol.a = clamp(sumReflCol.a, 0.0, 1.0);\nif (reflectionplanescalealpha == 0)\nreturn mix(colResultRP, vec4(reflectionplanescale*scalespecular*sumReflCol.rgb, 1.0), scalespecular * sumReflCol.a);\nreturn mix(colResultRP, vec4(reflectionplanescale * sumReflCol.rgb, 1.0), clamp(reflectionplanescale *scalespecular *sumReflCol.a, 0.0, 1.0));\n}\n#endif\n#else\nif (reflectionplanestotal > 0) {\nif (reflectionplanetexval.x != 0)\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[0], sumReflCol, reflectDir, offset, reflectionplaneTex2, neyeDir, 0);\nelse\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[0], sumReflCol, reflectDir, offset, reflectionplaneTex, neyeDir, 0);\nif (reflectionplanestotal > 1) {\nif (reflectionplanetexval.y != 0)\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[1], sumReflCol, reflectDir, offset, reflectionplaneTex2, neyeDir, 1);\nelse\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[1], sumReflCol, reflectDir, offset, reflectionplaneTex, neyeDir, 1);\n}\n}\nif (sumReflCol.a != 0.0) {\nsumReflCol.rgb /= sumReflCol.a;\nsumReflCol.a = clamp(sumReflCol.a, 0.0, 1.0);\nif (reflectionplanescalealpha == 0)\nreturn mix(colResultRP, vec4(reflectionplanescale*scalespecular*sumReflCol.rgb, 1.0), scalespecular*sumReflCol.a);\nreturn mix(colResultRP, vec4(reflectionplanescale*scalespecular*sumReflCol.rgb, 1.0), clamp(reflectionplanescale * scalespecular *sumReflCol.a, 0.0, 1.0));\n}\n#endif\nreturn colResultRP;\n}\n\nvec4 ReadRTGlossy(vec3 reflectDir, float roughness, vec3 neyeDir, int reflectionplanescalealpha, float reflectionplanescalespecular, float reflectionplaneroughness)\n{\nvec4 colA1, colB1;\nvec2 rpOffsetA1, rpOffsetB1;\nfloat mixAB1;\n#if AABBEnvironmentMapActive\nvec3 EnvBoxMin = vec3(envAABBMinX, envAABBMinY, envAABBMinZ);\nvec3 EnvBoxMax = vec3(envAABBMaxX, envAABBMaxY, envAABBMaxZ);\nvec3 EnvBoxPos = ((EnvBoxMax + EnvBoxMin) * 0.5);\n\nvec3 rbmax = (EnvBoxMax - vert)/reflectDir;\nvec3 rbmin = (EnvBoxMin - vert)/reflectDir;\nvec3 rbminmax;\nrbminmax.x = (reflectDir.x > 0.0) ? rbmax.x : rbmin.x;\nrbminmax.y = (reflectDir.y > 0.0) ? rbmax.y : rbmin.y;\nrbminmax.z = (reflectDir.z > 0.0) ? rbmax.z : rbmin.z;\nfloat fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);\nvec3 posonbox = vert + reflectDir*fa;\nreflectDir = posonbox - EnvBoxPos;\n#endif\n#if ComplexGlossyRead\nif (simpleintensity != 1)\n{\n#if mipmapenvmap\n\nfloat newRoughness = (8.0445 * roughness * roughness) + (1.76 * roughness) + 0.1638;\ncolA1 = texture(specularenv, reflectDir, newRoughness);\n#if extrabrightenvmap\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*256.0, 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\n#endif\ncolA1.rgb *= envScale;\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\n#endif\nreturn colA1;\n\n#else\nif (roughness <= mapblurlevel.r)\n{\ncolA1 = texture(specularenv, reflectDir, mipmapbiasEnv);\ncolB1 = texture(channelcache1cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = clamp((roughness-0.000000)/mapblurlevel.r, 0.0, 1.0);\nrpOffsetA1 = vec2(0.0);\nrpOffsetB1 = vec2(0.5, 0.0);\n}\nelse if (roughness <= mapblurlevel.g)\n{\ncolA1 = texture(channelcache1cubetexture, reflectDir, mipmapbiasEnv);\ncolB1 = texture(channelcache2cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = clamp((roughness-mapblurlevel.r)/(mapblurlevel.g-mapblurlevel.r), 0.0, 1.0);\nrpOffsetA1 = vec2(0.5, 0.0);\nrpOffsetB1 = vec2(0.0, 0.5);\n}\nelse\n{\ncolA1 = texture(channelcache2cubetexture, reflectDir, mipmapbiasEnv);\ncolB1 = texture(channelcache3cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = clamp((roughness-mapblurlevel.g)/(mapblurlevel.b-mapblurlevel.g), 0.0, 1.0);\nrpOffsetA1 = vec2(0.0, 0.5);\nrpOffsetB1 = vec2(0.5, 0.5);\n}\n#endif\n}\nelse\n#endif\n{\ncolA1 = colB1 = texture(channelcache3cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = 0.5;\nrpOffsetA1 = vec2(0.0);\nrpOffsetB1 = vec2(0.5, 0.0);\n}\n\n#if encodeenvmapsinmono\nif (colA1.b<1.0) colA1=vec4(vec3(colA1.r+colA1.g+colA1.b), 1.0);\nelse colA1=vec4(vec3(colA1.b+(1.0-colA1.r)+(1.0-colA1.g)+2.0), 1.0);\nif (colB1.b<1.0) colB1=vec4(vec3(colB1.r+colB1.g+colB1.b), 1.0);\nelse colB1=vec4(vec3(colB1.b+(1.0-colB1.r)+(1.0-colB1.g)+2.0), 1.0);\n#else\n#if extrabrightenvmap\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*256.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*256.0, 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\n#endif\n\n#endif\ncolA1.rgb *= envScale;\ncolB1.rgb *= envScale;\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\ncolB1.rgb = pow(colB1.rgb, vec3(gamma));\n#endif\n\nfloat reflplaneblur = clamp(reflectionplaneroughness * 3.0, 0.0, 2.99);\nfloat fBlurLevel = floor(reflplaneblur);\nfloat reflplanemix = reflplaneblur - fBlurLevel;\nif (fBlurLevel < .9){\nrpOffsetA1 = vec2(0.0);\nrpOffsetB1 = vec2(0.5, 0.0);\n} else if (fBlurLevel < 1.9){\nrpOffsetA1 = vec2(0.5, 0.0);\nrpOffsetB1 = vec2(0.0, 0.5);\n} else {\nrpOffsetA1 = vec2(0.0, 0.5);\nrpOffsetB1 = vec2(0.5, 0.5);\n}\n\n\nint alternativemix = hasIOR.a;\nif (alternativemix != 0) {\nif (reflectionplanestotal > 0) {\nvec4 glossySum = mix(colA1, colB1, mixAB1);\ncolA1 = AddReflectionPlane(vec4(0.0,0.0,0.0, 1.0), reflectDir, rpOffsetA1, neyeDir, reflectionplanescalealpha, reflectionplanescalespecular);\ncolB1 = AddReflectionPlane(vec4(0.0,0.0,0.0, 1.0), reflectDir, rpOffsetB1, neyeDir, reflectionplanescalealpha, reflectionplanescalespecular);\nif (simpleintensity != 1) {\nglossySum += mix(colA1, colB1, reflplanemix);\nreturn glossySum;\n}\n}\n}\nelse {\n\ncolA1 = AddReflectionPlane(colA1, reflectDir, rpOffsetA1, neyeDir, reflectionplanescalealpha, reflectionplanescalespecular);\ncolB1 = AddReflectionPlane(colB1, reflectDir, rpOffsetB1, neyeDir, reflectionplanescalealpha, reflectionplanescalespecular);\n}\n\n\nreturn mix(colA1, colB1, mixAB1);\n}\n\nvec4 ReadRTSpecular(vec3 reflectDir, float lod, float mixfac)\n{\n\nvec4 specularSum = vec4(0.0,0.0,0.0,1.0);\n\nvec4 colA1 = texture(specularenv, reflectDir, lod);\nvec4 colB1 = (mixfac > 0.01) ? texture(specularblurenv, reflectDir, lod) : colA1;\n\n\n#if encodeenvmapsinmono\nif (colA1.b<1.0) colA1=vec4(vec3(colA1.r+colA1.g+colA1.b), 1.0);\nelse colA1=vec4(vec3(colA1.b+(1.0-colA1.r)+(1.0-colA1.g)+2.0), 1.0);\nif (colB1.b<1.0) colB1=vec4(vec3(colB1.r+colB1.g+colB1.b), 1.0);\nelse colB1=vec4(vec3(colB1.b+(1.0-colB1.r)+(1.0-colB1.g)+2.0), 1.0);\n#else\n#if extrabrightenvmap\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*256.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*256.0, 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\n#endif\n#endif\ncolA1.rgb *= envScale;\ncolB1.rgb *= envScale;\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\ncolB1.rgb = pow(colB1.rgb, vec3(gamma));\n#endif\n\nspecularSum = mix(colA1, colB1, mixfac);\n\nreturn specularSum;\n}\n\nvoid main(void)\n{\nvec2 bumpflakesdata;\n\nfloat roughness = diffusecolor.a;\nfloat iorpower = intensitycolor.a;\nfloat invertreflectiony = intensitybcolor.a;\nbumpflakesdata.x = specularcolor.a;\nbumpflakesdata.y = mapblurlevel.a;\nfloat dualintensityfalloff = additionalcolor.a;\nfloat NormDerivThreshold = amboccBoost.a;\nfloat alphacolor = ior_R0.a;\nint reflectionplanescalealpha = ior_R0Flip.a;\nfloat reflectionplanescalespecular = cc_tint.a;\nfloat reflectionplaneroughness = glowbias.a;\n\nvec3 reflectDir;\nvec3 neyeDir = normalize(eyeDir);\nvec3 ngnorm = 0.9999*normalize(g_norm);\n\nif (sphericalwhirl != 0) {\nvec2 bumpValue = normalize(tex1.xy - vec2(0.5));\nfloat tmpX = bumpValue.x;\nbumpValue.x = bumpValue.y;\nbumpValue.y = -tmpX;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\nngnorm = normalize(ngnorm);\n}\nelse if (bumpTexData.x != 0) {\nvec3 bumpValue = ReadRTTexture(bumptexture, bumpTexData, bumpUVT, ngnorm, neyeDir).xyz;\nbumpValue = (bumpValue-0.498039)*2.0;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\nngnorm = normalize(ngnorm);\n}\nif (usebumpflakes != 0)\nngnorm = RT_Flakes(ngnorm, neyeDir, bumpflakesdata.x, bumpflakesdata.y);\n\nreflectDir = reflect(neyeDir, ngnorm);\nreflectDir = normalize(reflectDir);\nreflectDir.y *= invertreflectiony*planarReflFlip;\n\nvec3 dxTex = 0.5*dFdx(g_norm);\nvec3 dyTex = 0.5*dFdy(g_norm);\n\nfloat Curve = max(length(dxTex), length(dyTex));\n\nvec4 diffuseSum = vec4(0.0);\nvec4 diffuseScale = diffusecolor;\nif (dot(diffuseScale, diffuseScale) > 0.0) {\ndiffuseSum = vec4(1.0);\nif (uhasDiffuseEnv != 0) {\nvec3 diffnorm = ngnorm;\ndiffnorm.y *= planarReflFlip;\nvec4 diffuseSample = texture(diffuseenv, diffnorm, mipmapbiasEnv);\n#if encodeenvmapsinmono\nif (diffuseSample.b<1.0) diffuseSample=vec4(vec3(diffuseSample.r+diffuseSample.g+diffuseSample.b), 1.0);\nelse diffuseSample=vec4(vec3(diffuseSample.b+(1.0-diffuseSample.r)+(1.0-diffuseSample.g)+2.0), 1.0);\n#else\n#if extrabrightenvmap\ndiffuseSample = vec4(diffuseSample.rgb+(1.0-diffuseSample.a)*256.0, 1.0);\n#else\ndiffuseSample = vec4(diffuseSample.rgb+(1.0-diffuseSample.a)*64.0, 1.0);\n#endif\n#endif\ndiffuseSample.rgb *= envScale;\n#if hdribias\ndiffuseSample.rgb = pow(diffuseSample.rgb, vec3(gamma));\n#endif\ndiffuseSum = diffuseSample;\n}\nif (diffuseTexData.x != 0) {\nvec4 diffuseTexPixel = ReadRTTexture(diffusetexture, diffuseTexData, diffuseUVT, ngnorm, neyeDir);\nif ((linearworkflow == 2) || (gammaDiffAddTexs != 0))\ndiffuseTexPixel.rgb = pow(diffuseTexPixel.rgb, vec3(2.2));\ndiffuseScale *= diffuseTexPixel;\n}\ndiffuseSum *= diffuseScale;\n}\n\n\nfloat totRoughness = roughness;\nif (roughnessTexData.x != 0) {\ntotRoughness *= ReadRTTexture(roughnesstexture, roughnessTexData, roughnessUVT, ngnorm, neyeDir).r;\n}\nfloat fAcosAngle = clamp(-dot(neyeDir, ngnorm), 0.0, 1.0);\nvec4 glossySum = vec4(0.0);\nvec3 intensitySum = (dualintensitycolor != 0) ? mix(intensitybcolor.rgb, intensitycolor.rgb, pow(fAcosAngle, dualintensityfalloff)) : intensitycolor.rgb;\nif (dot(intensitySum, intensitySum) > 0.0) {\nglossySum = ReadRTGlossy(reflectDir, totRoughness*((1.0 - roughnessEdgeFac) * fAcosAngle + roughnessEdgeFac), neyeDir, reflectionplanescalealpha, reflectionplanescalespecular, reflectionplaneroughness);\nif (intensityTexData.x != 0) {\nvec3 intensityTexPixel = ReadRTTexture(intensitytexture, intensityTexData, intensityUVT, ngnorm, neyeDir).rgb;\nif (linearworkflow == 2)\nintensityTexPixel.rgb = pow(intensityTexPixel.rgb, vec3(2.2));\nintensitySum *= intensityTexPixel;\n}\nglossySum.rgb *= intensitySum;\n}\n\n\nfloat dotnd = dot(neyeDir, ngnorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nvec4 specularSum = vec4(0.0);\nvec4 specularScale = specularcolor;\nvec3 specularNorm;\nvec3 specularReflectDir;\nif (clearIgnoreBump == 1) {\nspecularNorm = normalize(g_norm);\nspecularReflectDir = normalize(reflect(neyeDir, specularNorm));\n}\nelse {\nspecularNorm = ngnorm;\nspecularReflectDir = reflectDir;\n}\nif (dot(specularScale, specularScale) > 0.0) {\n\n\n\n\n\n\n\n\n\n\n\n\n#if AABBEnvironmentMapActive\n\n\nvec3 EnvBoxMin = vec3(envAABBMinX, envAABBMinY, envAABBMinZ);\nvec3 EnvBoxMax = vec3(envAABBMaxX, envAABBMaxY, envAABBMaxZ);\nvec3 EnvBoxPos = ((EnvBoxMax + EnvBoxMin) * 0.5);\n\nvec3 rbmax = (EnvBoxMax - vert)/specularReflectDir;\nvec3 rbmin = (EnvBoxMin - vert)/specularReflectDir;\nvec3 rbminmax;\nrbminmax.x = (specularReflectDir.x > 0.0) ? rbmax.x : rbmin.x;\nrbminmax.y = (specularReflectDir.y > 0.0) ? rbmax.y : rbmin.y;\nrbminmax.z = (specularReflectDir.z > 0.0) ? rbmax.z : rbmin.z;\nfloat fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);\nvec3 posonbox = vert + specularReflectDir*fa;\nspecularReflectDir = posonbox - EnvBoxPos;\n#endif\n{\nfloat mixfac= clamp((Curve-(curveMin))/(curveMax-curveMin),0.0,1.0);\nspecularSum = ReadRTSpecular(specularReflectDir, mipmapbiasEnv, mixfac);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif (mixfac > 0.01){\nvec4 specularSumA = AddReflectionPlane(specularSum, specularReflectDir, vec2(0.0), neyeDir, reflectionplanescalealpha, 1.0);\nvec4 specularSumB = AddReflectionPlane(specularSum, specularReflectDir, vec2(0.5, 0.5), neyeDir, reflectionplanescalealpha, 1.0);\nspecularSum = mix(specularSumA, specularSumB, mixfac);\n} else {\nspecularSum = AddReflectionPlane(specularSum, specularReflectDir, vec2(0.0), neyeDir, reflectionplanescalealpha, 1.0);\n}\n}\nif (specularTexData.x != 0) {\nvec3 fAngVector = vec3(fAngVectorX, fAngVectorY, fAngVectorZ);\nspecularScale *= (specularTexData.y == 1) ? ReadRTTextureFAng(speculartexture, specularTexData, specularUVT, specularNorm, camzv, lvert, fAngVector) : ReadRTTexture(speculartexture, specularTexData, specularUVT, specularNorm, neyeDir);\n\n}\nspecularSum *= specularScale;\n}\n\n\n\n#if num_scene_lights > 0\nvec4 lightsSum = vec4(0.0);\nvec3 blackColor = vec3(0.0);\nfloat fStoredRoughness = pow(totRoughness, 1.0 / 3.0);\nfor (int lightIndex = 0; lightIndex < num_scene_lights; lightIndex++)\n{\nvec4 colorIntensity = ulights[lightIndex][1];\nif (colorIntensity.rgb == blackColor){\ncontinue;\n}\nvec4 positionFalloff = ulights[lightIndex][0];\nvec3 posToLight = positionFalloff.xyz - vert;\nif (dot(ngnorm, posToLight) < 0.0001)\ncontinue;\n\nvec4 directionIES = ulights[lightIndex][2];\nvec4 scaleOffsetShadowType = ulights[lightIndex][3];\n\nLight light;\nlight.l = normalize(posToLight);\nlight.attenuation = getDistanceAttenuation(posToLight, positionFalloff.w);\nlight.NoL = saturate(dot(ngnorm, light.l));\nif (scaleOffsetShadowType.w < 0.0)\nlight.attenuation *= getAngleAttenuation(-directionIES.xyz, light.l, scaleOffsetShadowType.xy);\nif (light.attenuation*(colorIntensity.r+colorIntensity.g+colorIntensity.b)*colorIntensity.w < 0.000333)\ncontinue;\nlight.colorIntensity.rgb = colorIntensity.rgb;\nlight.colorIntensity.w = colorIntensity.w;\nfloat light_roughness = fStoredRoughness + light_roughnessdelta[lightIndex];\n\nlightsSum.rgb += MatchLight_surfaceShading(light, light_roughness, ngnorm, -neyeDir, specularScale.rgb + intensitySum.rgb, diffuseScale.rgb);\n}\n#endif\n\n\nfloat powangle = pow(acos(-dotnd) / piDiv2, iorpower);\nif (hasIOR.x != 0)\n{\nfloat powangle_diffuse = powangle;\nif (ior_R0Flip.x == 1) powangle_diffuse = 1.0-powangle;\nfloat fresnelFactorDiffuse = ior_R0.x + (1.0 - ior_R0.x) * powangle_diffuse;\ndiffuseSum *= fresnelFactorDiffuse;\n}\nif (hasIOR.y != 0)\n{\nfloat powangle_Intensity = powangle;\nif (ior_R0Flip.y == 1) powangle_Intensity = 1.0-powangle;\nfloat fresnelFactorIntensity = ior_R0.y + (1.0 - ior_R0.y) * powangle_Intensity;\nglossySum *= fresnelFactorIntensity;\n}\nif (hasIOR.z != 0)\n{\nfloat powangle_Clear = powangle;\nif (clearIgnoreBump == 1)\n{\ndotnd = dot(neyeDir, specularNorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\npowangle_Clear = pow(acos(-dotnd) / piDiv2, iorpower);\n}\nif (ior_R0Flip.z == 1) powangle_Clear = 1.0-powangle_Clear;\nfloat fresnelFactorClear = ior_R0.z + (1.0 - ior_R0.z) * powangle_Clear;\nspecularSum *= fresnelFactorClear;\n#if num_scene_lights > 0\nlightsSum *= fresnelFactorClear;\n#endif\n}\n\n\nvec4 additionalSum = additionalcolor;\nif (additionalTexData.x != 0)\n{\nvec4 additionalTexPixel = ReadRTTexture(additionaltexture, additionalTexData, additionalUVT, ngnorm, neyeDir);\nif ((linearworkflow == 2) || (gammaDiffAddTexs != 0))\nadditionalTexPixel.rgb = pow(additionalTexPixel.rgb, vec3(2.2));\nadditionalSum *= additionalTexPixel;\n}\n\n\n#if amboccusevertcol\nvec4 ambOccSum = (diffuseSum + glossySum + specularSum) * (1.0-vcolor);\nFragColor = ambOccSum + additionalSum;\n#else\nif (amboccTexData.x != 0) {\nvec4 amboccScale = ReadRTTexture(ambocctexture, amboccTexData, amboccUVT, ngnorm, neyeDir);\nif (linearworkflow == 2)\namboccScale.rgb = pow(amboccScale.rgb, vec3(2.2));\n#if hasAmbOccTextureParam\nvec4 ambOccSum = diffuseSum + glossySum + specularSum;\nvec3 amboccParamValueInv = 1.0-amboccParamValue;\namboccScale = vec4(vec3(amboccParamValueInv.x*amboccParamValueInv.y*amboccScale.r+\namboccParamValue.x*amboccParamValueInv.y*amboccScale.g+\namboccParamValueInv.x*amboccParamValue.y*amboccScale.b+\namboccParamValue.x*amboccParamValue.y*amboccScale.a), 1.0);\nambOccSum *= amboccScale;\nFragColor = ambOccSum + additionalSum;\n#else\nFragColor = diffuseSum*pow(amboccScale, vec4(amboccBoost.x)) + glossySum*pow(amboccScale, vec4(amboccBoost.y)) + specularSum*pow(amboccScale, vec4(amboccBoost.z)) + additionalSum;\n#endif\n}\nelse\n{\nFragColor = diffuseSum + glossySum + specularSum + additionalSum;\n}\n#endif\n#if num_scene_lights > 0\nFragColor.rgb += lightsSum.rgb;\n#endif\n\n\n\n#if FadedReflectionsActive\nfloat fac = pow(clamp(fadedReflectionsScale*(vert.y + fadedReflectionsOffset), 0.0, 1.0), fadedReflectionsPow);\nFragColor.rgb = mix(FragColor.rgb, vec3(fadedReflectionsColorR, fadedReflectionsColorG, fadedReflectionsColorB), fac);\n#endif\n\nif (alphaTexData.x != 0)\n{\nFragColor.a = ReadRTTexture(alphatexture, alphaTexData, alphaUVT, ngnorm, neyeDir).x;\nFragColor.a *= alphacolor;\n#if hasBrightReflections\nif (decalalpha == 0)\nFragColor.rgb *= FragColor.a;\n#endif\n}\nelse\n{\nFragColor.a = alphacolor;\n}\n\n\n\n#if AVOIDCONDITIONALUNIFORMS\n#if HAS_PPEXISTENCE\nif (FragColor.a < 0.5)\ndiscard;\n#endif\n#else\nif (ppexistence != 0 && FragColor.a < 0.5)\ndiscard;\n#endif\n\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\nFragColor.rgb = funchighlight(FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\nFragColor.rgb = vec3(funcdscs315_1_red(FragColor.r), funcdscs315_1_green(FragColor.g), funcdscs315_1_blue(FragColor.b));\n#elif (camresponse == 306)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\n\nFragColor.rgb = vec3(funcdscs315_2_green(FragColor.r), funcdscs315_2_green(FragColor.g), funcdscs315_2_green(FragColor.b));\n#endif\n\nif (gamma != 1.0)\nFragColor.rgb = pow(FragColor.rgb, vec3(1.0/gamma));\n\n\n\n\n\n\nvec3 exp = (glowpass == 1) ? glowbias.rgb : exposure.rgb;\nif (refractionmode == 1) {\nFragColor.rgb *= exp.rgb;\n#if hasBrightReflections\nif (decalalpha != 0)\nFragColor.rgb *= FragColor.a;\n#endif\nreturn;\n}\n\nFragColor.rgb = exp.rgb*ApplyColorCorrection(FragColor.rgb);\n\nif (vignetting > 0.0)\nFragColor.rgb = FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n\n\n\n\n\n#if hasBrightReflections\nif (decalalpha != 0)\nFragColor.rgb *= FragColor.a;\n#endif\n}\n\nif (isSecondaryMat != 0){\nFragColor.a = FragColor.a * secondaryMatAlpha;\nFragColor.r = FragColor.r * secondaryMatAlpha;\nFragColor.g = FragColor.g * secondaryMatAlpha;\nFragColor.b = FragColor.b * secondaryMatAlpha;\n}\n\n#if OutputDoFDepth\nDepthValues = GetDepthValue();\n#endif\n\n}\n";var shaderes3_InfinityRT_Reflectivefs = "#define mipmapbiasEnv -1.0\n#define mipmapbias 0.0\n#define simpleintensity 0\n#define uhasDiffuseEnv 1\n#define PiDiv2 1.5707963267948966\n#define OneDivPi 0.3183098861837907\n\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nuniform vec3 diffusecolor;\nuniform vec3 intensitycolor;\nuniform vec3 intensitybcolor;\nuniform vec3 specularcolor;\nuniform vec3 mapblurlevel;\nuniform vec3 additionalcolor;\nuniform vec3 ior_R0;\nuniform float invertreflectiony;\nuniform float alphacolor;\nuniform float gamma;\nuniform float highlightcompression;\nuniform float vignetting;\nuniform float envScale;\nuniform ivec3 ior_R0Flip;\nuniform ivec3 hasIOR;\n\n\nuniform samplerCube diffuseenv;\nuniform samplerCube specularenv;\nuniform samplerCube specularblurenv;\nuniform samplerCube channelcache1cubetexture;\nuniform samplerCube channelcache2cubetexture;\nuniform samplerCube channelcache3cubetexture;\n\nuniform float roughness;\nuniform int decalalpha;\nuniform int ppexistence;\nuniform int dualintensitycolor;\nuniform float dualintensityfalloff;\nuniform float roughnessEdgeFac;\nuniform float iorpower;\nuniform vec3 exposure;\nuniform vec3 glowbias;\n\nuniform float cc_brightness;\nuniform float cc_contrast;\nuniform float cc_saturation;\nuniform vec3 cc_tint;\nuniform int glowpass;\nuniform int ColCorrAndCamResp;\n\nuniform float fadedReflectionsScale;\nuniform float fadedReflectionsOffset;\nuniform float fadedReflectionsPow;\nuniform vec3 fadedReflectionsColor;\nuniform float curveMax;\nuniform float curveMin;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\nin vec2 tex1;\nin vec2 tex2;\nin vec3 g_norm;\nin vec3 eyeDir;\nin vec3 vert;\nin vec3 lvert;\nin vec3 bu;\nin vec3 bv;\n\n\n\n#if OutputDoFDepth\nlayout(location = 0) out vec4 FragColor;\nlayout(location = 1) out vec4 DepthValues;\n#else\nout vec4 FragColor;\n#endif\n\n\n\nuniform BlockFrame {\nmat4 uMVPMatrix;\nvec4 uCamPos;\nvec2 jitter;\nvec2 viewportsize;\nfloat scenesize;\nfloat fovfactor;\nfloat planarReflFlip;\nmediump int aarefinecount;\n};\n\n\n\n\n\nvec3 spow(vec3 f0, vec3 f1)\n{\nreturn vec3((f0.x < 0.0) ? 0.0 : pow(f0.x, f1.x),\n(f0.y < 0.0) ? 0.0 : pow(f0.y, f1.y),\n(f0.z < 0.0) ? 0.0 : pow(f0.z, f1.z));\n}\n\nfloat spow(float f0, float f1)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn pow(f0, f1);\n}\n\nfloat ssqrt(float f0)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn sqrt(f0);\n}\n\nvec3 av(vec3 a, vec3 b)\n{\nreturn 0.5*(a + b);\n}\n\nvec3 funchighlight(vec3 v00, vec3 v01)\n{\nvec3 v02 = sqrt(v00);\nvec3 v03 = v01*v02;\nvec3 v04 = min(v02, v00);\nvec3 v05 = v04 - v03;\nvec3 v06 = av(v04, v05);\nvec3 v07 = av(v05, v06);\nvec3 v08 = av(v07, v02);\nvec3 v09 = min(v08, v00);\nreturn v09;\n}\n\nfloat funcdscs315_1_red(float v00)\n{\nfloat v01 = ssqrt(v00);\nfloat v02 = 0.571612;\nfloat v04 = v01 - v02;\nfloat v06 = 0.326853;\nfloat v07 = v04 + v01;\nfloat v08 = v06 + v07;\nfloat v10 = v04 + v08;\nfloat v13 = spow(v02, v10);\nfloat v15 = spow(v01, v13);\nreturn v15;\n}\n\nfloat funcdscs315_1_green(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = v01 + v00;\nfloat v04 = 0.207953;\nfloat v05 = 0.103824;\nfloat v06 = spow(v05, v02);\nfloat v07 = v06*v01;\nfloat v09 = spow(v04, v02);\nfloat v12 = spow(v05, v07);\nfloat v13 = spow(v12, v00);\nfloat v15 = v13 - v09;\nreturn v15;\n}\n\nfloat funcdscs315_1_blue(float v00)\n{\nfloat v01 = ssqrt(v00);\nfloat v02 = v00*v01;\nfloat v03 = v01 + v00;\nfloat v04 = spow(v02, v02);\nfloat v05 = -0.780725;\nfloat v07 = v04*v05;\nfloat v08 = v04 - v01;\nfloat v09 = v03*v02;\nfloat v11 = spow(v00, v07);\nfloat v12 = spow(v11, v08);\nfloat v14 = v09 - v03;\nfloat v16 = v08 - v14;\nfloat v18 = spow(v16, v12);\nfloat v23 = v07*v18;\nfloat v24 = spow(v11, v23);\nreturn v24;\n}\n\nfloat funcdscs315_2_red(float v00)\n{\nfloat v01 = v00*v00;\nfloat v02 = v01*v01;\nfloat v03 = v00 - v01;\nfloat v04 = 0.721305;\nfloat v05 = v04 - v03;\nfloat v07 = v00 + v03;\nfloat v09 = v02 + v05;\nfloat v10 = spow(v07, v09);\nreturn v10;\n}\n\nfloat funcdscs315_2_green(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = 0.067293;\nfloat v03 = 0.779595;\nfloat v05 = spow(v02, v01);\nfloat v06 = v01*v05;\nfloat v07 = spow(v06, v03);\nfloat v09 = spow(v07, v05);\nreturn v09;\n}\n\nfloat funcdscs315_2_blue(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = spow(v00, v01);\nfloat v03 = spow(v02, v02);\nfloat v04 = v00 - v02;\nfloat v05 = spow(v03, v02);\nfloat v06 = 0.796991;\nfloat v07 = v04 + v05;\nfloat v08 = spow(v07, v06);\nreturn v08;\n}\n\nvec3 ApplyInputCC(vec3 col, vec4 inputCC)\n{\n\nif (inputCC.a != 1.0)\ncol = pow(col, vec3(1.0 / inputCC.a));\n\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + inputCC.b * (col - rgbGrey);\nreturn ((rgbSat - 0.5) * inputCC.g + 0.5) + inputCC.r;\n}\n\n\nvec3 ApplyColorCorrection(vec3 col)\n{\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + cc_saturation * (col - rgbGrey);\nreturn ((rgbSat-0.5) * cc_contrast + 0.5) * cc_tint.rgb + cc_brightness;\n}\n\nfloat saturate(float x)\n{\nreturn clamp(x, 0.0, 1.0);\n}\nfloat Pow5(float x)\n{\nfloat xx = x*x;\nreturn xx * xx * x;\n}\n\nvec3 Pow5(vec3 x)\n{\nvec3 xx = x*x;\nreturn xx * xx * x;\n}\n\n\n\n\n\n#if num_scene_lights > 0\nuniform BlockLights {\nmat4 ulights[num_scene_lights];\nfloat light_roughnessdelta[num_scene_lights];\n};\nconst float PI = 3.1415926535897932;\n\n\n\n\nstruct Light {\nvec4 colorIntensity;\nvec3 l;\nfloat attenuation;\nfloat NoL;\n};\n\nfloat getSquareFalloffAttenuation(float distanceSquare, float falloff) {\nfloat factor = distanceSquare * falloff;\nfloat smoothFactor = saturate(1.0 - factor * factor);\nreturn smoothFactor * smoothFactor;\n}\n\nfloat getDistanceAttenuation(const /*highp*/ vec3 posToLight, float falloff) {\nfloat distanceSquare = dot(posToLight, posToLight);\nfloat attenuation = getSquareFalloffAttenuation(distanceSquare, falloff);\nreturn attenuation * 1.0 / max(distanceSquare, 1e-4);\n}\n\nfloat getAngleAttenuation(const vec3 lightDir, const vec3 l, const vec2 scaleOffset) {\nfloat cd = dot(lightDir, l);\nfloat attenuation = saturate(cd * scaleOffset.x + scaleOffset.y);\nreturn attenuation * attenuation;\n}\n\nfloat Filament_D_GGX(float roughness, float NoH) {\nfloat oneMinusNoHSquared = 1.0 - NoH * NoH;\nfloat a = NoH * roughness;\nfloat k = roughness / (oneMinusNoHSquared + a * a);\nfloat d = k * k * OneDivPi;\nreturn d;\n}\n\nfloat V_SmithGGXCorrelated(float roughness, float NoV, float NoL) {\nfloat a2 = roughness * roughness;\nfloat lambdaV = NoL * sqrt((NoV - a2 * NoV) * NoV + a2);\nfloat lambdaL = NoV * sqrt((NoL - a2 * NoL) * NoL + a2);\nfloat v = 0.5 / (lambdaV + lambdaL);\nreturn v;\n}\n\nfloat F_Schlick(float f0, float f90, float VoH) {\nreturn f0 + (f90 - f0) * Pow5(1.0 - VoH);\n}\n\nvec3 F_Schlick(const vec3 f0, float f90, float VoH) {\nreturn f0 + (f90 - f0) * Pow5(1.0 - VoH);\n}\n\nvec3 Filament_fresnel(const vec3 f0, float LoH) {\nfloat f90 = saturate(dot(f0, vec3(50.0 * 0.33)));\nreturn F_Schlick(f0, f90, LoH);\n}\n\nvec3 diffuseLobe(const vec3 f0, float NoV, float NoL, float LoH) {\nreturn f0 / PI;\n}\n\nvec3 specularLobe(Light light, float lightroughness, const vec3 h, float NoV, float NoL, float NoH, float LoH, const vec3 f0) {\nfloat D = Filament_D_GGX(lightroughness, NoH);\nfloat V = V_SmithGGXCorrelated(lightroughness, NoV, NoL);\nvec3  F = Filament_fresnel(f0, LoH);\nreturn (D * V) * F;\n}\n\nvec3 MatchLight_surfaceShading(Light light, float lightroughness, vec3 N, vec3 V, const vec3 f0, const vec3 f0_diff) {\nvec3 h = normalize(V + light.l);\n\nfloat NoV = dot(N, V);\nfloat NoL = light.NoL;\nfloat NoH = clamp(dot(N, h), 0.0001, 1.0);\nfloat LoH = clamp(dot(light.l, h), 0.0001, 1.0);\n\nvec3 Fr = specularLobe(light, lightroughness, h, NoV, NoL, NoH, LoH, f0);\nvec3 Fd = diffuseLobe(f0_diff, NoV, NoL, LoH);\n\nvec3 color = Fd + Fr /* pixel.energyCompensation*/;\nreturn (color * light.colorIntensity.rgb) *\n(light.colorIntensity.w * light.attenuation * NoL /* occlusion*/);\n}\n#endif\n\n\nvec4 ReadRTGlossy(vec3 reflectDir, float roughness)\n{\nvec4 colA1, colB1;\nvec2 rpOffsetA1, rpOffsetB1;\nfloat mixAB1;\n#if ComplexGlossyRead\nif (simpleintensity != 1)\n{\n#if mipmapenvmap\n\nfloat newRoughness = (8.0445 * roughness * roughness) + (1.76 * roughness) + 0.1638;\ncolA1 = texture(specularenv, reflectDir, newRoughness);\n#if extrabrightenvmap\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*256.0, 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\n#endif\ncolA1.rgb *= envScale;\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\n#endif\nreturn colA1;\n\n#else\n\nif (roughness <= mapblurlevel.r)\n{\ncolA1 = texture(specularenv, reflectDir, mipmapbiasEnv);\ncolB1 = texture(channelcache1cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = clamp((roughness-0.000000)/mapblurlevel.r, 0.0, 1.0);\nrpOffsetA1 = vec2(0.0);\nrpOffsetB1 = vec2(0.5, 0.0);\n}\nelse if (roughness <= mapblurlevel.g)\n{\ncolA1 = texture(channelcache1cubetexture, reflectDir, mipmapbiasEnv);\ncolB1 = texture(channelcache2cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = clamp((roughness-mapblurlevel.r)/(mapblurlevel.g-mapblurlevel.r), 0.0, 1.0);\nrpOffsetA1 = vec2(0.5, 0.0);\nrpOffsetB1 = vec2(0.0, 0.5);\n}\nelse\n{\ncolA1 = texture(channelcache2cubetexture, reflectDir, mipmapbiasEnv);\ncolB1 = texture(channelcache3cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = clamp((roughness-mapblurlevel.g)/(mapblurlevel.b-mapblurlevel.g), 0.0, 1.0);\nrpOffsetA1 = vec2(0.0, 0.5);\nrpOffsetB1 = vec2(0.5, 0.5);\n}\n\n#endif\n}\nelse\n#endif\n{\ncolA1 = colB1 = texture(channelcache3cubetexture, reflectDir, mipmapbiasEnv);\nmixAB1 = 0.5;\nrpOffsetA1 = vec2(0.0);\nrpOffsetB1 = vec2(0.5, 0.0);\n}\n#if encodeenvmapsinmono\nif (colA1.b<1.0) colA1=vec4(vec3(colA1.r+colA1.g+colA1.b), 1.0);\nelse colA1=vec4(vec3(colA1.b+(1.0-colA1.r)+(1.0-colA1.g)+2.0), 1.0);\nif (colB1.b<1.0) colB1=vec4(vec3(colB1.r+colB1.g+colB1.b), 1.0);\nelse colB1=vec4(vec3(colB1.b+(1.0-colB1.r)+(1.0-colB1.g)+2.0), 1.0);\n#else\n#if extrabrightenvmap\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*256.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*256.0, 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\n#endif\n#endif\ncolA1.rgb *= envScale;\ncolB1.rgb *= envScale;\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\ncolB1.rgb = pow(colB1.rgb, vec3(gamma));\n#endif\nreturn mix(colA1, colB1, mixAB1);\n}\n\nvec4 ReadRTSpecular(vec3 reflectDir, float lod, float mixfac)\n{\n\nvec4 specularSum = vec4(0.0,0.0,0.0,1.0);\n\nvec4 colA1 = texture(specularenv, reflectDir, lod);\nvec4 colB1 = (mixfac > 0.01) ? texture(specularblurenv, reflectDir, lod) : colA1;\n\n\n#if encodeenvmapsinmono\nif (colA1.b<1.0) colA1=vec4(vec3(colA1.r+colA1.g+colA1.b), 1.0);\nelse colA1=vec4(vec3(colA1.b+(1.0-colA1.r)+(1.0-colA1.g)+2.0), 1.0);\nif (colB1.b<1.0) colB1=vec4(vec3(colB1.r+colB1.g+colB1.b), 1.0);\nelse colB1=vec4(vec3(colB1.b+(1.0-colB1.r)+(1.0-colB1.g)+2.0), 1.0);\n#else\n#if extrabrightenvmap\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*256.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*256.0, 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\n#endif\n#endif\ncolA1.rgb *= envScale;\ncolB1.rgb *= envScale;\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\ncolB1.rgb = pow(colB1.rgb, vec3(gamma));\n#endif\n\nspecularSum = mix(colA1, colB1, mixfac);\n\nreturn specularSum;\n}\n\nvoid main(void)\n{\nvec3 reflectDir;\nvec3 neyeDir = normalize(eyeDir);\nvec3 ngnorm = 0.9999*normalize(g_norm);\n\nreflectDir = reflect(neyeDir, ngnorm);\nreflectDir = normalize(reflectDir);\nreflectDir.y *= invertreflectiony*planarReflFlip;\n\nvec3 dxTex = 0.5*dFdx(g_norm);\nvec3 dyTex = 0.5*dFdy(g_norm);\n\nfloat Curve = max(length(dxTex), length(dyTex));\n\n\nvec4 diffuseSum = vec4(0.0);\nvec4 diffuseScale = vec4(diffusecolor, 1.0);\n\nif (dot(diffuseScale, diffuseScale) > 0.0) {\ndiffuseSum = vec4(1.0);\n\nvec3 diffnorm = ngnorm;\ndiffnorm.y *= planarReflFlip;\nvec4 diffuseSample = texture(diffuseenv, diffnorm, mipmapbiasEnv);\n\n#if encodeenvmapsinmono\nif (diffuseSample.b<1.0) diffuseSample=vec4(vec3(diffuseSample.r+diffuseSample.g+diffuseSample.b), 1.0);\nelse diffuseSample=vec4(vec3(diffuseSample.b+(1.0-diffuseSample.r)+(1.0-diffuseSample.g)+2.0), 1.0);\n#else\n#if extrabrightenvmap\ndiffuseSample = vec4(diffuseSample.rgb+(1.0-diffuseSample.a)*256.0, 1.0);\n#else\ndiffuseSample = vec4(diffuseSample.rgb+(1.0-diffuseSample.a)*64.0, 1.0);\n#endif\n#endif\ndiffuseSample.rgb *= envScale;\n#if hdribias\ndiffuseSample.rgb = pow(diffuseSample.rgb, vec3(gamma));\n#endif\ndiffuseSum = diffuseSample;\n\ndiffuseSum *= diffuseScale;\n}\n\n\nfloat totRoughness = roughness;\n\nfloat fAcosAngle = clamp(-dot(neyeDir, ngnorm), 0.0, 1.0);\nvec4 glossySum = vec4(0.0);\nvec3 intensitySum = (dualintensitycolor != 0) ? mix(intensitybcolor.rgb, intensitycolor.rgb, pow(fAcosAngle, dualintensityfalloff)) : intensitycolor.rgb;\nif (dot(intensitySum, intensitySum) > 0.0) {\nglossySum = ReadRTGlossy(reflectDir, totRoughness*((1.0 - roughnessEdgeFac) * fAcosAngle + roughnessEdgeFac));\nglossySum.rgb *= intensitySum;\n}\n\n\nfloat dotnd = dot(neyeDir, ngnorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nvec4 specularSum = vec4(0.0);\nvec4 specularScale = vec4(specularcolor, 1.0);\nvec3 specularNorm = normalize(g_norm);\nvec3 specularReflectDir = normalize(reflect(neyeDir, specularNorm));\nif (dot(specularScale, specularScale) > 0.0) {\n{\nfloat mixfac= clamp((Curve-(curveMin))/(curveMax-curveMin),0.0,1.0);\nspecularSum = ReadRTSpecular(specularReflectDir, mipmapbiasEnv, mixfac);\n\n}\nspecularSum *= specularScale;\n}\n\n#if num_scene_lights > 0\nvec4 lightsSum = vec4(0.0);\nvec3 blackColor = vec3(0.0);\nfloat fStoredRoughness = pow(totRoughness, 1.0 / 3.0);\nfor (int lightIndex = 0; lightIndex < num_scene_lights; lightIndex++)\n{\nvec4 colorIntensity = ulights[lightIndex][1];\nif (colorIntensity.rgb == blackColor){\ncontinue;\n}\nvec4 positionFalloff = ulights[lightIndex][0];\nvec3 posToLight = positionFalloff.xyz - vert;\nif (dot(ngnorm, posToLight) < 0.0001)\ncontinue;\n\nvec4 directionIES = ulights[lightIndex][2];\nvec4 scaleOffsetShadowType = ulights[lightIndex][3];\n\nLight light;\nlight.l = normalize(posToLight);\nlight.attenuation = getDistanceAttenuation(posToLight, positionFalloff.w);\nlight.NoL = saturate(dot(ngnorm, light.l));\nif (scaleOffsetShadowType.w < 0.0)\nlight.attenuation *= getAngleAttenuation(-directionIES.xyz, light.l, scaleOffsetShadowType.xy);\nif (light.attenuation*(colorIntensity.r+colorIntensity.g+colorIntensity.b)*colorIntensity.w < 0.000333)\ncontinue;\nlight.colorIntensity.rgb = colorIntensity.rgb;\nlight.colorIntensity.w = colorIntensity.w;\nfloat light_roughness = fStoredRoughness + light_roughnessdelta[lightIndex];\n\nlightsSum.rgb += MatchLight_surfaceShading(light, light_roughness, ngnorm, -neyeDir, specularScale.rgb + intensitySum.rgb, diffuseScale.rgb);\n}\n#endif\n\n\nfloat powangle = pow(acos(-dotnd) / PiDiv2, iorpower);\nif (hasIOR.x != 0)\n{\nfloat powangle_diffuse = powangle;\nif (ior_R0Flip.x == 1) powangle_diffuse = 1.0-powangle;\nfloat fresnelFactorDiffuse = ior_R0.x + (1.0 - ior_R0.x) * powangle_diffuse;\ndiffuseSum *= fresnelFactorDiffuse;\n}\nif (hasIOR.y != 0)\n{\nfloat powangle_Intensity = powangle;\nif (ior_R0Flip.y == 1) powangle_Intensity = 1.0-powangle;\nfloat fresnelFactorIntensity = ior_R0.y + (1.0 - ior_R0.y) * powangle_Intensity;\nglossySum *= fresnelFactorIntensity;\n}\nif (hasIOR.z != 0)\n{\nfloat powangle_Clear = powangle;\n{\ndotnd = dot(neyeDir, specularNorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\npowangle_Clear = pow(acos(-dotnd) / PiDiv2, iorpower);\n}\nif (ior_R0Flip.z == 1) powangle_Clear = 1.0-powangle_Clear;\nfloat fresnelFactorClear = ior_R0.z + (1.0 - ior_R0.z) * powangle_Clear;\nspecularSum *= fresnelFactorClear;\n#if num_scene_lights > 0\nlightsSum *= fresnelFactorClear;\n#endif\n}\n\n\nvec4 additionalSum = vec4(additionalcolor, 1.0);\n\n\nFragColor = diffuseSum + glossySum + specularSum + additionalSum;\n\n#if num_scene_lights > 0\nFragColor.rgb += lightsSum.rgb;\n#endif\n\n\n#if FadedReflectionsActive\nfloat fac = pow(clamp(fadedReflectionsScale*(vert.y + fadedReflectionsOffset), 0.0, 1.0), fadedReflectionsPow);\nFragColor.rgb = mix(FragColor.rgb, fadedReflectionsColor, fac);\n#endif\n\nFragColor.a = alphacolor;\n\n\n\n#if AVOIDCONDITIONALUNIFORMS\n#if HAS_PPEXISTENCE\nif (FragColor.a < 0.5)\ndiscard;\n#endif\n#else\nif (ppexistence != 0 && FragColor.a < 0.5)\ndiscard;\n#endif\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\nFragColor.rgb = funchighlight(FragColor.rgb, vec3(highlightcompression));\n#if (camresponse == 305)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\nFragColor.rgb = vec3(funcdscs315_1_red(FragColor.r), funcdscs315_1_green(FragColor.g), funcdscs315_1_blue(FragColor.b));\n#elif (camresponse == 306)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\n\nFragColor.rgb = vec3(funcdscs315_2_green(FragColor.r), funcdscs315_2_green(FragColor.g), funcdscs315_2_green(FragColor.b));\n#endif\nif (gamma != 1.0)\nFragColor.rgb = pow(FragColor.rgb, vec3(1.0/gamma));\n\nvec3 exp = (glowpass == 1) ? glowbias.rgb : exposure.rgb;\n\nFragColor.rgb = exp.rgb*ApplyColorCorrection(FragColor.rgb);\n\nif (vignetting > 0.0)\nFragColor.rgb = FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n\n\n\n\n\n#if hasBrightReflections\nif (decalalpha != 0)\nFragColor.rgb *= FragColor.a;\n#endif\n}\n\nif (isSecondaryMat != 0){\nFragColor.a = FragColor.a * secondaryMatAlpha;\nFragColor.r = FragColor.r * secondaryMatAlpha;\nFragColor.g = FragColor.g * secondaryMatAlpha;\nFragColor.b = FragColor.b * secondaryMatAlpha;\n}\n\n#if OutputDoFDepth\nDepthValues = GetDepthValue();\n#endif\n}\n";var shaderes3_InfinityRT_Unlitfs = "#define piDiv2 1.5707963267948966\n#define OneDivPi 0.3183098861837907\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n\n\nuniform BlockUnlit {\nvec4 additionalcolor;\nvec4 cc_tint;\nvec4 exposure;\nvec4 glowbias;\nfloat fadedReflectionsScale;\nfloat fadedReflectionsOffset;\nfloat fadedReflectionsPow;\nfloat fadedReflectionsColorR;\nfloat fadedReflectionsColorG;\nfloat fadedReflectionsColorB;\n\nfloat mipmapbias;\n\nfloat highlightcompression;\nfloat vignetting;\nfloat cc_brightness;\nfloat cc_contrast;\nfloat cc_saturation;\nmat3 alphaUVT;\nmat3 additionalUVT;\nivec2 additionalTexData;\nivec2 alphaTexData;\nint gammaDiffAddTexs;\nint linearworkflow;\nint decalalpha;\nint ppexistence;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nuniform sampler2D alphatexture;\nuniform sampler2D additionaltexture;\n\n\nuniform int glowpass;\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\nin vec2 tex1;\nin vec2 tex2;\nin vec3 g_norm;\nin vec3 eyeDir;\nin vec3 vert;\nin vec3 lvert;\nin vec3 bu;\nin vec3 bv;\n\n\n\n#if OutputDoFDepth\nlayout(location = 0) out vec4 FragColor;\nlayout(location = 1) out vec4 DepthValues;\n#else\nout vec4 FragColor;\n#endif\n\n\nSIRT_BLOCKVERTEX_INSERT\n\nvec3 spow(vec3 f0, vec3 f1)\n{\nreturn vec3((f0.x < 0.0) ? 0.0 : pow(f0.x, f1.x),\n(f0.y < 0.0) ? 0.0 : pow(f0.y, f1.y),\n(f0.z < 0.0) ? 0.0 : pow(f0.z, f1.z));\n}\n\nfloat spow(float f0, float f1)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn pow(f0, f1);\n}\n\nfloat ssqrt(float f0)\n{\nif (f0 < 0.0)\nreturn 0.0;\nreturn sqrt(f0);\n}\n\nvec3 av(vec3 a, vec3 b)\n{\nreturn 0.5*(a + b);\n}\n\n\nvec3 funchighlight(vec3 v00, vec3 v01)\n{\nvec3 v02 = sqrt(v00);\nvec3 v03 = v01*v02;\nvec3 v04 = min(v02, v00);\nvec3 v05 = v04 - v03;\nvec3 v06 = av(v04, v05);\nvec3 v07 = av(v05, v06);\nvec3 v08 = av(v07, v02);\nvec3 v09 = min(v08, v00);\nreturn v09;\n}\n\nfloat funcdscs315_1_red(float v00)\n{\nfloat v01 = ssqrt(v00);\nfloat v02 = 0.571612;\nfloat v04 = v01 - v02;\nfloat v06 = 0.326853;\nfloat v07 = v04 + v01;\nfloat v08 = v06 + v07;\nfloat v10 = v04 + v08;\nfloat v13 = spow(v02, v10);\nfloat v15 = spow(v01, v13);\nreturn v15;\n}\n\nfloat funcdscs315_1_green(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = v01 + v00;\nfloat v04 = 0.207953;\nfloat v05 = 0.103824;\nfloat v06 = spow(v05, v02);\nfloat v07 = v06*v01;\nfloat v09 = spow(v04, v02);\nfloat v12 = spow(v05, v07);\nfloat v13 = spow(v12, v00);\nfloat v15 = v13 - v09;\nreturn v15;\n}\n\nfloat funcdscs315_1_blue(float v00)\n{\nfloat v01 = ssqrt(v00);\nfloat v02 = v00*v01;\nfloat v03 = v01 + v00;\nfloat v04 = spow(v02, v02);\nfloat v05 = -0.780725;\nfloat v07 = v04*v05;\nfloat v08 = v04 - v01;\nfloat v09 = v03*v02;\nfloat v11 = spow(v00, v07);\nfloat v12 = spow(v11, v08);\nfloat v14 = v09 - v03;\nfloat v16 = v08 - v14;\nfloat v18 = spow(v16, v12);\nfloat v23 = v07*v18;\nfloat v24 = spow(v11, v23);\nreturn v24;\n}\n\nfloat funcdscs315_2_red(float v00)\n{\nfloat v01 = v00*v00;\nfloat v02 = v01*v01;\nfloat v03 = v00 - v01;\nfloat v04 = 0.721305;\nfloat v05 = v04 - v03;\nfloat v07 = v00 + v03;\nfloat v09 = v02 + v05;\nfloat v10 = spow(v07, v09);\nreturn v10;\n}\n\nfloat funcdscs315_2_green(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = 0.067293;\nfloat v03 = 0.779595;\nfloat v05 = spow(v02, v01);\nfloat v06 = v01*v05;\nfloat v07 = spow(v06, v03);\nfloat v09 = spow(v07, v05);\nreturn v09;\n}\n\nfloat funcdscs315_2_blue(float v00)\n{\nfloat v01 = v00 + v00;\nfloat v02 = spow(v00, v01);\nfloat v03 = spow(v02, v02);\nfloat v04 = v00 - v02;\nfloat v05 = spow(v03, v02);\nfloat v06 = 0.796991;\nfloat v07 = v04 + v05;\nfloat v08 = spow(v07, v06);\nreturn v08;\n}\n\nvec3 ApplyInputCC(vec3 col, vec4 inputCC)\n{\n\nif (inputCC.a != 1.0)\ncol = pow(col, vec3(1.0 / inputCC.a));\n\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + inputCC.b * (col - rgbGrey);\nreturn ((rgbSat - 0.5) * inputCC.g + 0.5) + inputCC.r;\n}\n\nvec4 ReadRTTexture(sampler2D texSampler, ivec2 texData, mat3 texUVT, vec3 N, vec3 E)\n{\nif (texData.y == 0)\n{\nreturn texture(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\n}\nelse if (texData.y == 7)\n{\nreturn texture(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias).rrrr;\n}\nelse if (texData.y == 8)\n{\nreturn texture(texSampler, (texUVT*vec3(tex2, 1.0)).xy, mipmapbias);\n}\nelse if (texData.y == 9)\n{\nreturn texture(texSampler, (texUVT*vec3(tex2, 1.0)).xy, mipmapbias).rrrr;\n}\nelse if (texData.y == 1)\n{\n\nfloat dotnd = dot(N, E);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat FAng = acos(-dotnd) / (3.14159625*0.5);\nreturn texture(texSampler, vec2(FAng, 0.5), mipmapbias);\n}\n#if extOESSD\nelse if (texData.y == 2 && aarefinecount == -1)\n{\n\nvec4 pix;\nvec2 dxTex = 0.5*dFdx(tex1);\nvec2 dyTex = 0.5*dFdy(tex1);\npix = texture(texSampler, (texUVT*vec3(tex1-dxTex-dyTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1+dxTex-dyTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1-dxTex+dyTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1+dxTex+dyTex, 1.0)).xy, mipmapbias);\npix *= 0.25;\nreturn pix;\n}\nelse if (texData.y == 3 && aarefinecount == -1)\n{\n\nvec4 pix;\nvec2 dxTex = 0.5*dFdx(tex1);\nvec2 dyTex = 0.5*dFdy(tex1);\n\npix = texture(texSampler, (texUVT*vec3(tex1-dyTex-dxTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1-dyTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1-dyTex+dxTex, 1.0)).xy, mipmapbias);\n\npix += texture(texSampler, (texUVT*vec3(tex1-dxTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1+dxTex, 1.0)).xy, mipmapbias);\n\npix += texture(texSampler, (texUVT*vec3(tex1+dyTex-dxTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1+dyTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1+dyTex+dxTex, 1.0)).xy, mipmapbias);\n\npix /= 9.0;\nreturn pix;\n}\nelse if (texData.y == 4 && aarefinecount == -1)\n{\n\nvec4 pix;\nvec2 dxTex = 0.5*dFdx(tex1);\nvec2 dyTex = 0.5*dFdy(tex1);\n\npix = 0.25*texture(texSampler, (texUVT*vec3(tex1 - dyTex - dxTex, 1.0)).xy, mipmapbias);\npix += 0.5*texture(texSampler, (texUVT*vec3(tex1 - dyTex, 1.0)).xy, mipmapbias);\npix += 0.25*texture(texSampler, (texUVT*vec3(tex1 - dyTex + dxTex, 1.0)).xy, mipmapbias);\n\npix += 0.5*texture(texSampler, (texUVT*vec3(tex1 - dxTex, 1.0)).xy, mipmapbias);\npix += texture(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\npix += 0.5*texture(texSampler, (texUVT*vec3(tex1 + dxTex, 1.0)).xy, mipmapbias);\n\npix += 0.25*texture(texSampler, (texUVT*vec3(tex1 + dyTex - dxTex, 1.0)).xy, mipmapbias);\npix += 0.5*texture(texSampler, (texUVT*vec3(tex1 + dyTex, 1.0)).xy, mipmapbias);\npix += 0.25*texture(texSampler, (texUVT*vec3(tex1 + dyTex + dxTex, 1.0)).xy, mipmapbias);\n\npix /= 4.0;\nreturn pix;\n}\n#endif\nelse if (texData.y == 5)\n{\n\nvec3 dir = normalize(vert);\nreturn texture(texSampler, vec2(atan(-dir.x, dir.z) * 0.15915494309, 1.0-(acos(dir.y) * 0.31830988618)), mipmapbias);\n}\nreturn texture(texSampler, (texUVT*vec3(tex1, 1.0)).xy, mipmapbias);\n}\n\n\nvec3 ApplyColorCorrection(vec3 col)\n{\nconst vec3 unitvector = vec3(0.577350269, 0.577350269, 0.577350269);\nvec3 rgbGrey = dot(col, unitvector) * unitvector;\nvec3 rgbSat = rgbGrey + cc_saturation * (col - rgbGrey);\nreturn ((rgbSat-0.5) * cc_contrast + 0.5) * cc_tint.rgb + cc_brightness;\n}\n\n#if OutputDoFDepth\nfloat linearize(float depth) {\nreturn -zfar * znear / (depth * (zfar - znear) - zfar);\n}\nvec4 GetDepthValue()\n{\nfloat dist = linearize(gl_FragCoord.z);\ndist = (dist - focalnear) / (focalfar - focalnear);\nif (dist > 0.5)\ndist = (pow((dist*2.0)-1.0, dofbias)+1.0)*0.5;\nelse\ndist = 0.5-(pow(((0.5-dist)*2.0), dofbias)*0.5);\nreturn vec4(vec3(clamp(dist, 0.0, 0.995)), 1.0);\n}\n#endif\n\n\nvoid main(void)\n{\nfloat alphacolor = exposure.a;\nfloat gamma = glowbias.a;\n\nvec3 neyeDir = normalize(eyeDir);\nvec3 ngnorm = 0.9999*normalize(g_norm);\n\n\n\n\n\n\n\n\n\n\n\n\nvec4 additionalSum = vec4(additionalcolor.rgb, 1.0);\nif (additionalTexData.x != 0)\n{\nvec4 additionalTexPixel = ReadRTTexture(additionaltexture, additionalTexData, additionalUVT, ngnorm, neyeDir);\nif ((linearworkflow == 2) || (gammaDiffAddTexs != 0))\nadditionalTexPixel.rgb = pow(additionalTexPixel.rgb, vec3(2.2));\nadditionalSum *= additionalTexPixel;\n}\n\nFragColor = additionalSum;\n\n#if FadedReflectionsActive\nfloat fac = pow(clamp(fadedReflectionsScale*(vert.y + fadedReflectionsOffset), 0.0, 1.0), fadedReflectionsPow);\n\nFragColor.rgb = mix(FragColor.rgb, vec3(fadedReflectionsColorR, fadedReflectionsColorG, fadedReflectionsColorB), fac);\n#endif\n\n\n\nif (alphaTexData.x != 0)\n{\nFragColor.a = ReadRTTexture(alphatexture, alphaTexData, alphaUVT, ngnorm, neyeDir).x;\nFragColor.a *= alphacolor;\n#if hasBrightReflections\nif (decalalpha == 0)\nFragColor.rgb *= FragColor.a;\n#endif\n}\nelse\n{\nFragColor.a = alphacolor;\n}\n\n#if AVOIDCONDITIONALUNIFORMS\n#if HAS_PPEXISTENCE\nif (FragColor.a < 0.5)\ndiscard;\n#endif\n#else\nif (ppexistence != 0 && FragColor.a < 0.5)\ndiscard;\n#endif\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\nFragColor.rgb = funchighlight(FragColor.rgb, vec3(highlightcompression));\n#if (camresponse == 305)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\nFragColor.rgb = vec3(funcdscs315_1_red(FragColor.r), funcdscs315_1_green(FragColor.g), funcdscs315_1_blue(FragColor.b));\n#elif (camresponse == 306)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\n\nFragColor.rgb = vec3(funcdscs315_2_green(FragColor.r), funcdscs315_2_green(FragColor.g), funcdscs315_2_green(FragColor.b));\n#endif\n\nif (gamma != 1.0)\nFragColor.rgb = pow(FragColor.rgb, vec3(1.0/gamma));\n\nvec3 exp = (glowpass == 1) ? glowbias.rgb : exposure.rgb;\nFragColor.rgb = exp.rgb*ApplyColorCorrection(FragColor.rgb);\n\nif (vignetting > 0.0)\nFragColor.rgb = FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n#if BUILDVERSION >= 423\n\n\n#endif\n\n#if hasBrightReflections\nif (decalalpha != 0)\nFragColor.rgb *= FragColor.a;\n#endif\n}\n\n#if OutputDoFDepth\nDepthValues = GetDepthValue();\n#endif\nif (isSecondaryMat != 0){\nFragColor.a = FragColor.a * secondaryMatAlpha;\nFragColor.r = FragColor.r * secondaryMatAlpha;\nFragColor.g = FragColor.g * secondaryMatAlpha;\nFragColor.b = FragColor.b * secondaryMatAlpha;\n}\n}\n";var shaderes3_InfinityRT_Match_Minifs = "#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nuniform BlockMatch {\nvec4 diffusecolor;\nvec4 intensitycolor;\nvec4 intensitybcolor;\nvec4 specularcolor;\nvec4 mapblurlevel;\nvec4 additionalcolor;\nvec4 amboccBoost;\nvec4 ior_R0;\nvec4 cc_tint;\n\nmat3 diffuseUVT;\nmat3 roughnessUVT;\nmat3 intensityUVT;\nmat3 specularUVT;\nmat3 alphaUVT;\n\nmat3 bumpUVT;\nmat3 additionalUVT;\nmat3 amboccUVT;\n\nfloat roughness;\nfloat envScale;\nfloat iorpower;\nfloat invertreflectiony;\nvec2 bumpflakesdata;\nfloat dualintensityfalloff;\nfloat NormDerivThreshold;\nfloat alphacolor;\nfloat bumpuserscale;\nfloat mipmapbias;\nfloat mipmapbiasEnv;\nfloat gamma;\nfloat highlightcompression;\n\nfloat vignetting;\nfloat cc_brightness;\nfloat cc_contrast;\nfloat cc_saturation;\nfloat reflectionplanescale;\nfloat roughnessEdgeFac;\nvec4 exposure;\nvec4 glowbias;\n\nivec4 ior_R0Flip;\nivec4 hasIOR;\nivec2 diffuseTexData;\nivec2 roughnessTexData;\nivec2 intensityTexData;\nivec2 specularTexData;\nivec2 additionalTexData;\nivec2 alphaTexData;\nivec2 amboccTexData;\nivec2 bumpTexData;\nivec2 reflectionplanetexval;\nint uhasDiffuseEnv;\nint usebumpflakes;\nint gammaDiffAddTexs;\nint linearworkflow;\nint simpleintensity;\nint dualintensitycolor;\nint sphericalwhirl;\nint decalalpha;\nint clearIgnoreBump;\nint refractionmode;\nint uhasLUTTexture;\nint reflectionplanestotal;\nint ppexistence;\n\n};\n\nuniform samplerCube diffuseenv;\nuniform samplerCube specularenv;\nuniform samplerCube channelcache3cubetexture;\nuniform sampler2D diffusetexture;\nuniform sampler2D roughnesstexture;\nuniform sampler2D intensitytexture;\nuniform sampler2D speculartexture;\nuniform sampler2D alphatexture;\nuniform sampler2D bumptexture;\nuniform sampler2D additionaltexture;\nuniform sampler2D ambocctexture;\nuniform sampler2D reflectionplaneTex;\nuniform sampler2D reflectionplaneTex2;\nuniform sampler2D lutTex;\n\nuniform mat4 reflectionplanematrix[2];\n\n#if hasAmbOccTextureParam\nuniform vec3 amboccParamValue;\n#endif\n\nin vec2 tex1;\nin vec2 tex2;\nin vec3 g_norm;\nin vec3 eyeDir;\nin vec3 vert;\nin vec3 bu;\nin vec3 bv;\n\nuniform int glowpass;\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\nout vec4 FragColor;\n\nSIRT_STANDARD_HEADER_MINI_INSERT\n\nvec4 ReflectionPlaneCheck(mat4 rpmat, vec4 sumReflCol, vec3 reflectDir, vec2 offset, sampler2D texRefl)\n{\nfloat rpdist = dot(rpmat[2].xyz,rpmat[3].xyz-vert);\nif (rpdist < 0.0)\n{\nrpdist /= dot(reflectDir,rpmat[2].xyz);\nif (rpdist > 0.0) {\nvec3 phit = vert+(rpdist*reflectDir)-rpmat[3].xyz;\nvec2 uvInPlane = vec2(dot(phit,rpmat[0].xyz), dot(phit,rpmat[1].xyz));\nif (uvInPlane.x>=0.0 && uvInPlane.x<=1.0 && uvInPlane.y>=0.0 && uvInPlane.y<=1.0) {\nvec4 reflCol = texture(texRefl, (0.5*uvInPlane)+offset);\nsumReflCol.rgb += reflCol.rgb*reflCol.a;\nsumReflCol.a += reflCol.a;\n}\n}\n}\nreturn sumReflCol;\n}\n\nvec4 AddReflectionPlane(vec4 colResultRP, vec3 reflectDir, vec2 offset)\n{\nvec4 sumReflCol = vec4(0.0);\nif (reflectionplanestotal > 0) {\nif (reflectionplanetexval.x != 0)\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[0], sumReflCol, reflectDir, offset, reflectionplaneTex2);\nelse\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[0], sumReflCol, reflectDir, offset, reflectionplaneTex);\nif (reflectionplanestotal > 1) {\nif (reflectionplanetexval.y != 0)\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[1], sumReflCol, reflectDir, offset, reflectionplaneTex2);\nelse\nsumReflCol = ReflectionPlaneCheck(reflectionplanematrix[1], sumReflCol, reflectDir, offset, reflectionplaneTex);\n}\n}\nif (sumReflCol.a != 0.0) {\nsumReflCol.rgb /= sumReflCol.a;\nsumReflCol.a = clamp(sumReflCol.a, 0.0, 1.0);\nreturn mix(colResultRP, vec4(reflectionplanescale*sumReflCol.rgb, 1.0), sumReflCol.a);\n}\nreturn colResultRP;\n}\n\nvec4 ReadRTGlossy(vec3 reflectDir, float roughness)\n{\nvec4 colA1 = texture(channelcache3cubetexture, reflectDir, mipmapbiasEnv);\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolA1.rgb *= envScale;\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\n#endif\ncolA1 = AddReflectionPlane(colA1, reflectDir, vec2(0.5, 0.0));\nreturn colA1;\n}\n\nvec4 ReadRTSpecular(vec3 reflectDir, float lod)\n{\nvec4 specularSum = texture(specularenv, reflectDir, lod);\nspecularSum = vec4(specularSum.rgb+(1.0-specularSum.a)*64.0, 1.0);\nspecularSum.rgb *= envScale;\n#if hdribias\nspecularSum.rgb = pow(specularSum.rgb, vec3(gamma));\n#endif\nreturn specularSum;\n}\n\nvoid main(void)\n{\nvec3 reflectDir;\nvec3 neyeDir = normalize(eyeDir);\nvec3 ngnorm = normalize(g_norm);\n\nif (bumpTexData.x != 0) {\nvec3 bumpValue = ReadRTTexture(bumptexture, bumpTexData, bumpUVT, ngnorm, neyeDir).xyz;\nbumpValue = (bumpValue-0.498039)*2.0;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\nngnorm = normalize(ngnorm);\n}\n\nreflectDir = reflect(neyeDir, ngnorm);\nreflectDir = normalize(reflectDir);\nreflectDir.y *= invertreflectiony;\n\n\nvec4 diffuseSum = vec4(1.0);\nvec4 diffuseScale = diffusecolor;\nif (uhasDiffuseEnv != 0) {\nvec4 diffuseSample = texture(diffuseenv, ngnorm, mipmapbiasEnv);\ndiffuseSample = vec4(diffuseSample.rgb+(1.0-diffuseSample.a)*64.0, 1.0);\ndiffuseSample.rgb *= envScale;\n#if hdribias\ndiffuseSample.rgb = pow(diffuseSample.rgb, vec3(gamma));\n#endif\ndiffuseSum = diffuseSample;\n}\nif (diffuseTexData.x != 0) {\nvec4 diffuseTexPixel = ReadRTTexture(diffusetexture, diffuseTexData, diffuseUVT, ngnorm, neyeDir);\nif ((linearworkflow == 2) || (gammaDiffAddTexs != 0))\ndiffuseTexPixel.rgb = pow(diffuseTexPixel.rgb, vec3(2.2));\ndiffuseScale *= diffuseTexPixel;\n}\ndiffuseSum *= diffuseScale;\n\n\nfloat totRoughness = roughness;\nif (roughnessTexData.x != 0) {\ntotRoughness *= ReadRTTexture(roughnesstexture, roughnessTexData, roughnessUVT, ngnorm, neyeDir).r;\n}\nfloat fAcosAngle = clamp(-dot(neyeDir, ngnorm), 0.0, 1.0);\nvec4 glossySum = ReadRTGlossy(reflectDir, totRoughness*((1.0 - roughnessEdgeFac) * fAcosAngle + roughnessEdgeFac));\nvec3 intensitySum = (dualintensitycolor != 0) ? mix(intensitybcolor.rgb, intensitycolor.rgb, pow(fAcosAngle, dualintensityfalloff)) : intensitycolor.rgb;\nif (intensityTexData.x != 0) {\nvec3 intensityTexPixel = ReadRTTexture(intensitytexture, intensityTexData, intensityUVT, ngnorm, neyeDir).rgb;\nif (linearworkflow == 2)\nintensityTexPixel.rgb = pow(intensityTexPixel.rgb, vec3(2.2));\nintensitySum *= intensityTexPixel;\n}\nglossySum.rgb *= intensitySum;\n\n\nvec3 specularNorm;\nvec3 specularReflectDir;\nif (clearIgnoreBump == 1) {\nspecularNorm = normalize(g_norm);\nspecularReflectDir = normalize(reflect(neyeDir, specularNorm));\n}\nelse {\nspecularNorm = ngnorm;\nspecularReflectDir = reflectDir;\n}\n\nfloat dotnd = dot(neyeDir, ngnorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\n\nvec4 specularSum = ReadRTSpecular(specularReflectDir, mipmapbiasEnv);\nspecularSum = AddReflectionPlane(specularSum, specularReflectDir, vec2(0.0));\nvec4 specularScale = specularcolor;\nif (specularTexData.x != 0)\nspecularScale *= ReadRTTexture(speculartexture, specularTexData, specularUVT, specularNorm, neyeDir);\nspecularSum *= specularScale;\n\n\nfloat powangle = pow(acos(-dotnd) / (3.14159625*0.5), iorpower);\nif (hasIOR.x != 0)\n{\nfloat powangle_diffuse = powangle;\nif (ior_R0Flip.x == 1) powangle_diffuse = 1.0-powangle;\nfloat fresnelFactorDiffuse = ior_R0.x + (1.0 - ior_R0.x) * powangle_diffuse;\ndiffuseSum *= fresnelFactorDiffuse;\n}\nif (hasIOR.y != 0)\n{\nfloat powangle_Intensity = powangle;\nif (ior_R0Flip.y == 1) powangle_Intensity = 1.0-powangle;\nfloat fresnelFactorIntensity = ior_R0.y + (1.0 - ior_R0.y) * powangle_Intensity;\nglossySum *= fresnelFactorIntensity;\n}\nif (hasIOR.z != 0)\n{\nfloat powangle_Clear = powangle;\nif (clearIgnoreBump == 1)\n{\ndotnd = dot(neyeDir, specularNorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\npowangle_Clear = pow(acos(-dotnd) / (3.14159625*0.5), iorpower);\n}\nif (ior_R0Flip.z == 1) powangle_Clear = 1.0-powangle_Clear;\nfloat fresnelFactorClear = ior_R0.z + (1.0 - ior_R0.z) * powangle_Clear;\nspecularSum *= fresnelFactorClear;\n}\n\n\nvec4 additionalSum = additionalcolor;\nif (additionalTexData.x != 0)\n{\nvec4 additionalTexPixel = ReadRTTexture(additionaltexture, additionalTexData, additionalUVT, ngnorm, neyeDir);\nif ((linearworkflow == 2) || (gammaDiffAddTexs != 0))\nadditionalTexPixel.rgb = pow(additionalTexPixel.rgb, vec3(2.2));\nadditionalSum *= additionalTexPixel;\n}\n\n\nif (amboccTexData.x != 0) {\nvec4 amboccScale = ReadRTTexture(ambocctexture, amboccTexData, amboccUVT, ngnorm, neyeDir);\nif (linearworkflow == 2)\namboccScale.rgb = pow(amboccScale.rgb, vec3(2.2));\n#if hasAmbOccTextureParam\nvec4 ambOccSum = diffuseSum + glossySum + specularSum;\nvec3 amboccParamValueInv = 1.0-amboccParamValue;\namboccScale = vec4(vec3(amboccParamValueInv.x*amboccParamValueInv.y*amboccScale.r+\namboccParamValue.x*amboccParamValueInv.y*amboccScale.g+\namboccParamValueInv.x*amboccParamValue.y*amboccScale.b+\namboccParamValue.x*amboccParamValue.y*amboccScale.a), 1.0);\nambOccSum *= amboccScale;\nFragColor = ambOccSum + additionalSum;\n#else\nFragColor = diffuseSum*pow(amboccScale, vec4(amboccBoost.x)) + glossySum*pow(amboccScale, vec4(amboccBoost.y)) + specularSum*pow(amboccScale, vec4(amboccBoost.z)) + additionalSum;\n#endif\n}\nelse\n{\nFragColor = diffuseSum + glossySum + specularSum + additionalSum;\n}\n\n\nif (alphaTexData.x != 0)\n{\nFragColor.a = ReadRTTexture(alphatexture, alphaTexData, alphaUVT, ngnorm, neyeDir).x;\nFragColor.a *= alphacolor;\n#if hasBrightReflections\nif (decalalpha == 0)\nFragColor.rgb *= FragColor.a;\n#endif\n}\nelse\n{\nFragColor.a = alphacolor;\n}\nif (ppexistence != 0 && FragColor.a < 0.5)\ndiscard;\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\nFragColor.rgb = funchighlight(FragColor.rgb, vec3(highlightcompression));\n\nif (gamma != 1.0)\nFragColor.rgb = pow(FragColor.rgb, vec3(1.0/gamma));\n\n#if BUILDVERSION < 423\nif (uhasLUTTexture != 0)\nFragColor.rgb = ApplyLUT(FragColor.rgb);\n#endif\n\nvec3 exp = (glowpass == 1) ? glowbias.rgb : exposure.rgb;\nif (refractionmode == 1) {\nFragColor.rgb *= exp.rgb;\n#if hasBrightReflections\nif (decalalpha != 0)\nFragColor.rgb *= FragColor.a;\n#endif\nreturn;\n}\n\nFragColor.rgb = exp.rgb*ApplyColorCorrection(FragColor.rgb);\n\nif (vignetting > 0.0)\nFragColor.rgb = FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n#if BUILDVERSION >= 423\nif (uhasLUTTexture != 0)\nFragColor.rgb = ApplyLUT(FragColor.rgb);\n#endif\n\n#if hasBrightReflections\nif (decalalpha != 0)\nFragColor.rgb *= FragColor.a;\n#endif\n}\nif (isSecondaryMat != 0){\nFragColor.a = FragColor.a * secondaryMatAlpha;\nFragColor.r = FragColor.r * secondaryMatAlpha;\nFragColor.g = FragColor.g * secondaryMatAlpha;\nFragColor.b = FragColor.b * secondaryMatAlpha;\n}\n}\n";var shaderes3_InfinityRT_Glassfs = "#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nuniform BlockGlass {\nvec4 specularcolor;\nvec4 basecolor;\nvec4 cc_tint;\nvec4 exposure;\nvec4 glowbias;\nfloat cc_brightness;\nfloat cc_contrast;\nfloat cc_saturation;\n\n\n\nfloat brdf_curve;\nfloat mipmapbias;\nfloat gamma;\nfloat highlightcompression;\nfloat vignetting;\nmat3 specularUVT;\nmat3 baseUVT;\nmat3 bumpUVT;\nivec2 specularTexData;\nivec2 baseTexData;\nivec2 bumpTexData;\nint refractionmode;\nint uhasLUTTexture;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nuniform samplerCube specularenv;\nuniform sampler2D speculartexture;\nuniform sampler2D basetexture;\nuniform sampler2D bumptexture;\n\n#if PlanarReflectPassActive\n\nuniform vec3 planarreflectstrength;\nuniform sampler2D texPlanarReflect;\n#endif\n\n\nuniform sampler2D lutTex;\n\nin vec2 tex1;\nin vec2 tex2;\nin vec3 g_norm;\nin vec3 eyeDir;\nin vec3 vert;\nin vec3 lvert;\nin vec3 bu;\nin vec3 bv;\n\n\nuniform int glowpass;\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\n#if OutputDoFDepth\nlayout(location = 0) out vec4 FragColor;\nlayout(location = 1) out vec4 DepthValues;\n#else\nout vec4 FragColor;\n#endif\n\nSIRT_STANDARD_HEADER_INSERT\n\nvoid main()\n{\nfloat bumpuserscale = specularcolor.a;\nfloat degree_0_specular = basecolor.a;;\nfloat degree_90_specular = cc_tint.a;\n\nvec3 reflectDir;\nvec3 neyeDir = normalize(eyeDir);\n\nvec3 ngnorm = g_norm;\nif (bumpTexData.x != 0) {\nvec3 bumpValue = (texture(bumptexture, (bumpUVT*vec3(tex1,1.0)).xy, mipmapbias).xyz-0.498039)*2.0;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\n}\nngnorm = normalize(ngnorm);\n\nreflectDir = reflect(neyeDir, ngnorm);\nreflectDir = normalize(reflectDir);\n\n\nvec4 specularSum = texture(specularenv, reflectDir);\n#if encodeenvmapsinmono\nif (specularSum.b<1.0) specularSum=vec4(vec3(specularSum.r+specularSum.g+specularSum.b), 1.0);\nelse specularSum=vec4(vec3(specularSum.b+(1.0-specularSum.r)+(1.0-specularSum.g)+2.0), 1.0);\n#else\nspecularSum = vec4(specularSum.rgb+(1.0-specularSum.a)*64.0, 1.0);\n#endif\n#if hdribias\nspecularSum.rgb = pow(specularSum.rgb, vec3(gamma));\n#endif\nvec4 specularScale = vec4(specularcolor.rgb, 1.0);\nif (specularTexData.x != 0)\nspecularScale *= ReadRTTexture(speculartexture, specularTexData, specularUVT, ngnorm, neyeDir);\nspecularSum *= specularScale;\n\nvec4 baseScale = vec4(basecolor.rgb, 1.0);\nif (baseTexData.x != 0)\nbaseScale *= ReadRTTexture(basetexture, baseTexData, baseUVT, ngnorm, neyeDir);\nspecularSum += baseScale;\n\nFragColor = specularSum;\n\n\nfloat dotnd = dot(neyeDir, ngnorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat angle = acos(-dotnd) / (3.14159625*0.5);\nfloat fresnelFactor = pow(angle, brdf_curve);\nFragColor.a = (fresnelFactor*degree_90_specular) + ((1.0-fresnelFactor)*degree_0_specular);\n#if hasBrightReflections\nFragColor.rgb *= FragColor.a;\n#endif\n\n#if PlanarReflectPassActive\nif (planarreflectstrength.r > 0.0 || planarreflectstrength.g > 0.0 || planarreflectstrength.b > 0.0)\n{\nfloat powangle = pow(angle, 3.0);\n#if compPlanarRefl\nvec4 colPlanarReflect = texture(texPlanarReflect, gl_FragCoord.xy / viewportsize);\nFragColor.rgb = mix(FragColor.rgb, colPlanarReflect.rgb, powangle*colPlanarReflect.a*planarreflectstrength.r);\n#else\nFragColor.rgb += powangle*planarreflectstrength.rgb*texture(texPlanarReflect, gl_FragCoord.xy/viewportsize).rgb;\n#endif\n}\n#endif\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\nFragColor.rgb = funchighlight(FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\nFragColor.rgb = vec3(funcdscs315_1_red(FragColor.r), funcdscs315_1_green(FragColor.g), funcdscs315_1_blue(FragColor.b));\n#elif (camresponse == 306)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\n\nFragColor.rgb = vec3(funcdscs315_2_green(FragColor.r), funcdscs315_2_green(FragColor.g), funcdscs315_2_green(FragColor.b));\n#endif\n\nif (gamma != 1.0)\nFragColor.rgb = pow(FragColor.rgb, vec3(1.0/gamma));\n\nvec3 exp = (glowpass == 1) ? glowbias.rgb : exposure.rgb;\nif (refractionmode == 1)\n{\nFragColor.rgb *= exp.rgb;\nreturn;\n}\n\n#if BUILDVERSION < 423\nif (uhasLUTTexture != 0)\nFragColor.rgb = ApplyLUT(FragColor.rgb);\n#endif\n\nFragColor.rgb = exp.rgb*ApplyColorCorrection(FragColor.rgb);\n\nif (vignetting > 0.0)\nFragColor.rgb = FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n#if BUILDVERSION >= 423\nif (uhasLUTTexture != 0)\nFragColor.rgb = ApplyLUT(FragColor.rgb);\n#endif\n}\n\n#if OutputDoFDepth\nDepthValues = GetDepthValue();\n#endif\nif (isSecondaryMat != 0){\nFragColor.a = FragColor.a * secondaryMatAlpha;\nFragColor.r = FragColor.r * secondaryMatAlpha;\nFragColor.g = FragColor.g * secondaryMatAlpha;\nFragColor.b = FragColor.b * secondaryMatAlpha;\n}\n}\n";var shaderes3_InfinityRT_Glass_Refractedfs = "#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nuniform samplerCube specularenv;\nuniform int uhasSpecularTexture;\nuniform sampler2D speculartexture;\nuniform mat3 specularUVT;\nuniform vec3 specularcolor;\n\nuniform int uhasBaseTexture;\nuniform sampler2D basetexture;\nuniform mat3 baseUVT;\nuniform vec3 basecolor;\n\nuniform ivec2 bumpTexData;\nuniform sampler2D bumptexture;\nuniform mat3 bumpUVT;\nuniform float bumpuserscale;\n\nuniform sampler2D refractiontexture;\nuniform float refractscale;\nuniform float refractthinness;\nuniform vec3 camx;\nuniform vec3 camy;\nuniform vec3 camz;\nuniform int uhasTransmissionTexture;\nuniform sampler2D transmissiontexture;\nuniform mat3 transmissionUVT;\nuniform vec3 transmissioncolor;\nuniform float ior_R0Intensity;\nuniform float ior_R0Clear;\nuniform int ior_R0IntensityFlip;\nuniform int ior_R0ClearFlip;\nuniform float brdf_curve;\n\nuniform float mipmapbias;\n\nuniform float gamma;\nuniform float highlightcompression;\nuniform int uhasLUTTexture;\nuniform sampler2D lutTex;\nuniform float vignetting;\n\nuniform vec3 exposure;\n\nin vec2 tex1;\nin vec2 tex2;\nin vec3 g_norm;\nin vec3 eyeDir;\nin vec3 vert;\nin vec3 lvert;\nin vec3 bu;\nin vec3 bv;\n\nuniform float cc_brightness;\nuniform float cc_contrast;\nuniform float cc_saturation;\nuniform vec3 cc_tint;\n\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\nuniform int hasIORIntensity;\nuniform int hasIORClear;\n\n#if has2ndRef\nuniform vec2 v2ndRef;\n#endif\n\n#if OutputDoFDepth\nlayout(location = 0) out vec4 FragColor;\nlayout(location = 1) out vec4 DepthValues;\n#else\nout vec4 FragColor;\n#endif\n\nSIRT_STANDARD_HEADER_INSERT\n\nvoid main()\n{\nvec3 reflectDir;\nvec3 neyeDir = normalize(eyeDir);\n\nvec3 ngnorm = normalize(g_norm);\nif (bumpTexData.x != 0) {\nvec3 bumpValue = ReadRTTexture(bumptexture, bumpTexData, bumpUVT, ngnorm, neyeDir).xyz;\nbumpValue = (bumpValue-0.498039)*2.0;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\nngnorm = normalize(ngnorm);\n}\n\nreflectDir = reflect(neyeDir, ngnorm);\nreflectDir = normalize(reflectDir);\n\n\nvec4 specularSum = texture(specularenv, reflectDir);\n#if encodeenvmapsinmono\nif (specularSum.b<1.0) specularSum=vec4(vec3(specularSum.r+specularSum.g+specularSum.b), 1.0);\nelse specularSum=vec4(vec3(specularSum.b+(1.0-specularSum.r)+(1.0-specularSum.g)+2.0), 1.0);\n#else\nspecularSum = vec4(specularSum.rgb+(1.0-specularSum.a)*64.0, 1.0);\n#endif\n#if hdribias\nspecularSum.rgb = pow(specularSum.rgb, vec3(gamma));\n#endif\n#if has2ndRef\nvec3 reflectDir2 = neyeDir-(2.0+v2ndRef.x)*ngnorm*dot(neyeDir, ngnorm);\nvec4 specularSum2 = texture(specularenv, reflectDir2);\nspecularSum2 = vec4(specularSum2.rgb+(1.0-specularSum2.a)*64.0, 1.0);\n#if hdribias\nspecularSum2.rgb = pow(specularSum2.rgb, vec3(gamma));\n#endif\nspecularSum.rgb += specularSum2.rgb*v2ndRef.y;\n#endif\nvec4 specularScale = vec4(specularcolor, 1.0);\nif (uhasSpecularTexture != 0)\n{\nspecularScale *= texture(speculartexture, (specularUVT*vec3(tex1,1.0)).xy, mipmapbias);\n}\nspecularSum *= specularScale;\n\nvec4 baseScale = vec4(basecolor, 1.0);\nif (uhasBaseTexture != 0)\n{\nbaseScale *= texture(basetexture, (baseUVT*vec3(tex1,1.0)).xy, mipmapbias);\n}\nspecularSum += baseScale;\n\n\nvec2 scrpos = gl_FragCoord.xy/viewportsize;\nvec2 scroffset;\nfloat zDepth = dot(vert-uCamPos.xyz, camz);\nscroffset.x = dot(camx, ngnorm);\nscroffset.y = dot(camy, ngnorm);\nfloat scroffsetlen = length(scroffset);\nif (scroffsetlen == 0.0) scroffsetlen = 1.0;\nscroffset /= scroffsetlen;\nscroffsetlen = pow(scroffsetlen, refractthinness);\nscroffset *= refractscale*scroffsetlen/zDepth;\nvec4 colRefraction = texture(refractiontexture, scrpos+scroffset);\nif (gamma != 1.0)\ncolRefraction.rgb = pow(colRefraction.rgb, vec3(gamma));\ncolRefraction *= vec4(transmissioncolor, 1.0);\nif (uhasTransmissionTexture != 0)\n{\ncolRefraction *= texture(transmissiontexture, (transmissionUVT*vec3(tex1,1.0)).xy, mipmapbias);\n}\n\n\nfloat dotnd = dot(neyeDir, ngnorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat powangle = pow(acos(-dotnd) / (3.14159625*0.5), 5.0);\nif (hasIORIntensity != 0)\n{\nfloat powangle_Intensity = powangle;\nif (ior_R0IntensityFlip == 1) powangle_Intensity = 1.0-powangle;\nfloat fresnelFactorIntensity = ior_R0Intensity + (1.0 - ior_R0Intensity) * powangle_Intensity;\ncolRefraction *= fresnelFactorIntensity;\n\n\n}\nif (hasIORClear != 0)\n{\nfloat powangle_Clear = powangle;\nif (ior_R0ClearFlip == 1) powangle_Clear = 1.0-powangle_Clear;\nfloat fresnelFactorClear = ior_R0Clear + (1.0 - ior_R0Clear) * powangle_Clear;\nspecularSum *= fresnelFactorClear;\n}\n\nFragColor.xyz = specularSum.xyz + colRefraction.rgb;\nFragColor.a = 1.0;\n\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\nFragColor.rgb = funchighlight(FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\nFragColor.rgb = vec3(funcdscs315_1_red(FragColor.r), funcdscs315_1_green(FragColor.g), funcdscs315_1_blue(FragColor.b));\n#elif (camresponse == 306)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\n\nFragColor.rgb = vec3(funcdscs315_2_green(FragColor.r), funcdscs315_2_green(FragColor.g), funcdscs315_2_green(FragColor.b));\n#endif\n\nif (gamma != 1.0)\nFragColor.rgb = pow(FragColor.rgb, vec3(1.0/gamma));\n\n#if BUILDVERSION < 423\nif (uhasLUTTexture != 0)\nFragColor.rgb = ApplyLUT(FragColor.rgb);\n#endif\n\nFragColor.rgb = exposure.rgb*ApplyColorCorrection(FragColor.rgb);\n\nif (vignetting > 0.0)\nFragColor.rgb = FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n#if BUILDVERSION >= 423\nif (uhasLUTTexture != 0)\nFragColor.rgb = ApplyLUT(FragColor.rgb);\n#endif\n}\n\n#if OutputDoFDepth\nDepthValues = GetDepthValue();\n#endif\n}\n";var shaderes3_InfinityRT_Ambientfs = "#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n\nuniform BlockAmbient {\nvec4 diffusecolor;\nvec4 diffuseInputCC;\nvec4 cc_tint;\n\n\n\nfloat mipmapbias;\nfloat gamma;\nfloat highlightcompression;\nfloat vignetting;\nfloat dynAmbOccGamma;\nfloat cc_brightness;\nfloat cc_contrast;\nfloat cc_saturation;\nmat3 diffuseUVT;\nmat3 alphaUVT;\nmat3 amboccUVT;\n\nivec2 diffuseTexData;\nivec2 alphaTexData;\nivec2 amboccTexData;\nivec2 dynAmbOcc;\nint decalalpha;\nint ppexistence;\nint uhasLUTTexture;\nint linearworkflow;\n};\n\nuniform sampler2D diffusetexture;\n\n\n\n\n\nuniform sampler2D alphatexture;\n\n\n\n\n\n\n\nuniform sampler2D ambocctexture;\n\n\n\n\n\n\n\nuniform sampler2D lutTex;\n\n\n#if PlanarReflectPassActive\n\nuniform vec3 planarreflectstrength;\nuniform sampler2D texPlanarReflect;\n#endif\n\nin vec2 tex1;\nin vec2 tex2;\nin vec3 g_norm;\nin vec3 eyeDir;\nin vec3 vert;\nin vec3 lvert;\n\n\n\n\n\n\n\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\n\nuniform mat4 matAmbOcc[8];\nuniform vec3 vecAmbOccSize[8];\n\n\n#if OutputDoFDepth\nlayout(location = 0) out vec4 FragColor;\nlayout(location = 1) out vec4 DepthValues;\n#else\nout vec4 FragColor;\n#endif\n\nSIRT_STANDARD_HEADER_INSERT\n\nfloat boxOcclusion(vec3 ipos, vec3 inor, mat4 itxx, vec3 irad)\n{\nvec3 p = (itxx*vec4(ipos, 1.0)).xyz;\nvec3 n = (itxx*vec4(inor, 0.0)).xyz;\n\n\nvec3 f = irad * sign(p);\n\n\nvec3 s = sign(irad - abs(p));\n\n\nvec3 v0 = normalize(vec3(1.0, 1.0, -1.0)*f - p);\nvec3 v1 = normalize(vec3(1.0, s.x, s.x)*f - p);\nvec3 v2 = normalize(vec3(1.0, -1.0, 1.0)*f - p);\nvec3 v3 = normalize(vec3(s.z, s.z, 1.0)*f - p);\nvec3 v4 = normalize(vec3(-1.0, 1.0, 1.0)*f - p);\nvec3 v5 = normalize(vec3(s.y, 1.0, s.y)*f - p);\n\n\nfloat tot = 0.0;\nvec3 cr = cross(v0, v1);\ntot += (dot(cr, cr)>0.001) ? dot(n, normalize(cr)) * acos(dot(v0, v1)) : 0.0;\ncr = cross(v1, v2);\ntot += (dot(cr, cr)>0.001) ? dot(n, normalize(cr)) * acos(dot(v1, v2)) : 0.0;\ncr = cross(v2, v3);\ntot += (dot(cr, cr)>0.001) ? dot(n, normalize(cr)) * acos(dot(v2, v3)) : 0.0;\ncr = cross(v3, v4);\ntot += (dot(cr, cr)>0.001) ? dot(n, normalize(cr)) * acos(dot(v3, v4)) : 0.0;\ncr = cross(v4, v5);\ntot += (dot(cr, cr)>0.001) ? dot(n, normalize(cr)) * acos(dot(v4, v5)) : 0.0;\ncr = cross(v5, v0);\ntot += (dot(cr, cr)>0.001) ? dot(n, normalize(cr)) * acos(dot(v5, v0)) : 0.0;\nreturn abs(tot) / 6.283185;\n}\n\nfloat ReadRTDynAmbOcc(vec3 norm)\n{\nfloat occ = 0.0;\nfor (int i = 0; i < dynAmbOcc.x; i++) {\nocc += boxOcclusion(vert, norm, matAmbOcc[i], vecAmbOccSize[i].rgb);\n}\nocc = clamp(occ, 0.0001, 0.9999);\nreturn pow(1.0 - occ, dynAmbOccGamma);\n}\n\n\n\nvoid main()\n{\nfloat alphacolor = diffusecolor.a;\nfloat ppexistencethreshold = cc_tint.a;\n\nvec3 ngnorm = normalize(g_norm);\nvec4 ambientSum = vec4(diffusecolor.rgb, 1.0);\nif (diffuseTexData.x != 0) {\nvec4 ambientTexVal = ReadRTTexture(diffusetexture, diffuseTexData, diffuseUVT, g_norm, eyeDir);\nif (linearworkflow == 2)\nambientTexVal.rgb = pow(ambientTexVal.rgb, vec3(2.2));\nambientTexVal.rgb = ApplyInputCC(ambientTexVal.rgb, diffuseInputCC);\nambientSum *= ambientTexVal;\n}\nif (amboccTexData.x != 0) {\nvec4 amboccScale = ReadRTTexture(ambocctexture, amboccTexData, amboccUVT, g_norm, eyeDir);\nif (linearworkflow == 2)\namboccScale.rgb = pow(amboccScale.rgb, vec3(2.2));\nambientSum *= amboccScale;\n}\nif (dynAmbOcc.x > 0 && dynAmbOcc.y == 0)\n{\nambientSum *= vec4(vec3(ReadRTDynAmbOcc(ngnorm)), 1.0);\n}\nFragColor = ambientSum;\n\n#if PlanarReflectPassActive\nif (planarreflectstrength.r > 0.0 || planarreflectstrength.g > 0.0 || planarreflectstrength.b > 0.0)\n{\nvec3 neyeDir = normalize(eyeDir);\n\nfloat dotnd = dot(neyeDir, ngnorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat powangle = pow(acos(-dotnd) / (3.14159625*0.5), 3.0);\n\n#if compPlanarRefl\nvec4 colPlanarReflect = texture(texPlanarReflect, gl_FragCoord.xy / viewportsize);\nFragColor.rgb = mix(FragColor.rgb, colPlanarReflect.rgb, powangle*colPlanarReflect.a*planarreflectstrength.r);\n#else\nFragColor.rgb += powangle*planarreflectstrength.rgb*texture(texPlanarReflect, gl_FragCoord.xy/viewportsize).rgb;\n#endif\n}\n#endif\n\n\nif (alphaTexData.x != 0)\n{\nvec3 neyeDir = normalize(eyeDir);\nFragColor.a = ReadRTTexture(alphatexture, alphaTexData, alphaUVT, ngnorm, neyeDir).x;\nFragColor.a *= alphacolor;\n#if hasBrightReflections\nif (decalalpha == 0)\nFragColor.rgb *= FragColor.a;\n#endif\n}\nelse\n{\nFragColor.a = alphacolor;\n}\nif (dynAmbOcc.x > 0 && dynAmbOcc.y == 1)\n{\nFragColor.a *= mod(1.0 - ReadRTDynAmbOcc(ngnorm), 1.0);\n}\nif (ppexistence != 0 && FragColor.a < ppexistencethreshold)\ndiscard;\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\nFragColor.rgb = funchighlight(FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\nFragColor.rgb = vec3(funcdscs315_1_red(FragColor.r), funcdscs315_1_green(FragColor.g), funcdscs315_1_blue(FragColor.b));\n#elif (camresponse == 306)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\n\nFragColor.rgb = vec3(funcdscs315_2_green(FragColor.r), funcdscs315_2_green(FragColor.g), funcdscs315_2_green(FragColor.b));\n#endif\n\nif (gamma != 1.0)\nFragColor.rgb = pow(FragColor.rgb, vec3(1.0/gamma));\n\n#if BUILDVERSION < 423\nif (uhasLUTTexture != 0)\nFragColor.rgb = ApplyLUT(FragColor.rgb);\n#endif\n\nFragColor.rgb = ApplyColorCorrection(FragColor.rgb);\n\nif (vignetting > 0.0)\nFragColor.rgb = FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n#if BUILDVERSION >= 423\nif (uhasLUTTexture != 0)\nFragColor.rgb = ApplyLUT(FragColor.rgb);\n#endif\n}\n\n#if hasBrightReflections\nif (decalalpha != 0)\nFragColor.rgb *= FragColor.a;\n#endif\n\n#if OutputDoFDepth\nDepthValues = GetDepthValue();\n#endif\nif (isSecondaryMat != 0){\nFragColor.a = FragColor.a * secondaryMatAlpha;\nFragColor.r = FragColor.r * secondaryMatAlpha;\nFragColor.g = FragColor.g * secondaryMatAlpha;\nFragColor.b = FragColor.b * secondaryMatAlpha;\n}\n}\n";var shaderes3_InfinityRT_Modularfs = "\n#if extOESSD\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nin vec2 tex1;\nin vec2 tex2;\nin vec3 g_norm;\nin vec3 eyeDir;\nin vec3 bu;\nin vec3 bv;\nin vec3 vert;\nin vec3 lvert;\n#if amboccusevertcol\nin float vcolor;\n#endif\n\nstruct stState\n{\nvec3 lpos;\nvec3 norm;\nvec3 eyedir;\nvec2 uv;\nvec4 vcolor;\nfloat dotnd;\n} state;\n\nuniform samplerCube diffusecachecubetexture;\nuniform samplerCube specularcachecubetexture;\nuniform float mipmapbias;\nuniform float numblurmaps;\nuniform sampler2D texOctahedron;\nuniform float blurres;\n\n\nuniform float highlightcompression;\nuniform float vignetting;\nuniform float gamma;\nuniform vec3 exposure;\nuniform int uhasLUTTexture;\nuniform sampler2D lutTex;\n\n\nuniform float cc_brightness;\nuniform float cc_contrast;\nuniform float cc_saturation;\nuniform vec3 cc_tint;\n\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\n#if OutputDoFDepth\nlayout(location = 0) out vec4 FragColor;\nlayout(location = 1) out vec4 DepthValues;\n#else\nout vec4 FragColor;\n#endif\n\nMODULAR_FRAGMENT_HEADER_INSERT\n\nvec3 makeReflectDir(vec3 ngnorm, vec3 neyeDir, float fReflectFactor)\n{\nreturn normalize(fReflectFactor*reflect(neyeDir, ngnorm)+(1.0-fReflectFactor)*ngnorm);\n}\n\nSIRT_STANDARD_HEADER_INSERT\n\nvec4 Surface_Shader(vec4 col, vec4 shadow)\n{\nreturn col*shadow;\n}\n\nvec4 Surface_Shadow(float intensity)\n{\nreturn vec4(vec3(clamp((1.0 - state.vcolor.a)*intensity, 0.0, 1.0)), 1.0);\n}\n\nvec3 ReadRGBETexture(sampler2D textureA, vec2 uvA)\n{\nvec4 texSample = texture(textureA, uvA);\nreturn texSample.rgb+(1.0-texSample.a)*64.0;\n}\n\nvec4 Octane_texture(sampler2D textureA, vec2 uvA, float powerA, float gammaA)\n{\nvec4 colTex = texture(textureA, uvA);\ncolTex.rgb = pow(colTex.rgb, vec3(gammaA));\ncolTex.rgb *= vec3(powerA);\nreturn colTex;\n}\n\nvec4 Octane_Greyscaletexture(sampler2D textureA, vec2 uvA, float powerA, float gammaA)\n{\nvec4 colTex = texture(textureA, uvA);\ncolTex.rgb = pow(colTex.rgb, vec3(gammaA));\ncolTex.rgb = vec3((colTex.r+colTex.g+colTex.b)/3.0);\ncolTex.rgb *= vec3(powerA);\nreturn colTex;\n}\n\nvec3 rgb2hsv(vec3 c)\n{\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\nvec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn clamp(c.z, 0.0, 1.0) * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), clamp(c.y, 0.0, 1.0));\n}\n\nfloat cc_contrast_red(float v00,float v01,float v02,float v03)\n{\n\nfloat v04=v00+v00;\nfloat v05=spow(v02,v04);\nfloat v06=v03-v05;\nfloat v07=v04*v04*v04;\nfloat v08=ssqrt(v03);\nfloat v09=spow(v05,v07);\nfloat v10=v01-v05;\nfloat v11=spow(v09,v03);\nfloat v12=v11-v06;\nfloat v13=spow(v04,v09);\nfloat v14=v10-v12;\nfloat v15=v13*v13*v13;\nfloat v16=spow(v00,v15);\nfloat v17=spow(v07,v01);\nfloat v18=spow(v13,v08);\nfloat v19=spow(v14,v16);\nfloat v20=spow(v17,v17);\nfloat v22=spow(v13,v19);\nfloat v23=v00*v22;\nfloat v24=spow(v18,v20);\nfloat v28=v24*v23;\nreturn v28;\n}\n\nfloat cc_contrast_green(float v00,float v01,float v02,float v03)\n{\n\nfloat v04=v01*v01;\nfloat v05=spow(v04,v01);\nfloat v06=v05-v04;\nfloat v07=v02*v02;\nfloat v08=v01-v05;\nfloat v09=v04*v04*v04;\nfloat v10=spow(v06,v03);\nfloat v11=spow(v10,v08);\nfloat v12=spow(v10,v07);\nfloat v13=v00+v12;\nfloat v14=spow(v09,v13);\nfloat v15=spow(v12,v02);\nfloat v16=v14*v14*v14;\nfloat v17=v08*v08;\nfloat v18=v15*v12;\nfloat v19=spow(v18,v16);\nfloat v20=v17*v04;\nfloat v21=v20+v20;\nfloat v22=v19*v11;\nfloat v26=spow(v01,v22);\nfloat v27=v21+v26;\nreturn v27;\n}\n\nfloat cc_contrast_blue(float v00,float v01,float v02,float v03)\n{\n\nfloat v05=v02+v01;\nfloat v06=v03*v02;\nfloat v08=spow(v05,v03);\nfloat v09=spow(v00,v03);\nfloat v14=v08+v06;\nfloat v19=v02+v02;\nfloat v21=v09-v14;\nfloat v25=spow(v19,v21);\nfloat v26=spow(v02,v25);\nreturn v26;\n}\n\n\nfloat cc_contrast_greyscale(float v00,float v01)\n{\nfloat v02=v00+v01;\nfloat v03=0.000793;\nfloat v04=0.187323;\nfloat v05=v00*v00;\nfloat v06=-1.249123;\nfloat v07=v06+v05;\nfloat v08=v03-v07;\nfloat v09=spow(v04,v04);\nfloat v10=v02*v09;\nfloat v11=v10-v00;\nfloat v12=spow(v08,v11);\nfloat v13=0.426466;\nfloat v14=v05*v05;\nfloat v15=spow(v00,v12);\nfloat v16=spow(v12,v14);\nfloat v17=v08*v14;\nfloat v18=max(v03,v15);\nfloat v19=v16+v18;\nfloat v20=av(v13,v19);\nfloat v21=v20*v15;\nfloat v22=v17+v21;\nfloat v23=v03+v00;\nfloat v24=spow(v22,v19);\nfloat v25=min(v23,v24);\nfloat v26=max(v18,v25);\nreturn v26;\n}\n\nvec2 Octane_GetIOR(float val)\n{\nfloat ni = 1.0;\nfloat R0 = (val - ni) / (val + ni);\nR0 *= R0;\nreturn vec2(R0,	0.299975*val+9.26843);\n}\n\nvec3 octane_filmior(float v00, float v01, float v02)\n{\nfloat v03 = pow(v01, v01);\nfloat v04 = v02 + v00;\nfloat v05 = v03 + v00;\nfloat v06 = pow(v03, v05);\nfloat v07 = pow(v06, v04);\nfloat v08 = v07*v07;\nfloat v09 = v05 + v05;\nfloat v10 = dpang(v08);\nfloat v11 = v08 - v10;\nfloat v12 = pow(v09, v11);\nfloat v14 = v10 / v12;\nfloat v15 = v08 + v06;\nfloat v16 = v12*v08;\nfloat v17 = v02*v16;\nfloat v18 = pow(v14, v15);\nfloat v20 = v00*v17;\nfloat v23 = pow(v17, v20);\nfloat v24 = pow(v07, v18);\nfloat v25 = pow(v24, v23);\nfloat v27 = v24*v25;\nreturn vec3(v25, v24, v27);\n}\n\nfloat octane_funcblurscale(float v00)\n{\nif (v00 == 0.0)\nreturn 0.0;\nfloat v01 = 0.513749;\nfloat v02 = spow(v00, v01);\nfloat v05 = spow(v00, v02);\nfloat v07 = 0.256905;\nfloat v08 = v02*v02*v02;\nfloat v10 = v07*v02;\nfloat v11 = v08 - v05;\nfloat v12 = v11*v11;\nfloat v15 = v07*v07*v07;\nfloat v17 = spow(v10, v12);\nfloat v18 = v17 + v15;\nreturn v18;\n}\n\nvec4 Octane_Color_Correction(vec4 inputcolorA, float hueA, float saturationA, vec4 brightnessA, float gammaA, float contrastA)\n{\nvec3 colCC = inputcolorA.rgb;\n\n\nvec3 grey=normalize(vec3(1.0,1.0,1.0));\nvec3 col1=normalize(cross(vec3(0.0,1.0,0.0),grey));\nvec3 col2=cross(col1,grey);\nfloat gr=dot(colCC,grey);\nfloat c1=dot(colCC,col1);\nfloat c2=dot(colCC,col2);\n\nfloat ang=hueA*3.14139265;\nfloat nc1=cos(ang)*c1+sin(ang)*c2;\nfloat nc2=-sin(ang)*c1+cos(ang)*c2;\n\nnc1*=saturationA-0.0001;\nnc2*=saturationA-0.0001;\ncolCC=gr*grey+nc1*col1+nc2*col2;\ncolCC = clamp(colCC, vec3(0.0), vec3(1.0));\n\ncolCC *= brightnessA.rgb;\n\n\nif (gammaA != 1.0)\ncolCC = pow(colCC.rgb, vec3(gammaA));\n\n\nif (contrastA > 0.0015) {\n\n\n\nvec3 contrasted = vec3(cc_contrast_greyscale(colCC.r,contrastA),\ncc_contrast_greyscale(colCC.g,contrastA),\ncc_contrast_greyscale(colCC.b,contrastA));\ncolCC = contrasted;\n}\n\nreturn vec4(colCC, inputcolorA.a);\n}\n\nvec4 Octane_BlackBody(vec4 tex1, float v00)\n{\nfloat v01=v00-v00;\nfloat v02=ssqrt(v00);\nfloat v03=spow(v01,v01);\nfloat v04=v03+v03;\nfloat v05=ssqrt(v02);\nfloat v07=ssqrt(v05);\nfloat v08=v04*v04*v04;\nfloat v09=ssqrt(v08);\nfloat v10=v03+v09;\nfloat v11=v08-v05;\nfloat v12=ssqrt(v09);\nfloat v13=v07-v04;\nfloat v14=v01-v13;\nfloat v15=spow(v10,v14);\nfloat v16=spow(v13,v11);\nfloat v17=v04+v16;\nfloat v18=v17*v16;\nfloat v19=spow(v11,v12);\nfloat v20=v13*v13*v13;\nfloat v21=v15+v18;\nfloat v22=spow(v21,v15);\nfloat v23=v13*v22;\nfloat v24=v23*v20;\nfloat v25=v19+v22;\nreturn tex1*vec4(v25, v23, v24, 1.0);\n}\n\nvec4 Octane_PolygonSide(vec3 ngnorm, vec3 neyeDir, int nInvert)\n{\nif (nInvert != 0)\nreturn (dot(ngnorm, neyeDir) > 0.0) ? vec4(1.0) : vec4(0.0, 0.0, 0.0, 1.0);\nreturn (dot(ngnorm, neyeDir) < 0.0) ? vec4(1.0) : vec4(0.0, 0.0, 0.0, 1.0);\n}\n\nfloat Octane_Falloff_Map(vec3 ngnormA, vec3 neyeDirA, float minval, float maxval, float skewfactor)\n{\nngnormA = normalize(ngnormA);\n\nfloat dotnd = dot(neyeDirA, ngnormA);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat powangle = pow(acos(-dotnd) / (3.14159625*0.5), skewfactor);\nreturn minval + (maxval-minval) * powangle;\n}\n\nvec4 Octane_Portal(vec3 ngnormA, vec3 neyeDirA)\n{\nvec3 reflectDir = makeReflectDir(ngnormA, neyeDirA, 1.0);\nvec4 colA1 = texture(specularcachecubetexture, reflectDir);\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\nreturn colA1;\n}\n\nvec2 Octahedron_GetUV( vec3 d )\n{\n\nd /= dot(abs(d), vec3(1.0));\n\nif ( d.z < 0.0 )\nd.xy = (1.0-abs(d.yx)) * sign(d.xy);\n\nd.xy = d.xy * 0.5 + 0.5;\nreturn d.xy;\n}\n\nvec4 Octahedron_ReadEnvMap(vec3 d, float fMapIdx)\n{\nvec2 uv = Octahedron_GetUV(d);\n\nfloat fPixelSize = 1.0/blurres;\nif (fMapIdx == 0.0)\n{\n\nfPixelSize *= 2.0;\nuv = uv*(0.5-2.0*fPixelSize)+fPixelSize;\n}\nelse\n{\n\nfPixelSize *= 4.0;\nuv = uv*(0.25-2.0*fPixelSize)+fPixelSize;\n\nfMapIdx += (fMapIdx < 2.5) ? 1.0 : 3.0;\nfMapIdx = clamp(fMapIdx, 2.0, 15.0);\nuv += (vec2(mod(fMapIdx, 4.0), floor(fMapIdx/4.0))*vec2(0.25));\n}\n\nreturn texture(texOctahedron, uv);\n}\n\n\nfloat func_SpecIOR(float v00, float v01)\n{\nfloat v02 = v01 / v01;\nfloat v03 = v00 - v02;\nfloat v04 = v00 + v02;\nfloat v05 = v02 - v01;\nfloat v06 = v05*v03;\nfloat v07 = spow(v06, v05);\nfloat v08 = spow(v04, v05);\nfloat v10 = v07 / v08;\nfloat v11 = v10*v10;\nfloat v15 = v07*v11;\nreturn v15;\n}\n\nvec4 Octane_Glossy_Material(vec3 ngnormA, vec3 neyeDirA, vec4 diffusecolorA, vec4 specularcolorA, vec2 blurrinessA, float iorA, vec4 emissioncolorA, float reffactor, float opacity, float filmwidth, float filmindex)\n{\nngnormA = normalize(ngnormA);\nblurrinessA.x = octane_funcblurscale(blurrinessA.x);\n\n\nvec4 diffuseSum = texture(diffusecachecubetexture, ngnormA);\ndiffuseSum = vec4(diffuseSum.rgb+(1.0-diffuseSum.a)*64.0, 1.0);\n#if hdribias\ndiffuseSum.rgb = pow(diffuseSum.rgb, vec3(gamma));\n#endif\ndiffuseSum *= diffusecolorA;\n\n\nfloat fAcosAngle = clamp(-dot(neyeDirA, ngnormA), 0.0, 1.0);\nvec4 colA1, colB1;\nvec3 reflectDir = makeReflectDir(ngnormA, neyeDirA, reffactor);\nfloat blurfactor = (1.0+numblurmaps)*blurrinessA.x*(1.0-pow(acos(abs(fAcosAngle)) / (3.14159625*0.5), blurrinessA.y));\nfloat blurfraction = fract(blurfactor);\nif (blurfactor <= 1.0) {\n\ncolA1 = texture(specularcachecubetexture, reflectDir);\ncolB1 = Octahedron_ReadEnvMap(reflectDir, 0.0);\n} else {\ncolA1 = Octahedron_ReadEnvMap(reflectDir, floor(blurfactor)-1.0);\ncolB1 = Octahedron_ReadEnvMap(reflectDir, ceil(blurfactor)-1.0);\n}\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\nvec4 glossySum = (1.0-blurfraction)*colA1+blurfraction*colB1;\n#if hdribias\nglossySum = vec4(pow(glossySum.rgb, vec3(gamma)), 1.0);\n#endif\n\n\nfloat dotnd = dot(neyeDirA, ngnormA);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat glancingangle = acos(-dotnd) / (3.14159625*0.5);\nif (filmwidth > 0.0) {\n\nglossySum.rgb *= octane_filmior(filmindex, filmwidth, -dotnd);\n}\nif (iorA > 1.0) {\nglossySum *= specularcolorA;\nglossySum *= func_SpecIOR(iorA, glancingangle);\n\nreturn vec4(opacity*(diffuseSum + glossySum + emissioncolorA).rgb, opacity);\n}\n\nreturn vec4(opacity*(mix(diffuseSum, glossySum, specularcolorA)+emissioncolorA).rgb, opacity);\n}\n\nvec4 Octane_Specular_Material(vec3 ngnormA, vec3 neyeDirA, vec4 reflectioncolorA, vec4 transmissionA, vec2 blurrinessA, float iorA, float reffactor, float opacity, float filmwidth, float filmindex)\n{\nngnormA = normalize(ngnormA);\nblurrinessA.x = octane_funcblurscale(blurrinessA.x);\n\n\nfloat fAcosAngle = clamp(-dot(neyeDirA, ngnormA), 0.0, 1.0);\nvec4 colA1, colB1;\nvec3 reflectDir = makeReflectDir(ngnormA, neyeDirA, reffactor);\nfloat blurfactor = (1.0+numblurmaps)*blurrinessA.x*(1.0-pow(acos(abs(fAcosAngle)) / (3.14159625*0.5), blurrinessA.y));\nfloat blurfraction = fract(blurfactor);\nif (blurfactor <= 1.0) {\n\ncolA1 = texture(specularcachecubetexture, reflectDir);\ncolB1 = Octahedron_ReadEnvMap(reflectDir, 0.0);\n} else {\ncolA1 = Octahedron_ReadEnvMap(reflectDir, floor(blurfactor)-1.0);\ncolB1 = Octahedron_ReadEnvMap(reflectDir, ceil(blurfactor)-1.0);\n}\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\nvec4 glossySum = (1.0-blurfraction)*colA1+blurfraction*colB1;\n#if hdribias\nglossySum = vec4(pow(glossySum.rgb, vec3(gamma)), 1.0);\n#endif\nglossySum *= reflectioncolorA;\n\n\nfloat dotnd = dot(neyeDirA, ngnormA);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat glancingangle = acos(-dotnd) / (3.14159625*0.5);\nif (filmwidth > 0.0) {\n\nglossySum.rgb *= octane_filmior(filmindex, filmwidth, -dotnd);\n}\nglossySum *= func_SpecIOR(iorA, glancingangle);\n\nfloat alpha = opacity*(1.0-transmissionA.r);\nreturn vec4(opacity*(glossySum*reflectioncolorA).rgb, alpha);\n}\n\nvec4 Octane_Diffuse_Material(vec3 ngnormA, vec4 diffusecolorA, vec4 emissioncolorA, float opacity)\n{\nngnormA = normalize(ngnormA);\n\n\nvec4 diffuseSum = texture(diffusecachecubetexture, ngnormA);\ndiffuseSum = vec4(diffuseSum.rgb+(1.0-diffuseSum.a)*64.0, 1.0);\n#if hdribias\ndiffuseSum.rgb = pow(diffuseSum.rgb, vec3(gamma));\n#endif\ndiffuseSum *= diffusecolorA;\nreturn vec4(opacity*(diffuseSum+emissioncolorA).rgb, opacity);\n}\n\nvec4 Octane_Normalmap(vec3 agnorm, vec3 neyeDirA, sampler2D textureA, vec2 uvA, float powerA)\n{\nvec3 ngnorm = agnorm;\nvec3 bumpValue = (texture(textureA, uvA).xyz-0.498039)*2.0;\nbumpValue *= powerA;\nngnorm -= bumpValue.x * normalize(bu);\nngnorm += bumpValue.y * normalize(bv);\nngnorm = normalize(ngnorm);\n\nvec3 relectDir = makeReflectDir(ngnorm, neyeDirA, 1.0);\nfloat fDPReflect = dot(relectDir, agnorm);\nif (fDPReflect < 0.0)\n{\nngnorm -= agnorm*fDPReflect;\nngnorm = normalize(ngnorm);\n}\nreturn vec4(ngnorm, 1.0);\n}\n\nfloat Octane_RGBToFloat(vec3 col)\n{\nreturn (0.2989*col.r+0.5870*col.g+0.1140*col.b)/3.0;\n}\n\nfloat perlin_hash(vec3 p)\n{\np = fract(p*0.3183099 + 0.1);\np *= 17.0;\nreturn fract(p.x*p.y*p.z*(p.x + p.y + p.z));\n}\n\nfloat perlin_noise(in vec3 x)\n{\nvec3 p = floor(x);\nvec3 f = fract(x);\nf = f*f*(3.0 - 2.0*f);\n\nreturn mix(mix(mix(perlin_hash(p + vec3(0.0, 0.0, 0.0)),\nperlin_hash(p + vec3(1.0, 0.0, 0.0)), f.x),\nmix(perlin_hash(p + vec3(0.0, 1.0, 0.0)),\nperlin_hash(p + vec3(1.0, 1.0, 0.0)), f.x), f.y),\nmix(mix(perlin_hash(p + vec3(0.0, 0.0, 1.0)),\nperlin_hash(p + vec3(1.0, 0.0, 1.0)), f.x),\nmix(perlin_hash(p + vec3(0.0, 1.0, 1.0)),\nperlin_hash(p + vec3(1.0, 1.0, 1.0)), f.x), f.y), f.z);\n}\n\nvec3 chips_hash(vec3 x)\n{\nx = vec3(dot(x, vec3(127.1, 311.7, 74.7)),\ndot(x, vec3(269.5, 183.3, 246.1)),\ndot(x, vec3(113.5, 271.9, 124.6)));\n\nreturn fract(sin(x)*43758.5453123);\n}\n\n\nvec3 chips_voronoi(in vec3 x)\n{\nvec3 p = floor(x);\nvec3 f = fract(x);\n\nfloat id = 0.0;\nvec2 res = vec2(100.0);\nfor (int k = -1; k <= 1; k++)\nfor (int j = -1; j <= 1; j++)\nfor (int i = -1; i <= 1; i++)\n{\nvec3 b = vec3(float(i), float(j), float(k));\nvec3 r = vec3(b) - f + chips_hash(p + b);\nfloat d = dot(r, r);\n\nif (d < res.x)\n{\nid = dot(p + b, vec3(1.0, 57.0, 113.0));\nres = vec2(d, res.x);\n}\nelse if (d < res.y)\n{\nres.y = d;\n}\n}\n\nreturn vec3(sqrt(res), abs(id));\n}\n\n\nvec3 circular_voronoi(in vec3 x)\n{\nvec3 p = floor(x);\nvec3 f = fract(x);\n\nfloat id = 0.0;\nvec2 res = vec2(100.0);\nfor (int k = -1; k <= 1; k++)\nfor (int j = -1; j <= 1; j++)\nfor (int i = -1; i <= 1; i++)\n{\nvec3 b = vec3(float(i), float(j), float(k));\nvec3 r = vec3(b) - f + chips_hash(p + b);\nfloat d = dot(r, r);\n\nif (d < res.x)\n{\nid = dot(p + b, vec3(1.0, 57.0, 113.0));\nres = vec2(d, res.x);\n}\nelse if (d < res.y)\n{\nres.y = d;\n}\n}\n\nreturn vec3(pow(1.0 - min(res*1.2, vec2(1.0)), vec2(0.7)), abs(id));\n}\n\nconst int nMaxNumOctaves = 64;\nvec4 Octane_NoiseTexture(int type, int octaves, float omega, mat3 mat, int projection, int invert, float gamma, float contrast)\n{\nif (type != 0 && type != 2 && type != 3)\nreturn vec4(1.0, 0.0, 0.0, 1.0);\nvec3 q;\nif (projection == 2)\n{\nvec2 uv2 = state.uv;\n\nuv2.x *= (viewportsize.x/viewportsize.y);\nq = 16.0*vec3((mat*vec3(uv2,1.0)).xy, 95.0);\n}\nelse\nq = 16.0*state.lpos;\nfloat f = 0.0;\nfloat mag = 1.0;\nfloat totmag = 0.0;\nfor (int cnt1 = 0; cnt1<nMaxNumOctaves; cnt1++) {\nif (cnt1 >= octaves){break;}\nif (type == 3)\nf += mag*chips_voronoi(q).x;\nelse if (type == 2)\nf += mag*circular_voronoi(q).x;\nelse\nf += mag*perlin_noise(q);\nq = q*2.01;\ntotmag += mag;\nmag *= omega;\n}\nf /= totmag;\nif (type == 3)\nf = 1.0 - f;\nif (invert != 0)\nf = 1.0 - f;\nf = pow(f, gamma);\nf = cc_contrast_greyscale(f, contrast);\nreturn vec4(f);\n}\n\nvec4 Octane_Gradient(int interpolationA, vec4 inputA, vec4 startA, vec4 endA)\n{\nreturn mix(startA, endA, inputA.x);\n}\n\n/*float rand(float n) { return 2.0*fract(sin(n) * 43758.5453123)-1.0; }\n\nvec3 VRED_Flakes(vec3 ngnormA, float size, float intensity)\n{\nngnormA = normalize(ngnormA);\n\nfloat projfac = 1000.0;\nfloat projsize = min(1.0, projfac*(-state.dotnd*size / length(viewPos - gpos)));\n\nintensity *= 0.25*projsize;\n\nvec3 flakepos = vert;\nflakepos *= 1.0/(size*(2.0*sqrt(2.0)));\n\nfloat idp0 = floor(abs(dot(flakepos, vec3(0.0,  0.707106, 0.707106))))+347.0;\nfloat idp1 = floor(abs(dot(flakepos, vec3(0.0, -0.707106, 0.707106))))+125.0;\nfloat idp2 = floor(abs(dot(flakepos, vec3( 0.707106, 0.0, 0.707106))))+2376.0;\nfloat idp3 = floor(abs(dot(flakepos, vec3(-0.707106, 0.0, 0.707106))))+674.0;\nfloat idp4 = floor(abs(dot(flakepos, vec3( 0.707106, 0.707106, 0.0))))+8294.0;\nfloat idp5 = floor(abs(dot(flakepos, vec3(-0.707106, 0.707106, 0.0))))+263.0;\n\nfloat off1 = 413.0;\nfloat off2 = 273.0;\nfloat off3 = 317.0;\nfloat off4 = 113.0;\nfloat val0 = rand(rand(idp0) + rand(idp1) + rand(idp2) + rand(idp3) + rand(idp4) + rand(idp5));\nfloat val1 = rand(val0 + off1);\nfloat val2 = rand(val0 + off2);\nfloat val3 = rand(val0 + off3);\nfloat val4 = rand(val0 + off4);\n\nvec3 r = vec3(val0, val1, val2);\nvec3 ax1 = normalize(r - dot(ngnormA, r)*ngnormA);\nvec3 ax2 = cross(ngnormA, ax1);\n\nfloat u = 0.49*val3 + 0.5;\nfloat v = 0.49*val4 + 0.5;\nfloat z0 = sqrt(-2.0 * log(u))*cos(v * 2.0 * 3.14159265);\nfloat z1 = sqrt(-2.0 * log(u))*sin(v * 2.0 * 3.14159265);\n\nvec3 pert = ngnormA;\npert += ax1*z0*intensity;\npert += ax2*z1*intensity;\nreturn normalize(pert);\n}\n\nfloat func_diffuse_attenuation(float v00, float v01, float v02, float v03, float v04, float v05)\n{\nfloat v06 = min(v03, v05);\nfloat v07 = v05*v00;\nfloat v08 = mx3(v03, v04, v05);\nfloat v09 = av3(v07, v07, v04);\nfloat v10 = len3(v06, v03, v08);\nfloat v12 = spow(v07, v10);\nfloat v13 = spow(v12, v09);\nfloat v15 = mx3(v10, v01, v13);\nfloat v16 = spow(v13, v15);\nfloat v17 = spow(v01, v05);\nfloat v19 = av3(v16, v16, v17);\nreturn v19;\n}\n\nfloat func_flake_attenuation(float v00, float v01, float v02, float v03, float v04, float v05)\n{\nfloat v06 = av(v05, v03);\nfloat v07 = av3(v06, v03, v04);\nfloat v08 = v01*v07;\nfloat v09 = v01*v01;\nfloat v10 = av3(v09, v00, v09);\nfloat v11 = av(v03, v10);\nfloat v14 = v11 + v08;\nfloat v15 = v00 + v09;\nfloat v16 = spow(v08, v15);\nfloat v20 = spow(v07, v14);\nfloat v22 = max(v16, v20);\nreturn v22;\n}\n\nvec4 VRED_Metallic_Carpaint(vec3 ngnormA, vec4 base, vec4 flakes, float blurrinessA, float reffactor, vec4 clearcoat, float reflectivity)\n{\nngnormA = normalize(ngnormA);\n\n\nif (flakes.r != 0.0 && flakes.g != 0.0 && flakes.b != 0.0)\nbase *= func_diffuse_attenuation(base.r, base.g, base.b, flakes.r, flakes.g, flakes.b);\nif (base.r != 0.0 && base.g != 0.0 && base.b != 0.0)\nflakes *= func_flake_attenuation(base.r, base.g, base.b, flakes.r, flakes.g, flakes.b);\n\n\nvec4 diffuseSum = texture(diffusecachecubetexture, state.norm);\ndiffuseSum = vec4(diffuseSum.rgb + (1.0 - diffuseSum.a)*64.0, 1.0);\n#if hdribias\ndiffuseSum.rgb = pow(diffuseSum.rgb, vec3(gamma));\n#endif\nbase *= diffuseSum;\n\n\nvec4 colA1, colB1;\nvec3 reflectDir = makeReflectDir(ngnormA, state.eyedir, reffactor);\nfloat blurfactor = (1.0 + numblurmaps)*blurrinessA;\nfloat blurfraction = fract(blurfactor);\nif (blurfactor <= 1.0) {\n\ncolA1 = texture(specularcachecubetexture, reflectDir);\ncolB1 = Octahedron_ReadEnvMap(reflectDir, 0.0);\n}\nelse {\ncolA1 = Octahedron_ReadEnvMap(reflectDir, floor(blurfactor) - 1.0);\ncolB1 = Octahedron_ReadEnvMap(reflectDir, ceil(blurfactor) - 1.0);\n}\ncolA1 = vec4(colA1.rgb + (1.0 - colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb + (1.0 - colB1.a)*64.0, 1.0);\nvec4 glossySum = (1.0 - blurfraction)*colA1 + blurfraction*colB1;\n#if hdribias\nglossySum = vec4(pow(glossySum.rgb, vec3(gamma)), 1.0);\n#endif\nflakes *= glossySum;\n\n\nvec3 reflectDirClear = makeReflectDir(state.norm, state.eyedir, reffactor);\nvec4 specular = texture(specularcachecubetexture, reflectDirClear);\nspecular = vec4(specular.rgb + (1.0 - specular.a)*64.0, 1.0);\nclearcoat *= specular;\n\n\nfloat powangle = 1.0-pow(acos(-state.dotnd) / (3.14159625*0.5), 15.0);\nreturn mix(base + flakes, clearcoat, (reflectivity == 0.0) ? 0.0 : mix(1.0, reflectivity, powangle));\n}*/\n\nvec4 RT_NormalMap_Gen(sampler2D inTex, vec2 pixSize, float inScale)\n{\nvec4 texSample_00 = texture(inTex, vec2(state.uv.x - pixSize.x, state.uv.y - pixSize.y));\nvec4 texSample_01 = texture(inTex, vec2(state.uv.x            , state.uv.y - pixSize.y));\nvec4 texSample_02 = texture(inTex, vec2(state.uv.x + pixSize.x, state.uv.y - pixSize.y));\n\nvec4 texSample_10 = texture(inTex, vec2(state.uv.x - pixSize.x, state.uv.y));\n\nvec4 texSample_12 = texture(inTex, vec2(state.uv.x + pixSize.x, state.uv.y));\n\nvec4 texSample_20 = texture(inTex, vec2(state.uv.x - pixSize.x, state.uv.y + pixSize.y));\nvec4 texSample_21 = texture(inTex, vec2(state.uv.x            , state.uv.y + pixSize.y));\nvec4 texSample_22 = texture(inTex, vec2(state.uv.x + pixSize.x, state.uv.y + pixSize.y));\n\nvec4 val = vec4(0., 0.0, 1.0, 1.0);\nval.x = texSample_02.x + texSample_12.x + texSample_22.x - texSample_00.x - texSample_10.x - texSample_20.x;\nval.y = texSample_20.x + texSample_21.x + texSample_22.x - texSample_00.x - texSample_01.x - texSample_02.x;\nval.xy *= inScale;\nval.xy += vec2(0.5);\nval = clamp(val, 0.0, 1.0);\n\nreturn val;\n}\n\nfloat RT_normpdf(float x, float sigma)\n{\nreturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nvec4 RT_GaussianBlur(sampler2D inTex, vec2 pixSize, float inScale)\n{\nif (inScale == 0.0)\nreturn vec4(texture(inTex, state.uv.xy).rgb, 1.0);\n\nconst int mSize = 15;\nconst int kSize = (mSize-1)/2;\nfloat kernel[mSize];\nvec3 final_colour = vec3(0.0);\n\nfloat sigma = inScale;\nfloat Z = 0.0;\nfor (int j = 0; j <= kSize; ++j)\n{\nkernel[kSize+j] = kernel[kSize-j] = RT_normpdf(float(j), sigma);\n}\n\nfor (int j = 0; j < mSize; ++j)\n{\nZ += kernel[j];\n}\n\nfor (int i=-kSize; i <= kSize; ++i)\n{\nfor (int j=-kSize; j <= kSize; ++j)\n{\nfinal_colour += kernel[kSize+j]*kernel[kSize+i]*texture(inTex, state.uv.xy+(vec2(float(i),float(j))) * pixSize).rgb;\n}\n}\n\nreturn vec4(final_colour/(Z*Z), 1.0);\n}\n\nvec4 RT_Phong(sampler2D inTex, vec4 inLightDir, float inPower)\n{\nvec3 bumpValue = (texture(inTex, state.uv.xy).xyz-0.498039)*2.0;\nbumpValue = (bumpValue - 0.498039)*2.0;\nvec3 ngnorm = vec3(0.0, 1.0, 0.0);\nngnorm += bumpValue.x * vec3(1.0, 0.0, 0.0);\nngnorm += bumpValue.y * vec3(0.0, 0.0, 1.0);\nngnorm = normalize(ngnorm);\n\nvec3 lightdir = 2.0*inLightDir.xyz-1.0;\nlightdir = normalize(lightdir);\n\nfloat scaleP = clamp(-dot(ngnorm, lightdir), 0.0, 1.0);\nscaleP = pow(scaleP, inPower);\n\nreturn vec4(vec3(scaleP), 1.0);\n}\n\nvec4 RT_SobelFilter(sampler2D inTex, vec2 pixSize, int gridsize)\n{\nvec2 index;\nvec2 sum = vec2(0.0);\n\nfor(int y = -2; y <= 2; y++)\n{\nindex.y = float(y);\n\nfor(int x = -2; x <= 2; x++)\n{\nif (x == 0 && y == 0)\ncontinue;\nindex.x = float(x);\n\nfloat pix = intensity(texture(inTex, state.uv.xy + index*pixSize));\nsum += vec2(index / (index.x*index.x + index.y*index.y)) * pix;\n}\n}\nfloat color = length(sum);\nreturn vec4(vec3(color), 1.0);\n}\n\nvec4 RT_RootPixel()\n{\nMODULAR_FRAGMENT_INSERT\n}\n\nvoid main(void)\n{\nstate.lpos = vert;\nstate.norm = normalize(g_norm);\nstate.eyedir = normalize(eyeDir);\nstate.uv = tex1;\n#if amboccusevertcol\nstate.vcolor = vec4(vcolor);\n#else\nstate.vcolor = vec4(1.0);\n#endif\nstate.dotnd = dot(state.eyedir, state.norm);\nif (state.dotnd > 0.0)\nstate.dotnd = -state.dotnd;\n\n\nMODULAR_FRAGMENT_SAMPLING\n\nif (ColCorrAndCamResp != 0)\n{\n\nFragColor.rgb = exposure.rgb*ApplyColorCorrection(FragColor.rgb);\n\n\nif (highlightcompression > 0.0)\nFragColor.rgb = funchighlight(FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\nFragColor.rgb = vec3(funcdscs315_1_red(FragColor.r), funcdscs315_1_green(FragColor.g), funcdscs315_1_blue(FragColor.b));\n#elif (camresponse == 306)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\n\nFragColor.rgb = vec3(funcdscs315_2_green(FragColor.r), funcdscs315_2_green(FragColor.g), funcdscs315_2_green(FragColor.b));\n#endif\n\nif (gamma != 1.0)\nFragColor.rgb = pow(FragColor.rgb, vec3(1.0/gamma));\n\n#if BUILDVERSION < 423\nif (uhasLUTTexture != 0)\nFragColor.rgb = ApplyLUT(FragColor.rgb);\n#endif\n\nif (vignetting > 0.0)\nFragColor.rgb = FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n#if BUILDVERSION >= 423\nif (uhasLUTTexture != 0)\nFragColor.rgb = ApplyLUT(FragColor.rgb);\n#endif\n}\n\n#if OutputDoFDepth\nDepthValues = GetDepthValue();\n#endif\n}\n";var shaderes3_InfinityRT_ARKitfs = "#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nuniform int uhasDiffuseEnv;\nuniform samplerCube diffuseenv;\nuniform int uhasDiffuseTexture;\nuniform sampler2D diffusetexture;\nuniform mat3 diffuseUVT;\nuniform vec3 diffusecolor;\n\nuniform samplerCube channelcache1cubetexture;\nuniform samplerCube channelcache2cubetexture;\nuniform samplerCube channelcache3cubetexture;\nuniform float roughness;\nuniform vec3 mapblurlevel;\nuniform int uhasRoughnessTexture;\nuniform sampler2D roughnesstexture;\nuniform mat3 roughnessUVT;\nuniform vec3 intensitycolor;\nuniform int uhasIntensityTexture;\nuniform sampler2D intensitytexture;\nuniform mat3 intensityUVT;\n\nuniform samplerCube specularenv;\nuniform int uhasSpecularTexture;\nuniform sampler2D speculartexture;\nuniform mat3 specularUVT;\nuniform vec3 specularcolor;\nuniform int specularworkflow;\n\nuniform float ior_R0DG;\nuniform float ior_R0Intensity;\nuniform float ior_R0Clear;\nuniform int ior_R0DGFlip;\nuniform int ior_R0IntensityFlip;\nuniform int ior_R0ClearFlip;\n\nuniform int uhasAlphaTexture;\nuniform sampler2D alphatexture;\nuniform mat3 alphaUVT;\nuniform float alphacolor;\nuniform int decalalpha;\n\nuniform int sphericalwhirl;\nuniform float bumpuserscale;\nuniform ivec2 bumpTexData;\nuniform sampler2D bumptexture;\nuniform mat3 bumpUVT;\n\nuniform int uhasAdditionalTexture;\nuniform sampler2D additionaltexture;\nuniform mat3 additionalUVT;\nuniform vec3 additionalcolor;\n\nuniform ivec2 amboccTexData;\nuniform sampler2D ambocctexture;\nuniform mat3 amboccUVT;\n#if hasAmbOccTextureParam\nuniform vec3 amboccParamValue;\n#endif\n\n#if amboccusevertcol\nin float vcolor;\n#endif\n\nuniform float invertreflectiony;\nuniform float mipmapbias;\n\nuniform float gamma;\nuniform int refractionmode;\nuniform float highlightcompression;\nuniform int uhasLUTTexture;\nuniform sampler2D lutTex;\nuniform float vignetting;\n\nuniform vec3 exposure;\n\nin vec2 tex1;\nin vec2 tex2;\nin vec3 g_norm;\nin vec3 eyeDir;\nin vec3 vert;\nin vec3 lvert;\nin vec3 bu;\nin vec3 bv;\n\nuniform float cc_brightness;\nuniform float cc_contrast;\nuniform float cc_saturation;\nuniform vec3 cc_tint;\n\nuniform int ColCorrAndCamResp;\nuniform float secondaryMatAlpha;\nuniform int isSecondaryMat;\n\nuniform int hasIORDG;\nuniform int hasIORIntensity;\nuniform int hasIORClear;\n\n#if OutputDoFDepth\nlayout(location = 0) out vec4 FragColor;\nlayout(location = 1) out vec4 DepthValues;\n#else\nout vec4 FragColor;\n#endif\n\nSIRT_STANDARD_HEADER_INSERT\n\nvec3 ArKitDiffusePP(vec3 v00)\n{\nreturn v00;\n}\n\nvoid main(void)\n{\nvec3 reflectDir;\nvec3 neyeDir = normalize(eyeDir);\nvec3 ngnorm = normalize(g_norm);\n\nif (sphericalwhirl != 0) {\nvec2 bumpValue = normalize(tex1.xy - vec2(0.5));\nfloat tmpX = bumpValue.x;\nbumpValue.x = bumpValue.y;\nbumpValue.y = -tmpX;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\nngnorm = normalize(ngnorm);\n}\nelse if (bumpTexData.x != 0) {\nvec3 bumpValue = ReadRTTexture(bumptexture, bumpTexData, bumpUVT, ngnorm, neyeDir).xyz;\nbumpValue = (bumpValue-0.498039)*2.0;\nbumpValue *= bumpuserscale;\nngnorm += bumpValue.x * bu;\nngnorm += bumpValue.y * bv;\nngnorm = normalize(ngnorm);\n}\n\nreflectDir = reflect(neyeDir, ngnorm);\nreflectDir = normalize(reflectDir);\nreflectDir.y *= invertreflectiony;\n\nfloat totRoughness = roughness;\nif (uhasRoughnessTexture != 0) {\ntotRoughness = texture(roughnesstexture, (roughnessUVT*vec3(tex1,1.0)).xy, mipmapbias).r;\n}\n\n\nfloat alphaVal = 1.0;\nvec4 diffuseSum = vec4(diffusecolor, 1.0) * max(0.2, 1.0 - totRoughness);\nif (uhasDiffuseTexture != 0) {\nvec4 diffuseTexVal = texture(diffusetexture, (diffuseUVT*vec3(tex1,1.0)).xy, mipmapbias);\nalphaVal = diffuseTexVal.a;\ndiffuseSum *= diffuseTexVal;\n}\ndiffuseSum.rgb = ArKitDiffusePP(diffuseSum.rgb);\nvec4 diffuseSample;\nif (uhasDiffuseEnv != 0) {\ndiffuseSample = texture(diffuseenv, ngnorm);\n#if encodeenvmapsinmono\nif (diffuseSample.b<1.0) diffuseSample=vec4(vec3(diffuseSample.r+diffuseSample.g+diffuseSample.b), 1.0);\nelse diffuseSample=vec4(vec3(diffuseSample.b+(1.0-diffuseSample.r)+(1.0-diffuseSample.g)+2.0), 1.0);\n#else\ndiffuseSample = vec4(diffuseSample.rgb+(1.0-diffuseSample.a)*64.0, 1.0);\n#endif\n#if hdribias\ndiffuseSample.rgb = pow(diffuseSample.rgb, vec3(gamma));\n#endif\n}\n\n\nfloat factor1 = totRoughness;\nfloat fAcosAngle = clamp(-dot(neyeDir, ngnorm), 0.0, 1.0);\nfactor1 *= fAcosAngle;\nvec4 colA1, colB1;\nfloat mixAB1;\nif (factor1 <= mapblurlevel.r)\n{\ncolA1 = texture(specularenv, reflectDir);\ncolB1 = texture(channelcache1cubetexture, reflectDir);\nmixAB1 = clamp((factor1-0.000000)/mapblurlevel.r, 0.0, 1.0);\n#if encodeenvmapsinmono\nif (colA1.b<1.0) colA1=vec4(vec3(colA1.r+colA1.g+colA1.b), 1.0);\nelse colA1=vec4(vec3(colA1.b+(1.0-colA1.r)+(1.0-colA1.g)+2.0), 1.0);\nif (colB1.b<1.0) colB1=vec4(vec3(colB1.r+colB1.g+colB1.b), 1.0);\nelse colB1=vec4(vec3(colB1.b+(1.0-colB1.r)+(1.0-colB1.g)+2.0), 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\n#endif\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\ncolB1.rgb = pow(colB1.rgb, vec3(gamma));\n#endif\n}\nelse if (factor1 <= mapblurlevel.g)\n{\ncolA1 = texture(channelcache1cubetexture, reflectDir);\ncolB1 = texture(channelcache2cubetexture, reflectDir);\nmixAB1 = clamp((factor1-mapblurlevel.r)/(mapblurlevel.g-mapblurlevel.r), 0.0, 1.0);\n#if encodeenvmapsinmono\nif (colA1.b<1.0) colA1=vec4(vec3(colA1.r+colA1.g+colA1.b), 1.0);\nelse colA1=vec4(vec3(colA1.b+(1.0-colA1.r)+(1.0-colA1.g)+2.0), 1.0);\nif (colB1.b<1.0) colB1=vec4(vec3(colB1.r+colB1.g+colB1.b), 1.0);\nelse colB1=vec4(vec3(colB1.b+(1.0-colB1.r)+(1.0-colB1.g)+2.0), 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\n#endif\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\ncolB1.rgb = pow(colB1.rgb, vec3(gamma));\n#endif\n}\nelse\n{\ncolA1 = texture(channelcache2cubetexture, reflectDir);\ncolB1 = texture(channelcache3cubetexture, reflectDir);\nmixAB1 = clamp((factor1-mapblurlevel.g)/(mapblurlevel.b-mapblurlevel.g), 0.0, 1.0);\n#if encodeenvmapsinmono\nif (colA1.b<1.0) colA1=vec4(vec3(colA1.r+colA1.g+colA1.b), 1.0);\nelse colA1=vec4(vec3(colA1.b+(1.0-colA1.r)+(1.0-colA1.g)+2.0), 1.0);\nif (colB1.b<1.0) colB1=vec4(vec3(colB1.r+colB1.g+colB1.b), 1.0);\nelse colB1=vec4(vec3(colB1.b+(1.0-colB1.r)+(1.0-colB1.g)+2.0), 1.0);\n#else\ncolA1 = vec4(colA1.rgb+(1.0-colA1.a)*64.0, 1.0);\ncolB1 = vec4(colB1.rgb+(1.0-colB1.a)*64.0, 1.0);\n#endif\n#if hdribias\ncolA1.rgb = pow(colA1.rgb, vec3(gamma));\ncolB1.rgb = pow(colB1.rgb, vec3(gamma));\n#endif\n}\nvec4 glossySum = mix(colA1, colB1, mixAB1);\nvec4 intensitySum = vec4(intensitycolor, 1.0);\nif (uhasIntensityTexture != 0)\nintensitySum *= texture(intensitytexture, (intensityUVT*vec3(tex1,1.0)).xy, mipmapbias);\n\n\nvec4 specularSum = texture(specularenv, reflectDir);\n#if encodeenvmapsinmono\nif (specularSum.b<1.0) specularSum=vec4(vec3(specularSum.r+specularSum.g+specularSum.b), 1.0);\nelse specularSum=vec4(vec3(specularSum.b+(1.0-specularSum.r)+(1.0-specularSum.g)+2.0), 1.0);\n#else\nspecularSum = vec4(specularSum.rgb+(1.0-specularSum.a)*64.0, 1.0);\n#endif\n#if hdribias\nspecularSum.rgb = pow(specularSum.rgb, vec3(gamma));\n#endif\nvec4 specularScale = vec4(specularcolor, 1.0);\nif (uhasSpecularTexture != 0)\nspecularScale *= texture(speculartexture, (specularUVT*vec3(tex1,1.0)).xy, mipmapbias);\nspecularSum *= specularScale;\n\nfloat iorScale = ior_R0Intensity;\nif (specularworkflow == 0)\n{\nfloat fMetallic = intensitySum.r;\nif (fMetallic > 1.0)\nfMetallic = 1.0;\n\nintensitySum.rgb = mix(vec3((1.0 - ((diffuseSum.r + diffuseSum.g + diffuseSum.b) / 3.0))), diffuseSum.rgb, fMetallic);\ndiffuseSum.rgb = mix(diffuseSum.rgb, vec3(0.0), fMetallic);\niorScale = mix(ior_R0Intensity, 1.0, fMetallic);\n\nintensitySum *= 1.0 - roughness;\n}\ndiffuseSum *= diffuseSample;\nglossySum.rgb *= intensitySum.rgb;\n\n\nfloat dotnd = dot(neyeDir, ngnorm);\nif (dotnd > 0.0)\ndotnd = -dotnd;\nfloat powangle = pow(acos(-dotnd) / (3.14159625*0.5), 10.0);\n\n{\nfloat powangle_diffuse = powangle;\nif (ior_R0DGFlip == 1) powangle_diffuse = 1.0-powangle;\nfloat fresnelFactorDiffuse = iorScale + (1.0 - iorScale) * powangle_diffuse;\ndiffuseSum *= fresnelFactorDiffuse;\n}\n\n{\nfloat powangle_Intensity = powangle;\nif (ior_R0IntensityFlip == 1) powangle_Intensity = 1.0-powangle;\nfloat fresnelFactorIntensity = iorScale + (1.0 - iorScale) * powangle_Intensity;\nglossySum *= fresnelFactorIntensity;\n}\n\n{\nfloat powangle_Clear = powangle;\nif (ior_R0ClearFlip == 1) powangle_Clear = 1.0-powangle_Clear;\nfloat fresnelFactorClear = iorScale + (1.0 - iorScale) * powangle_Clear;\nspecularSum *= fresnelFactorClear;\n}\n\n\nvec4 additionalSum = vec4(additionalcolor, 1.0);\nif (uhasAdditionalTexture != 0)\nadditionalSum *= texture(additionaltexture, (additionalUVT*vec3(tex1,1.0)).xy, mipmapbias);\n\n\n#if amboccusevertcol\nvec4 ambOccSum = (diffuseSum + glossySum + specularSum) * (1.0-vcolor);\nFragColor = ambOccSum + additionalSum;\n#else\nif (amboccTexData.x != 0) {\nvec4 ambOccSum = diffuseSum + glossySum + specularSum + additionalSum;\n#if hasAmbOccTextureParam\nvec4 amboccScale = ReadRTTexture(ambocctexture, amboccTexData, amboccUVT, ngnorm, neyeDir);\nvec3 amboccParamValueInv = 1.0-amboccParamValue;\namboccScale = vec4(vec3(amboccParamValueInv.x*amboccParamValueInv.y*amboccScale.r+\namboccParamValue.x*amboccParamValueInv.y*amboccScale.g+\namboccParamValueInv.x*amboccParamValue.y*amboccScale.b+\namboccParamValue.x*amboccParamValue.y*amboccScale.a), 1.0);\nambOccSum *= amboccScale;\n#else\nambOccSum *= texture(ambocctexture, (amboccUVT*vec3(tex1,1.0)).xy, mipmapbias);\n#endif\nFragColor = ambOccSum;\n}\nelse\n{\nFragColor = diffuseSum + glossySum + specularSum + additionalSum;\n}\n#endif\n\n\n/*if (uhasAlphaTexture != 0)\n{\nFragColor.a = texture(alphatexture, (alphaUVT*vec3(tex1,1.0)).xy, mipmapbias).x;\nFragColor.a *= alphacolor;\n#if hasBrightReflections\nif (decalalpha == 0)\nFragColor.rgb *= FragColor.a;\n#endif\n}\nelse\n{\nFragColor.a = alphacolor;\n}*/\nFragColor.a = alphaVal;\n\nif (ColCorrAndCamResp != 0)\n{\nif (highlightcompression > 0.0)\nFragColor.rgb = funchighlight(FragColor.rgb, vec3(highlightcompression));\n\n#if (camresponse == 305)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\nFragColor.rgb = vec3(funcdscs315_1_red(FragColor.r), funcdscs315_1_green(FragColor.g), funcdscs315_1_blue(FragColor.b));\n#elif (camresponse == 306)\nFragColor.rgb = clamp(FragColor.rgb, vec3(0.0), vec3(1.0));\n\nFragColor.rgb = vec3(funcdscs315_2_green(FragColor.r), funcdscs315_2_green(FragColor.g), funcdscs315_2_green(FragColor.b));\n#endif\n\nif (gamma != 1.0)\nFragColor.rgb = pow(FragColor.rgb, vec3(1.0/gamma));\n\n#if BUILDVERSION < 423\nif (uhasLUTTexture != 0)\nFragColor.rgb = ApplyLUT(FragColor.rgb);\n#endif\n\nif (refractionmode == 1) {\nFragColor.rgb *= exposure.rgb;\n#if hasBrightReflections\nif (decalalpha != 0)\nFragColor.rgb *= FragColor.a;\n#endif\nreturn;\n}\n\nFragColor.rgb = exposure.rgb*ApplyColorCorrection(FragColor.rgb);\n\nif (vignetting > 0.0)\nFragColor.rgb = FragColor.rgb*(1.0-((length(2.0*((gl_FragCoord.xy/viewportsize)-0.5))*0.707107)*vignetting));\n\n#if BUILDVERSION >= 423\nif (uhasLUTTexture != 0)\nFragColor.rgb = ApplyLUT(FragColor.rgb);\n#endif\n\n#if hasBrightReflections\nif (decalalpha != 0)\nFragColor.rgb *= FragColor.a;\n#endif\n}\n\n#if OutputDoFDepth\nDepthValues = GetDepthValue();\n#endif\nif (isSecondaryMat != 0){\nFragColor.a = FragColor.a * secondaryMatAlpha;\nFragColor.r = FragColor.r * secondaryMatAlpha;\nFragColor.g = FragColor.g * secondaryMatAlpha;\nFragColor.b = FragColor.b * secondaryMatAlpha;\n}\n}\n";var shaderes3_InfinityRT_FXAAvs = "#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n\nin vec2 position;\nin vec2 uv;\n\n\nuniform vec2 iResolution;\n\n\n\nout vec2 v_rgbNW;\nout vec2 v_rgbNE;\nout vec2 v_rgbSW;\nout vec2 v_rgbSE;\nout vec2 v_rgbM;\n\nout vec2 vUv;\n\n\n\n\n\n\nvoid texcoords(vec2 fragCoord, vec2 resolution,\nout vec2 v_rgbNW, out vec2 v_rgbNE,\nout vec2 v_rgbSW, out vec2 v_rgbSE,\nout vec2 v_rgbM) {\nvec2 inverseVP = 1.0 / resolution.xy;\n\nv_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\nv_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\nv_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\nv_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\nv_rgbM = vec2(fragCoord * inverseVP);\n}\n\nvoid main() {\ngl_Position = vec4(position, 1.0, 1.0);\n\n\nvUv = uv;\n\n\n\n\nvec2 fragCoord = vUv * iResolution;\ntexcoords(fragCoord, iResolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}\n";var shaderes3_InfinityRT_FXAAfs = "#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n\n\nin vec2 v_rgbNW;\nin vec2 v_rgbNE;\nin vec2 v_rgbSW;\nin vec2 v_rgbSE;\nin vec2 v_rgbM;\nin vec2 vUv;\n\nuniform vec2 iResolution;\nuniform sampler2D iChannel0;\nuniform int enabled;\n\n#ifndef FXAA_REDUCE_MIN\n#define FXAA_REDUCE_MIN   (1.0/ 128.0)\n#endif\n#ifndef FXAA_REDUCE_MUL\n#define FXAA_REDUCE_MUL   (1.0 / 8.0)\n#endif\n#ifndef FXAA_SPAN_MAX\n#define FXAA_SPAN_MAX     8.0\n#endif\n\n\n\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,\nvec2 v_rgbNW, vec2 v_rgbNE,\nvec2 v_rgbSW, vec2 v_rgbSE,\nvec2 v_rgbM) {\nvec4 color;\nmediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\nvec3 rgbNW = texture(tex, v_rgbNW).xyz;\nvec3 rgbNE = texture(tex, v_rgbNE).xyz;\nvec3 rgbSW = texture(tex, v_rgbSW).xyz;\nvec3 rgbSE = texture(tex, v_rgbSE).xyz;\nvec4 texColor = texture(tex, v_rgbM);\nvec3 rgbM  = texColor.xyz;\nvec3 luma = vec3(0.299, 0.587, 0.114);\nfloat lumaNW = dot(rgbNW, luma);\nfloat lumaNE = dot(rgbNE, luma);\nfloat lumaSW = dot(rgbSW, luma);\nfloat lumaSE = dot(rgbSE, luma);\nfloat lumaM  = dot(rgbM,  luma);\nfloat lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\nfloat lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n\nmediump vec2 dir;\ndir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\ndir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\nfloat dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n(0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n\nfloat rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\ndir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\nmax(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\ndir * rcpDirMin)) * inverseVP;\n\nvec3 rgbA = 0.5 * (\ntexture(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\ntexture(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\nvec3 rgbB = rgbA * 0.5 + 0.25 * (\ntexture(tex, fragCoord * inverseVP + dir * -0.5).xyz +\ntexture(tex, fragCoord * inverseVP + dir * 0.5).xyz);\n\nfloat lumaB = dot(rgbB, luma);\nif ((lumaB < lumaMin) || (lumaB > lumaMax))\ncolor = vec4(rgbA, texColor.a);\nelse\ncolor = vec4(rgbB, texColor.a);\nreturn color;\n}\n\nout vec4 FragColor;\n\nvoid main() {\n\n\n\n\n\nvec2 fragCoord = vUv * iResolution;\n\nvec4 color;\nif (enabled != 0) {\ncolor = fxaa(iChannel0, fragCoord, iResolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n} else {\ncolor = texture(iChannel0, vUv);\n}\n\nFragColor = color;\n}\n";var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.checkStringArgs=function(a,b,c){if(null==a)throw new TypeError("The 'this' value for String.prototype."+c+" must not be null or undefined");if(b instanceof RegExp)throw new TypeError("First argument to String.prototype."+c+" must not be a regular expression");return a+""};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;$jscomp.ISOLATE_POLYFILLS=!1;
$jscomp.FORCE_POLYFILL_PROMISE=!1;$jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION=!1;$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){if(a==Array.prototype||a==Object.prototype)return a;a[b]=c.value;return a};
$jscomp.getGlobal=function(a){a=["object"==typeof globalThis&&globalThis,a,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error("Cannot find global object");};$jscomp.global=$jscomp.getGlobal(this);$jscomp.IS_SYMBOL_NATIVE="function"===typeof Symbol&&"symbol"===typeof Symbol("x");$jscomp.TRUST_ES6_POLYFILLS=!$jscomp.ISOLATE_POLYFILLS||$jscomp.IS_SYMBOL_NATIVE;$jscomp.polyfills={};
$jscomp.propertyToPolyfillSymbol={};$jscomp.POLYFILL_PREFIX="$jscp$";var $jscomp$lookupPolyfilledValue=function(a,b){var c=$jscomp.propertyToPolyfillSymbol[b];if(null==c)return a[b];c=a[c];return void 0!==c?c:a[b]};$jscomp.polyfill=function(a,b,c,d){b&&($jscomp.ISOLATE_POLYFILLS?$jscomp.polyfillIsolated(a,b,c,d):$jscomp.polyfillUnisolated(a,b,c,d))};
$jscomp.polyfillUnisolated=function(a,b,c,d){c=$jscomp.global;a=a.split(".");for(d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))return;c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:b})};
$jscomp.polyfillIsolated=function(a,b,c,d){var e=a.split(".");a=1===e.length;d=e[0];d=!a&&d in $jscomp.polyfills?$jscomp.polyfills:$jscomp.global;for(var f=0;f<e.length-1;f++){var g=e[f];if(!(g in d))return;d=d[g]}e=e[e.length-1];c=$jscomp.IS_SYMBOL_NATIVE&&"es6"===c?d[e]:null;b=b(c);null!=b&&(a?$jscomp.defineProperty($jscomp.polyfills,e,{configurable:!0,writable:!0,value:b}):b!==c&&(void 0===$jscomp.propertyToPolyfillSymbol[e]&&(c=1E9*Math.random()>>>0,$jscomp.propertyToPolyfillSymbol[e]=$jscomp.IS_SYMBOL_NATIVE?
$jscomp.global.Symbol(e):$jscomp.POLYFILL_PREFIX+c+"$"+e),$jscomp.defineProperty(d,$jscomp.propertyToPolyfillSymbol[e],{configurable:!0,writable:!0,value:b})))};$jscomp.polyfill("String.prototype.endsWith",function(a){return a?a:function(b,c){var d=$jscomp.checkStringArgs(this,b,"endsWith");b+="";void 0===c&&(c=d.length);c=Math.max(0,Math.min(c|0,d.length));for(var e=b.length;0<e&&0<c;)if(d[--c]!=b[--e])return!1;return 0>=e}},"es6","es3");
$jscomp.polyfill("Object.is",function(a){return a?a:function(b,c){return b===c?0!==b||1/b===1/c:b!==b&&c!==c}},"es6","es3");$jscomp.polyfill("Array.prototype.includes",function(a){return a?a:function(b,c){var d=this;d instanceof String&&(d=String(d));var e=d.length;c=c||0;for(0>c&&(c=Math.max(c+e,0));c<e;c++){var f=d[c];if(f===b||Object.is(f,b))return!0}return!1}},"es7","es3");
$jscomp.polyfill("String.prototype.includes",function(a){return a?a:function(b,c){return-1!==$jscomp.checkStringArgs(this,b,"includes").indexOf(b,c||0)}},"es6","es3");$jscomp.owns=function(a,b){return Object.prototype.hasOwnProperty.call(a,b)};$jscomp.assign=$jscomp.TRUST_ES6_POLYFILLS&&"function"==typeof Object.assign?Object.assign:function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(d)for(var e in d)$jscomp.owns(d,e)&&(a[e]=d[e])}return a};
$jscomp.polyfill("Object.assign",function(a){return a||$jscomp.assign},"es6","es3");$jscomp.polyfill("String.prototype.startsWith",function(a){return a?a:function(b,c){var d=$jscomp.checkStringArgs(this,b,"startsWith");b+="";var e=d.length,f=b.length;c=Math.max(0,Math.min(c|0,d.length));for(var g=0;g<f&&c<e;)if(d[c++]!=b[g++])return!1;return g>=f}},"es6","es3");
$jscomp.findInternal=function(a,b,c){a instanceof String&&(a=String(a));for(var d=a.length,e=0;e<d;e++){var f=a[e];if(b.call(c,f,e,a))return{i:e,v:f}}return{i:-1,v:void 0}};$jscomp.polyfill("Array.prototype.findIndex",function(a){return a?a:function(b,c){return $jscomp.findInternal(this,b,c).i}},"es6","es3");$jscomp.arrayIteratorImpl=function(a){var b=0;return function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}};$jscomp.arrayIterator=function(a){return{next:$jscomp.arrayIteratorImpl(a)}};
$jscomp.makeIterator=function(a){var b="undefined"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):$jscomp.arrayIterator(a)};
$jscomp.polyfill("Promise",function(a){function b(){this.batch_=null}function c(g){return g instanceof e?g:new e(function(h,k){h(g)})}if(a&&(!($jscomp.FORCE_POLYFILL_PROMISE||$jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION&&"undefined"===typeof $jscomp.global.PromiseRejectionEvent)||!$jscomp.global.Promise||-1===$jscomp.global.Promise.toString().indexOf("[native code]")))return a;b.prototype.asyncExecute=function(g){if(null==this.batch_){this.batch_=[];var h=this;this.asyncExecuteFunction(function(){h.executeBatch_()})}this.batch_.push(g)};
var d=$jscomp.global.setTimeout;b.prototype.asyncExecuteFunction=function(g){d(g,0)};b.prototype.executeBatch_=function(){for(;this.batch_&&this.batch_.length;){var g=this.batch_;this.batch_=[];for(var h=0;h<g.length;++h){var k=g[h];g[h]=null;try{k()}catch(l){this.asyncThrow_(l)}}}this.batch_=null};b.prototype.asyncThrow_=function(g){this.asyncExecuteFunction(function(){throw g;})};var e=function(g){this.state_=0;this.result_=void 0;this.onSettledCallbacks_=[];this.isRejectionHandled_=!1;var h=this.createResolveAndReject_();
try{g(h.resolve,h.reject)}catch(k){h.reject(k)}};e.prototype.createResolveAndReject_=function(){function g(l){return function(m){k||(k=!0,l.call(h,m))}}var h=this,k=!1;return{resolve:g(this.resolveTo_),reject:g(this.reject_)}};e.prototype.resolveTo_=function(g){if(g===this)this.reject_(new TypeError("A Promise cannot resolve to itself"));else if(g instanceof e)this.settleSameAsPromise_(g);else{a:switch(typeof g){case "object":var h=null!=g;break a;case "function":h=!0;break a;default:h=!1}h?this.resolveToNonPromiseObj_(g):
this.fulfill_(g)}};e.prototype.resolveToNonPromiseObj_=function(g){var h=void 0;try{h=g.then}catch(k){this.reject_(k);return}"function"==typeof h?this.settleSameAsThenable_(h,g):this.fulfill_(g)};e.prototype.reject_=function(g){this.settle_(2,g)};e.prototype.fulfill_=function(g){this.settle_(1,g)};e.prototype.settle_=function(g,h){if(0!=this.state_)throw Error("Cannot settle("+g+", "+h+"): Promise already settled in state"+this.state_);this.state_=g;this.result_=h;2===this.state_&&this.scheduleUnhandledRejectionCheck_();
this.executeOnSettledCallbacks_()};e.prototype.scheduleUnhandledRejectionCheck_=function(){var g=this;d(function(){if(g.notifyUnhandledRejection_()){var h=$jscomp.global.console;"undefined"!==typeof h&&h.error(g.result_)}},1)};e.prototype.notifyUnhandledRejection_=function(){if(this.isRejectionHandled_)return!1;var g=$jscomp.global.CustomEvent,h=$jscomp.global.Event,k=$jscomp.global.dispatchEvent;if("undefined"===typeof k)return!0;"function"===typeof g?g=new g("unhandledrejection",{cancelable:!0}):
"function"===typeof h?g=new h("unhandledrejection",{cancelable:!0}):(g=$jscomp.global.document.createEvent("CustomEvent"),g.initCustomEvent("unhandledrejection",!1,!0,g));g.promise=this;g.reason=this.result_;return k(g)};e.prototype.executeOnSettledCallbacks_=function(){if(null!=this.onSettledCallbacks_){for(var g=0;g<this.onSettledCallbacks_.length;++g)f.asyncExecute(this.onSettledCallbacks_[g]);this.onSettledCallbacks_=null}};var f=new b;e.prototype.settleSameAsPromise_=function(g){var h=this.createResolveAndReject_();
g.callWhenSettled_(h.resolve,h.reject)};e.prototype.settleSameAsThenable_=function(g,h){var k=this.createResolveAndReject_();try{g.call(h,k.resolve,k.reject)}catch(l){k.reject(l)}};e.prototype.then=function(g,h){function k(p,q){return"function"==typeof p?function(t){try{l(p(t))}catch(u){m(u)}}:q}var l,m,n=new e(function(p,q){l=p;m=q});this.callWhenSettled_(k(g,l),k(h,m));return n};e.prototype.catch=function(g){return this.then(void 0,g)};e.prototype.callWhenSettled_=function(g,h){function k(){switch(l.state_){case 1:g(l.result_);
break;case 2:h(l.result_);break;default:throw Error("Unexpected state: "+l.state_);}}var l=this;null==this.onSettledCallbacks_?f.asyncExecute(k):this.onSettledCallbacks_.push(k);this.isRejectionHandled_=!0};e.resolve=c;e.reject=function(g){return new e(function(h,k){k(g)})};e.race=function(g){return new e(function(h,k){for(var l=$jscomp.makeIterator(g),m=l.next();!m.done;m=l.next())c(m.value).callWhenSettled_(h,k)})};e.all=function(g){var h=$jscomp.makeIterator(g),k=h.next();return k.done?c([]):new e(function(l,
m){function n(t){return function(u){p[t]=u;q--;0==q&&l(p)}}var p=[],q=0;do p.push(void 0),q++,c(k.value).callWhenSettled_(n(p.length-1),m),k=h.next();while(!k.done)})};return e},"es6","es3");$jscomp.initSymbol=function(){};
$jscomp.polyfill("Symbol",function(a){if(a)return a;var b=function(f,g){this.$jscomp$symbol$id_=f;$jscomp.defineProperty(this,"description",{configurable:!0,writable:!0,value:g})};b.prototype.toString=function(){return this.$jscomp$symbol$id_};var c="jscomp_symbol_"+(1E9*Math.random()>>>0)+"_",d=0,e=function(f){if(this instanceof e)throw new TypeError("Symbol is not a constructor");return new b(c+(f||"")+"_"+d++,f)};return e},"es6","es3");
$jscomp.polyfill("Symbol.iterator",function(a){if(a)return a;a=Symbol("Symbol.iterator");for(var b="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),c=0;c<b.length;c++){var d=$jscomp.global[b[c]];"function"===typeof d&&"function"!=typeof d.prototype[a]&&$jscomp.defineProperty(d.prototype,a,{configurable:!0,writable:!0,value:function(){return $jscomp.iteratorPrototype($jscomp.arrayIteratorImpl(this))}})}return a},"es6",
"es3");$jscomp.iteratorPrototype=function(a){a={next:a};a[Symbol.iterator]=function(){return this};return a};$jscomp.iteratorFromArray=function(a,b){a instanceof String&&(a+="");var c=0,d=!1,e={next:function(){if(!d&&c<a.length){var f=c++;return{value:b(f,a[f]),done:!1}}d=!0;return{done:!0,value:void 0}}};e[Symbol.iterator]=function(){return e};return e};$jscomp.polyfill("Array.prototype.keys",function(a){return a?a:function(){return $jscomp.iteratorFromArray(this,function(b){return b})}},"es6","es3");
var M_PI=3.141592653589793,M_TWO_PI=2*M_PI,M_HALF_PI=M_PI/2,TEXTURE_MAP_ALPHATEX=0,TEXTURE_MAP_DIFFUSETEX=1,TEXTURE_MAP_DIFFUSEENV=2,TEXTURE_MAP_GLOSSYTEX=3,TEXTURE_MAP_SPECULARTEX=4,TEXTURE_MAP_SPECULARENV=5,TEXTURE_MAP_BUMPTEX=6,TEXTURE_MAP_ROUGHNESSTEX=7,TEXTURE_MAP_PHYSICAL1=8,TEXTURE_MAP_PHYSICAL2=9,TEXTURE_MAP_PHYSICAL3=10,TEXTURE_MAP_REFLECTIONTEX=11,TEXTURE_MAP_ADDITIONALTEX=12,TEXTURE_MAP_AMBOCCTEX=13,TEXTURE_MAP_SPECULARBLURENV=14,TEXTURE_MAP_REFLECTIONTEX2=15,TEXTURE_MAP_TRANSMISSIONTEX=
16,TEXTURE_MAP_CCROUGHNESSTEX=17,TEXTURE_MAP_TOTALTYPES=18,SHADER_DIFFUSETEX_MAP=1,SHADER_DIFFUSEENV_MAP=2,SHADER_GLOSSYTEX_MAP=4,SHADER_GLOSSYENV_MAP=8,SHADER_SPECULARTEX_MAP=16,SHADER_SPECULARENV_MAP=32,SHADER_ALPHA_MAP=64,UNIFORM_TYPE_MATRIX=0,UNIFORM_TYPE_VECTOR=1,UNIFORM_TYPE_FLOAT=2,UNIFORM_TYPE_ARRAY_VERTEX=3,UNIFORM_TYPE_ARRAY_UV=4,UNIFORM_TYPE_ARRAY_FLOAT=5,UNIFORM_TYPE_INT=6,UNIFORM_TYPE_FLOAT2=7,UNIFORM_TYPE_VECTOR4=8,UNIFORM_TYPE_MAT3=9,UNIFORM_TYPE_INT2=10,UNIFORM_TYPE_INT3=11,UNIFORM_TYPE_BLOCK=
12,UNIFORM_TYPE_INT4=13,FANIM_INTERPOLATION_STEP=0,FANIM_INTERPOLATION_LINEAR=1,FANIM_INTERPOLATION_BEZIER=2,FANIM_INTERPOLATION_TCB=3,FANIM_INFINITY_CONSTANT=0,FANIM_INFINITY_LINEAR=1,FANIM_INFINITY_CYCLE=2,FANIM_INFINITY_CYCLE_RELATIVE=3,FANIM_INFINITY_OSCILLATE=4,DOF_MISS_MODE_SPHERICAL=0,DOF_MISS_MODE_ORIGIN=1,DOF_MISS_MODE_NOCHANGE=2,DOF_APERTURE_MODE_DISTANCE=0,DOF_APERTURE_MODE_NAVDOLLY=1,infinityrt_identity=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
function MatrixMultiply(a,b){var c=[];c[0]=a[0]*b[0]+a[1]*b[4]+a[2]*b[8]+a[3]*b[12];c[1]=a[0]*b[1]+a[1]*b[5]+a[2]*b[9]+a[3]*b[13];c[2]=a[0]*b[2]+a[1]*b[6]+a[2]*b[10]+a[3]*b[14];c[3]=a[0]*b[3]+a[1]*b[7]+a[2]*b[11]+a[3]*b[15];c[4]=a[4]*b[0]+a[5]*b[4]+a[6]*b[8]+a[7]*b[12];c[5]=a[4]*b[1]+a[5]*b[5]+a[6]*b[9]+a[7]*b[13];c[6]=a[4]*b[2]+a[5]*b[6]+a[6]*b[10]+a[7]*b[14];c[7]=a[4]*b[3]+a[5]*b[7]+a[6]*b[11]+a[7]*b[15];c[8]=a[8]*b[0]+a[9]*b[4]+a[10]*b[8]+a[11]*b[12];c[9]=a[8]*b[1]+a[9]*b[5]+a[10]*b[9]+a[11]*b[13];
c[10]=a[8]*b[2]+a[9]*b[6]+a[10]*b[10]+a[11]*b[14];c[11]=a[8]*b[3]+a[9]*b[7]+a[10]*b[11]+a[11]*b[15];c[12]=a[12]*b[0]+a[13]*b[4]+a[14]*b[8]+a[15]*b[12];c[13]=a[12]*b[1]+a[13]*b[5]+a[14]*b[9]+a[15]*b[13];c[14]=a[12]*b[2]+a[13]*b[6]+a[14]*b[10]+a[15]*b[14];c[15]=a[12]*b[3]+a[13]*b[7]+a[14]*b[11]+a[15]*b[15];return c}function MatrixTranslation(a,b,c){var d=[1,,,,0,,,,0];d[12]=a;d[1]=0;d[5]=1;d[9]=0;d[13]=b;d[2]=0;d[6]=0;d[10]=1;d[14]=c;d[3]=0;d[7]=0;d[11]=0;d[15]=1;return d}
function MatrixScaling(a,b,c){var d=[];d[0]=a;d[4]=0;d[8]=0;d[12]=0;d[1]=0;d[5]=b;d[9]=0;d[13]=0;d[2]=0;d[6]=0;d[10]=c;d[14]=0;d[3]=0;d[7]=0;d[11]=0;d[15]=1;return d}function MatrixRotationAxis(a,b,c,d){var e=Math.sin(a);a=Math.cos(a);var f=[];f[0]=b*b*(1-a)+a;f[4]=b*c*(1-a)-d*e;f[8]=b*d*(1-a)+c*e;f[12]=0;f[1]=c*b*(1-a)+d*e;f[5]=c*c*(1-a)+a;f[9]=c*d*(1-a)-b*e;f[13]=0;f[2]=d*b*(1-a)-c*e;f[6]=d*c*(1-a)+b*e;f[10]=d*d*(1-a)+a;f[14]=0;f[3]=0;f[7]=0;f[11]=0;f[15]=1;return f}
function MatrixDet(a){return a[3]*a[6]*a[9]*a[12]-a[2]*a[7]*a[9]*a[12]-a[3]*a[5]*a[10]*a[12]+a[1]*a[7]*a[10]*a[12]+a[2]*a[5]*a[11]*a[12]-a[1]*a[6]*a[11]*a[12]-a[3]*a[6]*a[8]*a[13]+a[2]*a[7]*a[8]*a[13]+a[3]*a[4]*a[10]*a[13]-a[0]*a[7]*a[10]*a[13]-a[2]*a[4]*a[11]*a[13]+a[0]*a[6]*a[11]*a[13]+a[3]*a[5]*a[8]*a[14]-a[1]*a[7]*a[8]*a[14]-a[3]*a[4]*a[9]*a[14]+a[0]*a[7]*a[9]*a[14]+a[1]*a[4]*a[11]*a[14]-a[0]*a[5]*a[11]*a[14]-a[2]*a[5]*a[8]*a[15]+a[1]*a[6]*a[8]*a[15]+a[2]*a[4]*a[9]*a[15]-a[0]*a[6]*a[9]*a[15]-
a[1]*a[4]*a[10]*a[15]+a[0]*a[5]*a[10]*a[15]}
function MatrixInvert(a){var b=[],c=a[3]*a[6]*a[9]*a[12]-a[2]*a[7]*a[9]*a[12]-a[3]*a[5]*a[10]*a[12]+a[1]*a[7]*a[10]*a[12]+a[2]*a[5]*a[11]*a[12]-a[1]*a[6]*a[11]*a[12]-a[3]*a[6]*a[8]*a[13]+a[2]*a[7]*a[8]*a[13]+a[3]*a[4]*a[10]*a[13]-a[0]*a[7]*a[10]*a[13]-a[2]*a[4]*a[11]*a[13]+a[0]*a[6]*a[11]*a[13]+a[3]*a[5]*a[8]*a[14]-a[1]*a[7]*a[8]*a[14]-a[3]*a[4]*a[9]*a[14]+a[0]*a[7]*a[9]*a[14]+a[1]*a[4]*a[11]*a[14]-a[0]*a[5]*a[11]*a[14]-a[2]*a[5]*a[8]*a[15]+a[1]*a[6]*a[8]*a[15]+a[2]*a[4]*a[9]*a[15]-a[0]*a[6]*a[9]*
a[15]-a[1]*a[4]*a[10]*a[15]+a[0]*a[5]*a[10]*a[15];0!=c&&(c=1/c,b[0]=(a[6]*a[11]*a[13]-a[7]*a[10]*a[13]+a[7]*a[9]*a[14]-a[5]*a[11]*a[14]-a[6]*a[9]*a[15]+a[5]*a[10]*a[15])*c,b[1]=(a[3]*a[10]*a[13]-a[2]*a[11]*a[13]-a[3]*a[9]*a[14]+a[1]*a[11]*a[14]+a[2]*a[9]*a[15]-a[1]*a[10]*a[15])*c,b[2]=(a[2]*a[7]*a[13]-a[3]*a[6]*a[13]+a[3]*a[5]*a[14]-a[1]*a[7]*a[14]-a[2]*a[5]*a[15]+a[1]*a[6]*a[15])*c,b[3]=(a[3]*a[6]*a[9]-a[2]*a[7]*a[9]-a[3]*a[5]*a[10]+a[1]*a[7]*a[10]+a[2]*a[5]*a[11]-a[1]*a[6]*a[11])*c,b[4]=(a[7]*a[10]*
a[12]-a[6]*a[11]*a[12]-a[7]*a[8]*a[14]+a[4]*a[11]*a[14]+a[6]*a[8]*a[15]-a[4]*a[10]*a[15])*c,b[5]=(a[2]*a[11]*a[12]-a[3]*a[10]*a[12]+a[3]*a[8]*a[14]-a[0]*a[11]*a[14]-a[2]*a[8]*a[15]+a[0]*a[10]*a[15])*c,b[6]=(a[3]*a[6]*a[12]-a[2]*a[7]*a[12]-a[3]*a[4]*a[14]+a[0]*a[7]*a[14]+a[2]*a[4]*a[15]-a[0]*a[6]*a[15])*c,b[7]=(a[2]*a[7]*a[8]-a[3]*a[6]*a[8]+a[3]*a[4]*a[10]-a[0]*a[7]*a[10]-a[2]*a[4]*a[11]+a[0]*a[6]*a[11])*c,b[8]=(a[5]*a[11]*a[12]-a[7]*a[9]*a[12]+a[7]*a[8]*a[13]-a[4]*a[11]*a[13]-a[5]*a[8]*a[15]+a[4]*
a[9]*a[15])*c,b[9]=(a[3]*a[9]*a[12]-a[1]*a[11]*a[12]-a[3]*a[8]*a[13]+a[0]*a[11]*a[13]+a[1]*a[8]*a[15]-a[0]*a[9]*a[15])*c,b[10]=(a[1]*a[7]*a[12]-a[3]*a[5]*a[12]+a[3]*a[4]*a[13]-a[0]*a[7]*a[13]-a[1]*a[4]*a[15]+a[0]*a[5]*a[15])*c,b[11]=(a[3]*a[5]*a[8]-a[1]*a[7]*a[8]-a[3]*a[4]*a[9]+a[0]*a[7]*a[9]+a[1]*a[4]*a[11]-a[0]*a[5]*a[11])*c,b[12]=(a[6]*a[9]*a[12]-a[5]*a[10]*a[12]-a[6]*a[8]*a[13]+a[4]*a[10]*a[13]+a[5]*a[8]*a[14]-a[4]*a[9]*a[14])*c,b[13]=(a[1]*a[10]*a[12]-a[2]*a[9]*a[12]+a[2]*a[8]*a[13]-a[0]*a[10]*
a[13]-a[1]*a[8]*a[14]+a[0]*a[9]*a[14])*c,b[14]=(a[2]*a[5]*a[12]-a[1]*a[6]*a[12]-a[2]*a[4]*a[13]+a[0]*a[6]*a[13]+a[1]*a[4]*a[14]-a[0]*a[5]*a[14])*c,b[15]=(a[1]*a[6]*a[8]-a[2]*a[5]*a[8]+a[2]*a[4]*a[9]-a[0]*a[6]*a[9]-a[1]*a[4]*a[10]+a[0]*a[5]*a[10])*c);return b}
function MatrixRecompose(a,b,c){var d=infinityrt_identity.slice(0);d[0]=a[0];d[5]=a[1];d[10]=a[2];a=MatrixRotationAxis(b[0],1,0,0);d=MatrixMultiply(d,a);a=MatrixRotationAxis(b[1],0,1,0);d=MatrixMultiply(d,a);a=MatrixRotationAxis(b[2],0,0,1);d=MatrixMultiply(d,a);d[12]=c[0];d[13]=c[1];d[14]=c[2];return d}
function PointTransform(a,b){var c=[];c[0]=a[0]*b[0]+a[1]*b[4]+a[2]*b[8]+a[3]*b[12];c[1]=a[0]*b[1]+a[1]*b[5]+a[2]*b[9]+a[3]*b[13];c[2]=a[0]*b[2]+a[1]*b[6]+a[2]*b[10]+a[3]*b[14];c[3]=a[0]*b[3]+a[1]*b[7]+a[2]*b[11]+a[3]*b[15];return c}function PointDistance(a,b){return Math.sqrt((a[0]-b[0])*(a[0]-b[0])+(a[1]-b[1])*(a[1]-b[1])+(a[2]-b[2])*(a[2]-b[2]))}
var infinityrt_calcNormal=function(a,b,c){a=[a[0]-b[0],a[1]-b[1],a[2]-b[2]];b=[b[0]-c[0],b[1]-c[1],b[2]-c[2]];return[a[1]*b[2]-a[2]*b[1],a[2]*b[0]-a[0]*b[2],a[0]*b[1]-a[1]*b[0]]},infinityrt_normalize=function(a){var b=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);return 0==b?[0,0,0]:[a[0]/b,a[1]/b,a[2]/b]},infinityrt_length=function(a){return Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2])},infinityrt_dist=function(a,b){return Math.sqrt((a[0]-b[0])*(a[0]-b[0])+(a[1]-b[1])*(a[1]-b[1])+(a[2]-b[2])*(a[2]-b[2]))},
infinityrt_dp=function(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]},infinityrt_angle=function(a,b){return Math.acos(infinityrt_dp(a,b)/(infinityrt_length(a)*infinityrt_length(b)))},infinityrt_crossProduct=function(a,b){return[a[1]*b[2]-b[1]*a[2],a[2]*b[0]-b[2]*a[0],a[0]*b[1]-b[0]*a[1]]},infinityrt_vertex_mul_const=function(a,b){return[a[0]*b,a[1]*b,a[2]*b]},infinityrt_vertex_add=function(a,b){return[a[0]+b[0],a[1]+b[1],a[2]+b[2]]},infinityrt_vertex_sub=function(a,b){return[a[0]-b[0],a[1]-b[1],a[2]-
b[2]]},infinityrt_vertex_scladd=function(a,b,c){return[a[0]+b[0]*c,a[1]+b[1]*c,a[2]+b[2]*c]},infinityrt_vertex_div=function(a,b){return[a[0]/b[0],a[1]/b[1],a[2]/b[2]]},infinityrt_vtx_eq=function(a,b){return a[0]==b[0]&&a[1]==b[1]&&a[2]==b[2]},infinityrt_uv_eq=function(a,b){return a[0]==b[0]&&a[1]==b[1]},infinityrt_perspective=function(a,b,c,d){a=Math.tan(a*M_PI/360);return[1/(a*b),0,0,0,0,1/a,0,0,0,0,-(d+c)/(d-c),-1,0,0,-(2*d*c)/(d-c),0]},infinityrt_lookat=function(a,b,c,d,e,f){b=infinityrt_normalize([b[0]-
a[0],b[1]-a[1],b[2]-a[2]]);c=infinityrt_normalize(c);c=infinityrt_crossProduct(b,c);c=infinityrt_normalize(c);var g=infinityrt_crossProduct(c,b);g=infinityrt_normalize(g);a=infinityrt_vertex_scladd(a,c,d[0]*e);a=infinityrt_vertex_scladd(a,g,d[1]*e);a=f.RestrictViewSpace(a);d=[c[0],g[0],-b[0],0,c[1],g[1],-b[1],0,c[2],g[2],-b[2],0,0,0,0,1];e=new infinityrt_transform;e.translate(-a[0],-a[1],-a[2]);e.pushMatrix(d);return d=e.getResult()},infinityrt_compileShader=function(a,b,c,d){if("x-shader/x-fragment"==
c)c=a.createShader(a.FRAGMENT_SHADER);else if("x-shader/x-vertex"==c)c=a.createShader(a.VERTEX_SHADER);else return null;a.shaderSource(c,b);a.compileShader(c);return d&&!a.getShaderParameter(c,a.COMPILE_STATUS)?(console.log("***Compile Status "+a.getShaderInfoLog(c)),null):c},infinityrt_getShader=function(a,b,c){var d=document.getElementById(b);if(!d)return null;b="";for(var e=d.firstChild;e;)3==e.nodeType&&(b+=e.textContent),e=e.nextSibling;if("x-shader/x-fragment"==d.type)d=a.createShader(a.FRAGMENT_SHADER);
else if("x-shader/x-vertex"==d.type)d=a.createShader(a.VERTEX_SHADER);else return null;a.shaderSource(d,b);a.compileShader(d);return c&&!a.getShaderParameter(d,a.COMPILE_STATUS)?(console.log("***"+a.getShaderInfoLog(d)),null):d},infinityrt_getUrlVars=function(a){var b={};a.replace(/[?&]+([^=&]+)=([^&]*)/gi,function(c,d,e){b[d]=e});return b};
String.prototype.endsWith||(String.prototype.endsWith=function(a,b){var c=this.toString();if("number"!==typeof b||!isFinite(b)||Math.floor(b)!==b||b>c.length)b=c.length;b-=a.length;a=c.indexOf(a,b);return-1!==a&&a===b});String.prototype.startsWith||(String.prototype.startsWith=function(a,b){b=b||0;return this.indexOf(a,b)===b});function XMLGetNodeText(a){return a?"undefined"!=typeof a.textContent?a.textContent:a.firstChild.nodeValue:""}
function check_webp_feature(a,b,c){var d=new Image;d.onload=function(){b(a,0<d.width&&0<d.height)};d.onerror=function(){b(a,!1)};window.infinityrt_options&&!0===window.infinityrt_options.withCredentials?d.crossOrigin="use-credentials":c._usingwkwebview||(d.crossOrigin="anonymous");d.src="data:image/webp;base64,"+{lossy:"UklGRggCAABXRUJQVlA4IPwBAAAwOgCdASoAAgACPjEYjESiIaEQBAAgAwS0t3C7sI2gBPYB77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D1gAA/v/4LZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
lossless:"UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==",alpha:"UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==",animation:"UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA"}[a]}function ReplaceAll(a,b,c){return a.replace(new RegExp(b,"g"),c)}function Float32Concat(a,b){var c=a.length,d=new Float32Array(c+b.length);d.set(a);d.set(b,c);return d}
function CircularArray(a){this.maxLength=a}CircularArray.prototype=Object.create(Array.prototype);CircularArray.prototype.push=function(a){for(Array.prototype.push.call(this,a);this.length>this.maxLength;)this.shift()};var infinityrt_transform=function(a){return this.clearStack()};infinityrt_transform.prototype.setIdentity=function(){this.m_stack[this.c_stack]=this.getIdentity();this.valid==this.c_stack&&this.c_stack&&this.valid--;return this};
infinityrt_transform.prototype.getIdentity=function(){return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]};infinityrt_transform.prototype.invalidate=function(){this.valid=0;this.result=null;return this};
infinityrt_transform.prototype.getResult=function(){if(!this.c_stack)return this.m_stack[0];if(this.valid!=this.c_stack){if(this.valid>this.c_stack)for(;this.valid>this.c_stack+1;)this.valid--,this.m_cache.pop();else for(var a=this.valid;a<=this.c_stack;a++)this.m_cache[a]=0==a?this.m_stack[0]:this.multiply4_4by4_4(this.m_cache[a-1],this.m_stack[a]),this.valid++;this.result=this.m_cache[this.valid-1]}return this.result};
infinityrt_transform.prototype.pushMatrix=function(a){this.c_stack++;this.m_stack.push(a?a:this.getIdentity());return this};infinityrt_transform.prototype.popMatrix=function(){if(0==this.c_stack)return this;this.c_stack--;return this};infinityrt_transform.prototype.clearStack=function(){this.m_stack=[];this.m_cache=[];this.valid=this.c_stack=0;this.result=null;"undefined"!=typeof init_mat?this.m_stack[0]=init_mat:this.setIdentity();return this};
infinityrt_transform.prototype.multiply4_4by4_4=function(a,b){var c=[];c[0]=b[0]*a[0]+b[4]*a[1]+b[8]*a[2]+b[12]*a[3];c[1]=b[1]*a[0]+b[5]*a[1]+b[9]*a[2]+b[13]*a[3];c[2]=b[2]*a[0]+b[6]*a[1]+b[10]*a[2]+b[14]*a[3];c[3]=b[3]*a[0]+b[7]*a[1]+b[11]*a[2]+b[15]*a[3];c[4]=b[0]*a[4]+b[4]*a[5]+b[8]*a[6]+b[12]*a[7];c[5]=b[1]*a[4]+b[5]*a[5]+b[9]*a[6]+b[13]*a[7];c[6]=b[2]*a[4]+b[6]*a[5]+b[10]*a[6]+b[14]*a[7];c[7]=b[3]*a[4]+b[7]*a[5]+b[11]*a[6]+b[15]*a[7];c[8]=b[0]*a[8]+b[4]*a[9]+b[8]*a[10]+b[12]*a[11];c[9]=b[1]*
a[8]+b[5]*a[9]+b[9]*a[10]+b[13]*a[11];c[10]=b[2]*a[8]+b[6]*a[9]+b[10]*a[10]+b[14]*a[11];c[11]=b[3]*a[8]+b[7]*a[9]+b[11]*a[10]+b[15]*a[11];c[12]=b[0]*a[12]+b[4]*a[13]+b[8]*a[14]+b[12]*a[15];c[13]=b[1]*a[12]+b[5]*a[13]+b[9]*a[14]+b[13]*a[15];c[14]=b[2]*a[12]+b[6]*a[13]+b[10]*a[14]+b[14]*a[15];c[15]=b[3]*a[12]+b[7]*a[13]+b[11]*a[14]+b[15]*a[15];return c};infinityrt_transform.prototype.m_mat=infinityrt_transform.prototype.multiply4_4by4_4;
infinityrt_transform.prototype.multiply1_4by4_4=function(a,b){var c=[];c[0]=b[0]*a[0]+b[4]*a[1]+b[8]*a[2]+b[12]*a[3];c[1]=b[1]*a[0]+b[5]*a[1]+b[9]*a[2]+b[13]*a[3];c[2]=b[2]*a[0]+b[6]*a[1]+b[10]*a[2]+b[14]*a[3];c[3]=b[3]*a[0]+b[7]*a[1]+b[11]*a[2]+b[15]*a[3];return c};infinityrt_transform.prototype.m_vector=infinityrt_transform.prototype.multiply1_4by4_4;
infinityrt_transform.prototype.m_point=infinityrt_transform.prototype.multiply1_3by4_4=function(a,b){var c=[];c[0]=b[0]*a[0]+b[4]*a[1]+b[8]*a[2]+b[12];c[1]=b[1]*a[0]+b[5]*a[1]+b[9]*a[2]+b[13];c[2]=b[2]*a[0]+b[6]*a[1]+b[10]*a[2]+b[14];return c};
infinityrt_transform.prototype.translate=function(a,b,c){if("object"==typeof a)return this.translate(a[0],a[1],a[2]);var d=this.getIdentity();d[12]=a;d[13]=b;d[14]=c;this.m_stack[this.c_stack]=this.multiply4_4by4_4(this.m_stack[this.c_stack],d);this.valid==this.c_stack&&this.c_stack&&this.valid--;return this};
infinityrt_transform.prototype.scale=function(a,b,c){if("object"==typeof a)return this.scale(a[0],a[1],a[2]);var d=this.getIdentity();d[0]=a;d[5]=b;d[10]=c;this.m_stack[this.c_stack]=this.multiply4_4by4_4(this.m_stack[this.c_stack],d);this.valid==this.c_stack&&this.c_stack&&this.valid--;return this};
infinityrt_transform.prototype.rotate=function(a,b,c,d){if("object"==typeof a)return this.rotate(a[2],0,0,1),this.rotate(a[1],0,1,0),this.rotate(a[0],1,0,0),this;if(b||c||d){var e=Math.sin(M_PI/180*a);var f=Math.cos(M_PI/180*a)}b&&(a=this.getIdentity(),a[5]=f*b,a[9]=e*b,a[6]=-e*b,a[10]=f*b,this.m_stack[this.c_stack]=this.multiply4_4by4_4(this.m_stack[this.c_stack],a));c&&(b=this.getIdentity(),b[0]=f*c,b[8]=-e*c,b[2]=e*c,b[10]=f*c,this.m_stack[this.c_stack]=this.multiply4_4by4_4(this.m_stack[this.c_stack],
b));d&&(c=this.getIdentity(),c[0]=f*d,c[4]=e*d,c[1]=-e*d,c[5]=f*d,this.m_stack[this.c_stack]=this.multiply4_4by4_4(this.m_stack[this.c_stack],c));this.valid==this.c_stack&&this.c_stack&&this.valid--;return this};
var infinityrt_object=function(a){this._scene=a;this.numinstances=0;this.points=[];this.point_normals=[];this.uvs=[];this.uvs2=[];this.indiceslen=0;this.skinweights=this.cols=null;this.secondaryMaterialAlpha=this.secondaryMaterial=this.currentMaterial=0;this.compiled=null;this.visible=1;this.defer=!1;this.compresseddata=null;this.meshloaded=!1;this.indices=[];this._localbbmax=[0,0,0];this._localbbmin=[0,0,0];this._localmidpt=[0,0,0];this._texbbmin=[0,0];this._texbbmax=[1,1];this._tex2bbmin=[0,0];
this._tex2bbmax=[1,1];this.proggeom=!1};infinityrt_object.prototype.calcMidPt=function(){this._localmidpt[0]=.5*(this._localbbmax[0]+this._localbbmin[0]);this._localmidpt[1]=.5*(this._localbbmax[1]+this._localbbmin[1]);this._localmidpt[2]=.5*(this._localbbmax[2]+this._localbbmin[2])};infinityrt_object.prototype.addPoints=function(a){if(5==this._scene.geomgen)for(var b=0;b<a.length;b++)a[b]=(a[b]&65535)+(3<=b?a[b-3]:0);this.points=a};
infinityrt_object.prototype.addNormals=function(a){this.point_normals=a};infinityrt_object.prototype.addUVs=function(a){this.uvs=a};infinityrt_object.prototype.addUVs2=function(a){this.uvs2=a};infinityrt_object.prototype.addColors=function(a){this.cols=a};infinityrt_object.prototype.addSkinWeights=function(a){this.skinweights=a};infinityrt_object.prototype.setFaceMaterial=function(a){this.currentMaterial="object"==typeof a?a.material_id:a;this.usematerial="0|"+this.currentMaterial};
infinityrt_object.prototype.addIndices=function(a){if(5==this._scene.geomgen)for(var b=0;b<a.length/3;b++)1<=b&&(a[3*b]+=a[3*(b-1)]),a[3*b+2]+=a[3*b],a[3*b+1]=1<=b&&a[3*b]==a[3*(b-1)]?a[3*b+1]+a[3*(b-1)+1]:a[3*b+1]+a[3*b];this.indices=a;this._scene.selfcheck&&(this._scene.selfcheck.geom[2]+=a.length/3)};infinityrt_object.prototype.step=function(a,b){return b<a?0:1};infinityrt_object.prototype.AlterPoint=function(a,b){var c=6.59623*(a-Math.floor(a));return a-=(2*this.step(.5,c-Math.floor(c))-1)*b.eScale};
infinityrt_object.prototype.GetPoint=function(a){a*=3;a=[this.points[a],this.points[a+1],this.points[a+2],1];4==this._scene.geomgen?(a[0]=a[0]/65535*(this._localbbmax[0]-this._localbbmin[0])+this._localbbmin[0],a[1]=a[1]/65535*(this._localbbmax[1]-this._localbbmin[1])+this._localbbmin[1],a[2]=a[2]/65535*(this._localbbmax[2]-this._localbbmin[2])+this._localbbmin[2]):5==this._scene.geomgen&&(a[0]=a[0]/16383*(this._localbbmax[0]-this._localbbmin[0])+this._localbbmin[0],a[1]=a[1]/16383*(this._localbbmax[1]-
this._localbbmin[1])+this._localbbmin[1],a[2]=a[2]/16383*(this._localbbmax[2]-this._localbbmin[2])+this._localbbmin[2]);0!=this._scene.eScale&&(a[0]=this.AlterPoint(a[0],this._scene),a[1]=this.AlterPoint(a[1],this._scene),a[2]=this.AlterPoint(a[2],this._scene));return a};
infinityrt_object.prototype.GetNormal=function(a){a*=3;a=[this.point_normals[a],this.point_normals[a+1],this.point_normals[a+2],0];4==this._scene.geomgen?(a[0]/=32757,a[1]/=32757,a[2]/=32757):5==this._scene.geomgen&&(a[0]/=8191,a[1]/=8191,a[2]/=8191);return a};
infinityrt_object.prototype.GetUV=function(a){a*=2;if("undefined"==typeof this.uvs[a])return[0,0];a=[this.uvs[a],this.uvs[a+1]];4==this._scene.geomgen?(a[0]=a[0]/65535*(this._texbbmax[0]-this._texbbmin[0])+this._texbbmin[0],a[1]=a[1]/65535*(this._texbbmax[1]-this._texbbmin[1])+this._texbbmin[1]):5==this._scene.geomgen&&(a[0]=a[0]/16383*(this._texbbmax[0]-this._texbbmin[0])+this._texbbmin[0],a[1]=a[1]/16383*(this._texbbmax[1]-this._texbbmin[1])+this._texbbmin[1]);return a};
infinityrt_object.prototype.GetUV2=function(a){a*=2;if("undefined"==typeof this.uvs2[a])return[0,0];a=[this.uvs2[a],this.uvs2[a+1]];4==this._scene.geomgen?(a[0]=a[0]/65535*(this._tex2bbmax[0]-this._tex2bbmin[0])+this._tex2bbmin[0],a[1]=a[1]/65535*(this._tex2bbmax[1]-this._tex2bbmin[1])+this._tex2bbmin[1]):5==this._scene.geomgen&&(a[0]=a[0]/16383*(this._tex2bbmax[0]-this._tex2bbmin[0])+this._tex2bbmin[0],a[1]=a[1]/16383*(this._tex2bbmax[1]-this._tex2bbmin[1])+this._tex2bbmin[1]);return a};
infinityrt_object.prototype.CalcSurfTangents=function(a){if("undefined"!=typeof this.uvs&&0!=this.uvs.length){this.tanus=[];var b=[0,0,0],c=[0,0,0],d=[0,0,0],e=[0,0,0],f=[0,0,0],g=[0,0,0],h=[0,0,0],k=[0,0,0],l=[0,0,0],m=[0,0,0],n,p=this.indices.length/3;for(a=0;a<p;a++){for(n=0;3>n;n++){var q=this.indices[3*a+n];var t=this.GetPoint(q);b[n]=t[0];c[n]=t[1];d[n]=t[2];q=this.GetUV(q);e[n]=q[0];f[n]=q[1]}g[0]=b[1]-b[0];g[1]=c[1]-c[0];g[2]=d[1]-d[0];k[0]=e[1]-e[0];k[1]=f[1]-f[0];h[0]=b[2]-b[0];h[1]=c[2]-
c[0];h[2]=d[2]-d[0];l[0]=e[2]-e[0];l[1]=f[2]-f[0];m[0]=l[1]*g[0]-k[1]*h[0];m[1]=l[1]*g[1]-k[1]*h[1];m[2]=l[1]*g[2]-k[1]*h[2];m=infinityrt_normalize(m);for(n=0;3>n;n++)q=this.indices[3*a+n],q*=3,"undefined"==typeof this.tanus[q]?(this.tanus[q]=m[0],this.tanus[q+1]=m[1],this.tanus[q+2]=m[2]):(this.tanus[q]+=m[0],this.tanus[q+1]+=m[1],this.tanus[q+2]+=m[2])}for(a=0;a<this.tanus.length;a+=3)"undefined"!==typeof this.tanus[a]&&(b=Math.sqrt(this.tanus[a]*this.tanus[a]+this.tanus[a+1]*this.tanus[a+1]+this.tanus[a+
2]*this.tanus[a+2]),0==b?this.tanus[a]=this.tanus[a+1]=this.tanus[a+2]=0:(this.tanus[a]/=b,this.tanus[a+1]/=b,this.tanus[a+2]/=b))}};infinityrt_object.prototype.CreateDummyColors=function(){for(var a=[],b=0,c=0;c<this.points.length;c+=3)a[b++]=0,a[b++]=0,a[b++]=0,a[b++]=0;this.addColors(new Float32Array(a))};infinityrt_object.prototype.CreateDummySkinWeights=function(){for(var a=[],b=0,c=0;c<this.points.length;c+=3)a[b++]=1,a[b++]=0,a[b++]=0,a[b++]=0;this.addSkinWeights(new Uint16Array(a))};
infinityrt_object.prototype.loadToCard=function(a){if((null!=a._GeomToLvl0||null==this.compiled)&&null!=this.indices&&0!=this.indices.length){var b=a._Materials[this.currentMaterial];"undefined"==typeof this.tanus&&this.CalcSurfTangents(a);"Modular"==b.type&&null==this.cols&&this.CreateDummyColors();a.hasDeformation&&null==this.skinweights&&this.CreateDummySkinWeights();b=a.gl;this.compiled={gl_pnu:b.createBuffer(),gl_elements:b.createBuffer()};var c="undefined"!=typeof this.tanus?new Float32Array(this.tanus):
null,d=this.points.byteLength+this.point_normals.byteLength+this.uvs.byteLength;c&&(d+=c.byteLength);1<a.uvch&&(d+=this.uvs2.byteLength);b.bindBuffer(b.ARRAY_BUFFER,this.compiled.gl_pnu);b.bufferData(b.ARRAY_BUFFER,d,b.STATIC_DRAW);b.bufferSubData(b.ARRAY_BUFFER,0,this.points);this.compiled.ofs_normals=this.points.byteLength;b.bufferSubData(b.ARRAY_BUFFER,this.compiled.ofs_normals,this.point_normals);this.compiled.ofs_uvs=this.points.byteLength+this.point_normals.byteLength;b.bufferSubData(b.ARRAY_BUFFER,
this.compiled.ofs_uvs,this.uvs);c&&(this.compiled.ofs_tanus=this.points.byteLength+this.point_normals.byteLength+this.uvs.byteLength,b.bufferSubData(b.ARRAY_BUFFER,this.compiled.ofs_tanus,c));1<a.uvch&&(this.compiled.ofs_uvs2=this.points.byteLength+this.point_normals.byteLength+this.uvs.byteLength+c.byteLength,b.bufferSubData(b.ARRAY_BUFFER,this.compiled.ofs_uvs2,this.uvs2));null!=this.cols&&(this.compiled.gl_cols=b.createBuffer(),b.bindBuffer(b.ARRAY_BUFFER,this.compiled.gl_cols),b.bufferData(b.ARRAY_BUFFER,
this.cols,b.STATIC_DRAW));null!=this.skinweights&&(this.compiled.gl_skinweights=b.createBuffer(),b.bindBuffer(b.ARRAY_BUFFER,this.compiled.gl_skinweights),b.bufferData(b.ARRAY_BUFFER,this.skinweights,b.STATIC_DRAW));c=(a=65535<this.points.length/3)?Uint32Array:Uint16Array;this.type=a?b.UNSIGNED_INT:b.UNSIGNED_SHORT;b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,this.compiled.gl_elements);b.bufferData(b.ELEMENT_ARRAY_BUFFER,new c(this.indices),b.STATIC_DRAW);this.indiceslen=this.indices.length}};
infinityrt_object.prototype.destroy=function(a){delete a.mapMeshFiles[this._meshURL];this.unload(a)};infinityrt_object.prototype.unload=function(a){if(null==this.compiled)return!1;a=a.gl;a.deleteBuffer(this.compiled.gl_elements);a.deleteBuffer(this.compiled.gl_pnu);this.compiled=null;return!0};
var infinityrt_instance=function(a,b){this.matrix=infinityrt_identity.slice(0);this.matrixDirty=!0;this.children=[];this.mesh=null;this.visible=1;this.ready=!0;this.visibleGlow=this._nAmbOccChannel=this._fAlphaOffset=this._fPolygonOffset=0;this._bIncludeInPlanarReflect=this.visibleRefract=!1;this._bIncludeInDoFCalc=!0;this.doublesided=!1;this.walkedVisible=1;this.parent=a;2==b.type||3==b.type?this.refEnv=b.ref:(a=b.s._lstInstances.length,this._instancecol=[(a&255)/255,(a>>8&255)/255,(a>>16&255)/255,
1],b.s._lstInstances.push(this))};
infinityrt_instance.prototype.clone=function(a,b){var c=new infinityrt_instance(b,{type:2});b.children.push(c);c.name=a;"undefined"!=typeof this.mesh&&null!=this.mesh&&(c.mesh=this.mesh);c.matrix=this.matrix.slice(0);this.usermatrix&&(c.usermatrix=this.usermatrix.slice(0));c.matrixDirty=!0;c.visible=this.visible;c._fPolygonOffset=this._fPolygonOffset;c._fAlphaOffset=this._fAlphaOffset;c._nAmbOccChannel=this._nAmbOccChannel;c.visibleGlow=this.visibleGlow;c.visibleRefract=this.visibleRefract;c._bIncludeInPlanarReflect=
this._bIncludeInPlanarReflect;c._bIncludeInDoFCalc=this._bIncludeInDoFCalc;c.doublesided=this.doublesided;c.walkedVisible=this.walkedVisible;for(b=0;b<this.children.length;b++)this.children[b].clone(a+"_"+this.children[b].name,c);return c};infinityrt_instance.prototype.setIdentity=function(){this.usermatrix=infinityrt_identity.slice(0)};
infinityrt_instance.prototype.setTranslation=function(a){this.usermatrix||this.setIdentity();this.usermatrix[12]=a[0];this.usermatrix[13]=a[1];this.usermatrix[14]=a[2];this.matrixDirty=!0};infinityrt_instance.prototype.addTranslation=function(a){this.usermatrix||this.setIdentity();a=MatrixTranslation(a[0],a[1],a[2]);this.usermatrix=MatrixMultiply(a,this.usermatrix);this.matrixDirty=!0};
infinityrt_instance.prototype.addRotation=function(a,b){this.usermatrix||this.setIdentity();a=MatrixRotationAxis(a/180*M_PI,b[0],b[1],b[2]);this.usermatrix=MatrixMultiply(a,this.usermatrix);this.matrixDirty=!0};infinityrt_instance.prototype.addScale=function(a){this.usermatrix||this.setIdentity();a=MatrixScaling(a[0],a[1],a[2]);this.usermatrix=MatrixMultiply(a,this.usermatrix);this.matrixDirty=!0};
infinityrt_instance.prototype.matAssign=function(a){null!=this.mesh&&(this.mesh.currentMaterial=a,this.mesh.usematerial="0|"+this.mesh.currentMaterial,this.mesh._scene.stX&&(this.mesh._scene.stX._InitialMaterials[a]=a));for(var b=0;b<this.children.length;b++)this.children[b].matAssign(a);return!0};
infinityrt_instance.prototype.secondaryMatAssign=function(a){null!=this.mesh?(this.secondaryMaterial=a,this.mesh.secondaryMaterial=a,this.mesh._scene.stX&&(this.mesh._scene.stX._InitialMaterials[a]=a)):this.secondaryMaterial=a;for(var b=0;b<this.children.length;b++)this.children[b].secondaryMatAssign(a);return!0};
infinityrt_instance.prototype.secondaryMatCompleted=function(){null!=this.mesh?(this.secondaryMaterial=void 0,this.mesh._scene.matAnim.reverseMode||(this.mesh.currentMaterial=this.mesh.secondaryMaterial,this.mesh.usematerial="0|"+this.mesh.currentMaterial,this.mesh.secondaryMaterial=void 0)):this.secondaryMaterial=void 0;for(var a=0;a<this.children.length;a++)this.children[a].secondaryMatCompleted(materialID);return!0};
infinityrt_instance.prototype.zeroInstance=function(a){null!=this.mesh&&(this.mesh.numinstances=0,a[this.mesh._meshURL]=this.mesh);if("undefined"!=typeof this.children)for(var b=0;b<this.children.length;b++)this.children[b].zeroInstance(a)};infinityrt_instance.prototype.markInstance=function(a){(a=a&&this.visible)&&null!=this.mesh&&this.mesh.numinstances++;if("undefined"!=typeof this.children)for(var b=0;b<this.children.length;b++)this.children[b].markInstance(a)};
infinityrt_instance.prototype.checkCull=function(a){if(void 0==this.globalbbextent||void 0!=this.joints)return!0;for(var b=0;b<a.clipPlanes.length;b++){var c=a.clipPlanes[b];if(infinityrt_dp(this.globalbbextent.centre,c.norm)+infinityrt_dp(this.globalbbextent.extent,c.absnorm)<c.pos)return!1}return!0};
function infinityrt_AddModularUniforms(a,b,c){for(var d=0;d<b.length;d++){var e=b[d];"float"==e.type?c.addFloat(e.name,e.val):"int"==e.type?c.addInt(e.name,e.val):"vec2"==e.type?c.addFloat2(e.name,e.val.split(",")):"vec3"==e.type?c.addVector(e.name,e.val.split(",")):"vec4"==e.type?c.addVector4(e.name,e.val.split(",")):"sampler"==e.type?c.addInt(e.name):"mat3"==e.type?c.addMat3(e.name,e.val.split(",")):console.log("Modular '"+a+"' Uniform type unknown '"+e.type+"'")}}
function infinityrt_SetModularUniforms(a,b,c,d){a=0;for(var e={},f=0;f<b.length;f++){var g=b[f];if("sampler"==g.type){var h=e[g.val];"undefined"==typeof h&&(h=e[g.val]=a,a++);d._Texture_ref[g.val].use(d.gl.TEXTURE0+h);c.setInt(g.name,h)}}return a}
var totalNumShaders=0,infinityrt_shader=function(a,b,c,d,e){"undefined"==typeof e&&(e=!0);this.numShader=++totalNumShaders;this.extParallelCompile=d;this.gl=c;this.attribs=[];this.uniforms=[];this.uniform_type=[];this.uniform_block_bind=1;this.frameDirty=!0;-1!=a.indexOf("\n")?this.vertexShader=infinityrt_compileShader(this.gl,a,"x-shader/x-vertex",e):this.vertexShader=infinityrt_getShader(this.gl,a,e);-1!=b.indexOf("\n")?this.fragmentShader=infinityrt_compileShader(this.gl,b,"x-shader/x-fragment",
e):this.fragmentShader=infinityrt_getShader(this.gl,b,e);this.shader=this.gl.createProgram();this.gl.attachShader(this.shader,this.vertexShader);this.gl.attachShader(this.shader,this.fragmentShader);this.gl.linkProgram(this.shader);e&&this.checkCompilation()};
infinityrt_shader.prototype.checkCompilation=function(){var a=!0;if(null!=this.extParallelCompile&&1!=this.gl.getProgramParameter(this.shader,this.extParallelCompile.COMPLETION_STATUS_KHR))return!0;this.gl.getProgramParameter(this.shader,this.gl.LINK_STATUS)||(a=!1,this.vertexShader&&!this.gl.getShaderParameter(this.vertexShader,this.gl.COMPILE_STATUS)?console.log("***Vertex compile error: ",this.gl.getShaderInfoLog(this.vertexShader)):this.fragmentShader&&!this.gl.getShaderParameter(this.fragmentShader,
this.gl.COMPILE_STATUS)&&console.log("***Fragment compile error: ",this.gl.getShaderInfoLog(this.fragmentShader)),console.log("***Shader link error: "+this.gl.getProgramInfoLog(this.shader)));this.gl.deleteShader(this.vertexShader);this.gl.deleteShader(this.fragmentShader);this.vertexShader=null;return a};
infinityrt_shader.prototype.addVertexShaderPosVars=function(a){this.addVertexArray("aVertexPosition");a.hasDeformation&&(this.addInt("numBones"),this.addMatrix("matBone[0]"),this.addMatrix("matBone[1]"),this.addMatrix("matBone[2]"),this.addMatrix("matBone[3]"),this.addVertexArray("a_skinweights"))};infinityrt_shader.prototype.addMatrix=function(a){void 0==this.uniforms[a]&&(this.use(),this.uniforms[a]=this.gl.getUniformLocation(this.shader,a),this.uniform_type[a]=UNIFORM_TYPE_MATRIX)};
infinityrt_shader.prototype.addMat3=function(a,b){void 0==this.uniforms[a]&&(this.use(),this.uniforms[a]=this.gl.getUniformLocation(this.shader,a),this.uniform_type[a]=UNIFORM_TYPE_MAT3,"undefined"!=typeof b&&this.setMat3(a,b))};infinityrt_shader.prototype.addVector=function(a,b){void 0==this.uniforms[a]&&(this.use(),this.uniforms[a]=this.gl.getUniformLocation(this.shader,a),this.uniform_type[a]=UNIFORM_TYPE_VECTOR,"undefined"!=typeof b&&this.setVector(a,b))};
infinityrt_shader.prototype.addVector4=function(a,b){void 0==this.uniforms[a]&&(this.use(),this.uniforms[a]=this.gl.getUniformLocation(this.shader,a),this.uniform_type[a]=UNIFORM_TYPE_VECTOR4,"undefined"!=typeof b&&this.setVector4(a,b))};infinityrt_shader.prototype.addFloat=function(a,b){void 0==this.uniforms[a]&&(this.use(),this.uniforms[a]=this.gl.getUniformLocation(this.shader,a),this.uniform_type[a]=UNIFORM_TYPE_FLOAT,"undefined"!=typeof b&&this.setFloat(a,b))};
infinityrt_shader.prototype.addFloat2=function(a,b){void 0==this.uniforms[a]&&(this.use(),this.uniforms[a]=this.gl.getUniformLocation(this.shader,a),this.uniform_type[a]=UNIFORM_TYPE_FLOAT2,"undefined"!=typeof b&&this.setFloat2(a,b))};infinityrt_shader.prototype.addVertexArray=function(a){void 0==this.uniforms[a]&&(this.use(),this.attribs[a]=this.uniforms[a]=this.gl.getAttribLocation(this.shader,a),this.uniform_type[a]=UNIFORM_TYPE_ARRAY_VERTEX)};
infinityrt_shader.prototype.addUVArray=function(a){void 0==this.uniforms[a]&&(this.use(),this.attribs[a]=this.uniforms[a]=this.gl.getAttribLocation(this.shader,a),this.uniform_type[a]=UNIFORM_TYPE_ARRAY_UV)};
infinityrt_shader.prototype.addBlock=function(a,b){var c=this.gl,d=c.getUniformBlockIndex(this.shader,a);if(null==d)return null;if("BlockFrame"==a){if("undefined"==typeof b.buffBlockFrame){b.buffBlockFrame=c.createBuffer();c.bindBuffer(c.UNIFORM_BUFFER,b.buffBlockFrame);var e=c.getActiveUniformBlockParameter(this.shader,d,c.UNIFORM_BLOCK_DATA_SIZE);c.bufferData(c.UNIFORM_BUFFER,e,c.DYNAMIC_DRAW);c.bindBuffer(c.UNIFORM_BUFFER,null)}b=b.buffBlockFrame}else"BlockInstance"==a?("undefined"==typeof b.buffBlockInstancePH&&
(b.buffBlockInstancePH=c.createBuffer(),c.bindBuffer(c.UNIFORM_BUFFER,b.buffBlockInstancePH),b.buffBlockInstancePHSize=c.getActiveUniformBlockParameter(this.shader,d,c.UNIFORM_BLOCK_DATA_SIZE),c.bufferData(c.UNIFORM_BUFFER,b.buffBlockInstancePHSize,c.DYNAMIC_DRAW),c.bindBuffer(c.UNIFORM_BUFFER,null)),b=b.buffBlockInstancePH):"BlockLights"==a?("undefined"==typeof b.buffBlockLights&&(b.buffBlockLights=c.createBuffer(),c.bindBuffer(c.UNIFORM_BUFFER,b.buffBlockLights),b.buffBlockLightsSize=c.getActiveUniformBlockParameter(this.shader,
d,c.UNIFORM_BLOCK_DATA_SIZE),c.bufferData(c.UNIFORM_BUFFER,b.buffBlockLightsSize,c.DYNAMIC_DRAW),c.bindBuffer(c.UNIFORM_BUFFER,null)),b=b.buffBlockLights):(b=c.createBuffer(),c.bindBuffer(c.UNIFORM_BUFFER,b),e=c.getActiveUniformBlockParameter(this.shader,d,c.UNIFORM_BLOCK_DATA_SIZE),c.bufferData(c.UNIFORM_BUFFER,e,c.DYNAMIC_DRAW),c.bindBuffer(c.UNIFORM_BUFFER,null));if(this.uniforms[a])return b;c.uniformBlockBinding(this.shader,d,this.uniform_block_bind);c.bindBufferBase(c.UNIFORM_BUFFER,this.uniform_block_bind,
b);this.uniform_type[a]=UNIFORM_TYPE_BLOCK;this.uniforms[a]=this.uniform_block_bind;this.uniform_block_bind++;return b};infinityrt_shader.prototype.addInt=function(a,b){if(void 0==this.uniforms[a]){this.use();var c=this.gl.getUniformLocation(this.shader,a);null!=c&&(this.uniforms[a]=c,this.uniform_type[a]=UNIFORM_TYPE_INT,"undefined"!=typeof b&&this.setInt(a,b))}};
infinityrt_shader.prototype.addInt2=function(a,b){if(void 0==this.uniforms[a]){this.use();var c=this.gl.getUniformLocation(this.shader,a);null!=c&&(this.uniforms[a]=c,this.uniform_type[a]=UNIFORM_TYPE_INT2,"undefined"!=typeof b&&this.setInt2(a,b))}};infinityrt_shader.prototype.addInt3=function(a,b){if(void 0==this.uniforms[a]){this.use();var c=this.gl.getUniformLocation(this.shader,a);null!=c&&(this.uniforms[a]=c,this.uniform_type[a]=UNIFORM_TYPE_INT3,"undefined"!=typeof b&&this.setInt3(a,b))}};
infinityrt_shader.prototype.addInt4=function(a,b){if(void 0==this.uniforms[a]){this.use();var c=this.gl.getUniformLocation(this.shader,a);null!=c&&(this.uniforms[a]=c,this.uniform_type[a]=UNIFORM_TYPE_INT4,"undefined"!=typeof b&&this.setInt4(a,b))}};infinityrt_shader.prototype.use=function(a){this.gl.useProgram(this.shader);a&&(a.curMat=null)};
infinityrt_shader.prototype.init=function(a){"undefined"==typeof a&&(a=!0);for(var b in this.uniforms)switch(this.uniform_type[b]){case UNIFORM_TYPE_ARRAY_VERTEX:case UNIFORM_TYPE_ARRAY_UV:case UNIFORM_TYPE_ARRAY_FLOAT:-1!=this.uniforms[b]&&(a?this.gl.enableVertexAttribArray(this.uniforms[b]):this.gl.disableVertexAttribArray(this.uniforms[b]))}};
infinityrt_shader.prototype.attribinit=function(a,b){for(var c in this.attribs)-1!=this.uniforms[c]&&(a?this.gl.enableVertexAttribArray(this.uniforms[c]):this.gl.disableVertexAttribArray(this.uniforms[c]))};infinityrt_shader.prototype.setMat3=function(a,b){this.gl.uniformMatrix3fv(this.uniforms[a],!1,b)};infinityrt_shader.prototype.setMatrix=function(a,b){this.gl.uniformMatrix4fv(this.uniforms[a],!1,b)};infinityrt_shader.prototype.setInt=function(a,b){this.gl.uniform1i(this.uniforms[a],b)};
infinityrt_shader.prototype.setInt2=function(a,b){this.gl.uniform2iv(this.uniforms[a],b)};infinityrt_shader.prototype.setInt3=function(a,b){this.gl.uniform3iv(this.uniforms[a],b)};infinityrt_shader.prototype.setInt4=function(a,b){this.gl.uniform4iv(this.uniforms[a],b)};infinityrt_shader.prototype.setFloat=function(a,b){this.gl.uniform1f(this.uniforms[a],b)};infinityrt_shader.prototype.setFloat2=function(a,b){this.gl.uniform2f(this.uniforms[a],b[0],b[1])};
infinityrt_shader.prototype.setVector=function(a,b){this.gl.uniform3fv(this.uniforms[a],b)};infinityrt_shader.prototype.setVector4=function(a,b){this.gl.uniform4fv(this.uniforms[a],b)};var infinityrt_texture_lzma=function(a){this.data=new Uint8Array(a.buffer,a.byteOffset,a.byteLength);this.offset=0;this.len=this.data.length};infinityrt_texture_lzma.prototype.writeByte=function(a){this.data[this.offset]=a;this.offset++};
var infinityrt_texture=function(a,b,c,d){try{this.tex_id=d._Textures.length,this.name=a,this.type=b,this._scene=d,this.retries=0,this.loaded=!1,this._wrap="clamp",this._coord=0,this.fAngVector=[.1,.16,.13],this.isNormalMap=this._bAnisotropicFiltering=this.mipmap=!1,this.lvl=1,this.lvl=d.smartDeferral?0:1,this.blksd=0,this._uvTransform=[1,0,0,0,1,0,0,0,1],this._img_path=c,this._decoded=!1,this._images=[],this._downloaddata=null,this.filtering=d.gl.LINEAR,this._lvlfilenames=[],this.smartDefer=this.defer=
!1,this._ovRLvl=-1,this.dl=!1,this.refs=0,d._Textures[this.tex_id]=null,d._Texture_ref[a]=this,d._TextureObjs.push(this)}catch(e){console.log("***ERROR: Loading Texture '"+a+"' "+e)}};infinityrt_texture.prototype.delRef=function(){this.refs--};infinityrt_texture.prototype.addRef=function(){this.refs++};infinityrt_texture.prototype.destroy=function(){this._scene._TextureObjs.splice(this._scene._TextureObjs.indexOf(this),1);delete this._scene._Texture_ref[this.name];this.unloadGPU()};
infinityrt_texture.prototype.unloadGPU=function(){this._scene.gl.deleteTexture(this._scene._Textures[this.tex_id]);this._scene._Textures[this.tex_id]=null;this._scene.manageTexs&&(this._scene._Images[this.tex_id]=void 0,this.dl=!1);this.loaded=!1};infinityrt_texture.prototype.unload=function(){this.unloadGPU();this._scene._Textures[this.tex_id]=null;this._images=[]};var g_frg_Scr="#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nuniform sampler2D colorTexture;\nuniform vec2 texSize;uniform sampler2D scrtable;\nvarying vec2 vUv;void main() {int codesize=16;int cblocksize=128;ivec2 p = ivec2(vUv*texSize);ivec2 tile=p/cblocksize;ivec2 cb=ivec2(mod(vec2(p), float(cblocksize)));ivec2 jb=cb/8;ivec2 jo=ivec2(mod(vec2(cb),8.0));int scrindex=int(255.0*texture2D(scrtable, vec2(float(jb.x+(jb.y*codesize))/255.0, 0.0)).r);ivec2 scrjb=ivec2(mod(float(scrindex),float(codesize)), float(scrindex/codesize));ivec2 scrcb=scrjb*8;ivec2 source=jo+scrcb+(tile*cblocksize);vec2 sourceuv = vec2(source)/texSize;gl_FragColor = vec4(sourceuv, 0.0, 1.0 );gl_FragColor = texture2D( colorTexture, sourceuv );}";
function FourCCToInt32(a){return a.charCodeAt(0)+(a.charCodeAt(1)<<8)+(a.charCodeAt(2)<<16)+(a.charCodeAt(3)<<24)}function Int32ToFourCC(a){return String.fromCharCode(a&255,a>>8&255,a>>16&255,a>>24&255)}
function uploadDDSLevels(a,b,c,d){var e=FourCCToInt32("DXT1"),f=FourCCToInt32("DXT5"),g=new Int32Array(c,0,31),h;if(542327876!=g[0])return console.error("Invalid magic number in DDS header"),null;if(!g[20]&4)return console.error("Unsupported format, must contain a FourCC code"),null;var k=g[21];switch(k){case e:e=8;b=b.COMPRESSED_RGBA_S3TC_DXT1_EXT;break;case f:e=16;b=b.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return console.error("Unsupported FourCC code:",Int32ToFourCC(k)),null}f=1;g[2]&131072&&
!1!==d&&(f=Math.max(1,g[7]));d=g[4];k=g[3];var l=g[1]+4;for(h=0;h<f;++h){g=Math.max(4,d)/4*Math.max(4,k)/4*e;var m=new Uint8Array(c,l,g);a.compressedTexImage2D(a.TEXTURE_2D,h,b,d,k,0,m);l+=g;d*=.5;k*=.5}return f}
infinityrt_texture.prototype.use=function(a,b){b=this._scene.gl;if(1!=this.defer||this.dl){b.activeTexture(a);if(!this.loaded)if(this._scene.prepXR&&(this._scene.prepXR.uploaded=!0),"Noise"==this.type)this._scene._Textures[this.tex_id]=this.renderNoiseTexture();else if("Video"==this.type)null==this._scene._Textures[this.tex_id]&&(this._scene._Textures[this.tex_id]=b.createTexture()),b.pixelStorei(b.UNPACK_FLIP_Y_WEBGL,!0),b.bindTexture(b.TEXTURE_2D,this._scene._Textures[this.tex_id]),b.texImage2D(b.TEXTURE_2D,
0,b.RGBA,b.RGBA,b.UNSIGNED_BYTE,this.video),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.LINEAR),this._scene._animRequiresClear=!0;else{this._scene._Textures[this.tex_id]=b.createTexture();this.loaded=!0;this.lvl=1;try{if("FileCube3x2"==this.type){b.pixelStorei(b.UNPACK_FLIP_Y_WEBGL,!1);b.bindTexture(b.TEXTURE_CUBE_MAP,this._scene._Textures[this.tex_id]);b.texParameteri(b.TEXTURE_CUBE_MAP,
b.TEXTURE_MAG_FILTER,this.filtering);this.mipmap?(b.texParameteri(b.TEXTURE_CUBE_MAP,b.TEXTURE_MIN_FILTER,b.LINEAR_MIPMAP_LINEAR),b.texParameteri(b.TEXTURE_CUBE_MAP,b.TEXTURE_BASE_LEVEL,0),b.texParameteri(b.TEXTURE_CUBE_MAP,b.TEXTURE_MAX_LEVEL,10)):b.texParameteri(b.TEXTURE_CUBE_MAP,b.TEXTURE_MIN_FILTER,this.filtering);b.texParameteri(b.TEXTURE_CUBE_MAP,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_CUBE_MAP,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);for(a=0;6>a;a++){var c=document.createElement("canvas");
c.width=c.height=this._images[0].height/2;var d=c.getContext("2d");switch(a){case 0:b.texImage2D(b.TEXTURE_CUBE_MAP_POSITIVE_X,0,b.RGBA,b.RGBA,b.UNSIGNED_BYTE,c);d.drawImage(this._images[0],-2*c.width,0);break;case 1:d.drawImage(this._images[0],-c.width,0);break;case 2:d.drawImage(this._images[0],0,0);break;case 3:d.drawImage(this._images[0],-2*c.width,-c.width);break;case 4:d.drawImage(this._images[0],-c.width,-c.width);break;case 5:d.scale(-1,-1),d.drawImage(this._images[0],-c.width,-2*c.width)}b.texImage2D(b.TEXTURE_CUBE_MAP_POSITIVE_X+
a,0,b.RGBA,b.RGBA,b.UNSIGNED_BYTE,c)}this.mipmap&&b.generateMipmap(b.TEXTURE_CUBE_MAP);this._size=[this._images[0].width,this._images[0].height];b.bindTexture(b.TEXTURE_CUBE_MAP,null);this._scene.isFirefox&&this._scene.gl.getError();this._images=[]}else if("FileCompressed"==this.type){a=null;if(this._img_path.endsWith(".pvr")){var e=new CTM.Stream(new Uint8Array(this._downloaddata)),f=e.readInt32();e.readInt32();var g=new Uint8Array(f),h=new infinityrt_texture_lzma(g);if(LZMA.decompress(e,e,h,f)){for(var k=
new Int32Array(13),l=new CTM.Stream(g),m=0;13>m;m++)k[m]=l.readInt32();if(55727696==k[0]){switch(k[2]){case 0:var n=35841;break;case 1:n=35843;break;case 2:n=35840;break;case 3:n=35842;break;case 6:n=36196;break;case 7:n=33776;break;case 9:n=33778;break;case 5:n=33779}this.internalfmt=n;this.width=k[7];this.height=k[6];var p=k[12]+52;m=null;"function"===typeof g.subarray?m=g.subarray(p):"function"===typeof g.slice?m=g.slice(p):"function"===typeof g.webkitSlice&&(m=g.webkitSlice(p));a=new Uint8Array(m,
0,this.width*this.height/2)}}}else this._img_path.endsWith(".dds")?(b.bindTexture(b.TEXTURE_2D,this._scene._Textures[this.tex_id]),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,this.filtering),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,this.mipmap?b.LINEAR_MIPMAP_LINEAR:this.filtering),"repeat"==this._wrap||this.IsPowerOfTwo()||1<this._scene._glVersionNum?(b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.REPEAT),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.REPEAT)):(b.texParameteri(b.TEXTURE_2D,
b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE)),uploadDDSLevels(b,this.cfmt,this._downloaddata,this.mipmap),a=null):a=new Uint8Array(this._downloaddata);null!=a&&(b.bindTexture(b.TEXTURE_2D,this._scene._Textures[this.tex_id]),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,this.filtering),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,this.mipmap?b.LINEAR_MIPMAP_LINEAR:this.filtering),"repeat"==this._wrap||this.IsPowerOfTwo()||1<this._scene._glVersionNum?
(b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.REPEAT),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.REPEAT)):(b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE)),b.compressedTexImage2D(b.TEXTURE_2D,0,this.internalfmt,this.width,this.height,0,a));b.bindTexture(b.TEXTURE_2D,null)}else{if(0!=this.blksd){var q=new ScrRand(this.blksd);k=[];g=[];for(p=0;256>p;p++)k.push(p),g.push(0);for(l=0;1024>l;l++){var t=q.uint32()%256,
u=q.uint32()%256,r=k[t];k[t]=k[u];k[u]=r}for(p=0;256>p;p++)g[k[p]]=p;q=[];for(p=0;256>p;p++)q.push(g[p]),q.push(g[p]),q.push(g[p]);b.pixelStorei(b.UNPACK_FLIP_Y_WEBGL,!0);b.bindTexture(b.TEXTURE_2D,this._scene._Textures[this.tex_id]);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texImage2D(b.TEXTURE_2D,
0,b.RGBA,b.RGBA,b.UNSIGNED_BYTE,this._images[0]);m={_nFBOWidth:this._images[0].width,_nFBOHeight:this._images[0].height};m._nFBO=b.createFramebuffer();b.bindFramebuffer(b.FRAMEBUFFER,m._nFBO);m._nFBOTex=b.createTexture();b.bindTexture(b.TEXTURE_2D,m._nFBOTex);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);
b.texImage2D(b.TEXTURE_2D,0,b.RGBA,m._nFBOWidth,m._nFBOHeight,0,b.RGBA,b.UNSIGNED_BYTE,null);b.framebufferTexture2D(b.FRAMEBUFFER,b.COLOR_ATTACHMENT0,b.TEXTURE_2D,m._nFBOTex,0);b.bindTexture(b.TEXTURE_2D,null);null==this._scene.shaderUnscramble&&(this._scene.shaderUnscramble=new infinityrt_shader(g_vertex_LuminosityHighPassShader,g_frg_Scr,b,this._scene.extParallelCompile),this._scene.shaderUnscramble.addInt("colorTexture"),this._scene.shaderUnscramble.addFloat2("texSize"),this._scene.shaderUnscramble.addVertexArray("position"),
this._scene.shaderUnscramble.addUVArray("uv"),this._scene.shaderUnscramble.addInt("scrtable"),this._scene.shaderUnscramble.init());this._scene.shaderUnscramble.use(this._scene);this._scene.shaderUnscramble.setFloat2("texSize",[m._nFBOWidth,m._nFBOHeight]);b.activeTexture(a);b.bindTexture(b.TEXTURE_2D,this._scene._Textures[this.tex_id]);this._scene.shaderUnscramble.setInt("colorTexture",a-b.TEXTURE0);b.activeTexture(a+1);var y=b.createTexture();b.bindTexture(b.TEXTURE_2D,y);b.texParameteri(b.TEXTURE_2D,
b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texImage2D(b.TEXTURE_2D,0,b.RGB,256,1,0,b.RGB,b.UNSIGNED_BYTE,new Uint8Array(q));b.bindTexture(b.TEXTURE_2D,y);this._scene.shaderUnscramble.setInt("scrtable",a-b.TEXTURE0+1);b.disableVertexAttribArray(2);this._scene.RenderOrthoQuad(m,this._scene.shaderUnscramble);b.enableVertexAttribArray(2);
b.deleteFramebuffer(m._nFBO);b.bindFramebuffer(b.FRAMEBUFFER,this._scene.currentFrameBuffer);b.deleteTexture(this._scene._Textures[this.tex_id]);this._scene._Textures[this.tex_id]=m._nFBOTex;m._nFBOTex=null;b.deleteTexture(y);b.activeTexture(a);b.bindTexture(b.TEXTURE_2D,this._scene._Textures[this.tex_id]);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,this.filtering);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,this.mipmap?b.LINEAR_MIPMAP_LINEAR:this.filtering);"repeat"==this._wrap||this.IsPowerOfTwo()||
1<this._scene._glVersionNum?(b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.REPEAT),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.REPEAT)):(b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE));this.mipmap&&b.generateMipmap(b.TEXTURE_2D);b.bindTexture(b.TEXTURE_2D,null);this._size=[this._images[0].width,this._images[0].height]}else{b.pixelStorei(b.UNPACK_FLIP_Y_WEBGL,!0);b.bindTexture(b.TEXTURE_2D,this._scene._Textures[this.tex_id]);
b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,this.filtering);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,this.mipmap?b.LINEAR_MIPMAP_LINEAR:this.filtering);"repeat"==this._wrap||this.IsPowerOfTwo()||1<this._scene._glVersionNum?(b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.REPEAT),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.REPEAT)):(b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE),b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE));this._bAnisotropicFiltering&&
"undefined"!=typeof this._scene.extTextureFilterAnisotropic&&1<this._scene.TexFilterAnisotropicMax&&this.IsPowerOfTwo()&&b.texParameteri(b.TEXTURE_2D,this._scene.extTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT,this._scene.TexFilterAnisotropicMax);if(1<this._scene.glVersionNum)if(7==this._coord[1]){n=b.R8;var v=b.RED}else this.isNormalMap?(n=b.RG8,v=b.RG):n=v=b.RGBA;else n=v=b.RGBA;b.texImage2D(b.TEXTURE_2D,0,n,v,b.UNSIGNED_BYTE,this._images[0]);this._size=[this._images[0].width,this._images[0].height];
this.mipmap&&b.generateMipmap(b.TEXTURE_2D);b.bindTexture(b.TEXTURE_2D,null);this._scene.isFirefox&&this._scene.gl.getError()}this._images=[]}}catch(w){console.log("***ERROR: Binding Texture '"+this.name+"' "+w)}}"FileCube"==this.type||"FileCube3x2"==this.type?b.bindTexture(b.TEXTURE_CUBE_MAP,this._scene._Textures[this.tex_id]):b.bindTexture(b.TEXTURE_2D,this._scene._Textures[this.tex_id])}};
infinityrt_texture.prototype.SetWrap=function(a){this._wrap=a;a=this._scene.gl;a.bindTexture(a.TEXTURE_2D,this._scene._Textures[this.tex_id]);"repeat"==this._wrap?(a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.REPEAT),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.REPEAT)):(a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE));a.bindTexture(a.TEXTURE_2D,null)};
infinityrt_texture.prototype.IsPowerOfTwo=function(){var a=this.width,b=this.height;0<this._images.length&&(a=this._images[0].width,b=this._images[0].height);return 0!=a&&0==(a&a-1)&&0!=b&&0==(b&b-1)};
infinityrt_texture.prototype.RenderText=function(a,b,c,d,e,f){var g=this._scene.gl,h=document.createElement("canvas");this.width=h.width=c;this.height=h.height=d;this.vp=e;e=h.getContext("2d",{alpha:!1});e.font=b;e.fillStyle="#ffffff";e.textBaseline="middle";"left"==f?(e.textAlign=f,e.fillText(a,.05*c,d/2)):"right"==f?(e.textAlign=f,e.fillText(a,.89*c,d/2)):(e.textAlign="center",e.fillText(a,c/2,d/2));g.pixelStorei(g.UNPACK_FLIP_Y_WEBGL,!0);a=this._scene._Textures[this.tex_id];null==a&&(a=this._scene._Textures[this.tex_id]=
g.createTexture());g.bindTexture(g.TEXTURE_2D,a);g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MAG_FILTER,this.filtering);g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MIN_FILTER,this.filtering);g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_S,g.CLAMP_TO_EDGE);g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_T,g.CLAMP_TO_EDGE);g.texImage2D(g.TEXTURE_2D,0,g.RGBA,g.RGBA,g.UNSIGNED_BYTE,h);g.bindTexture(g.TEXTURE_2D,null);this.loaded=!0;"FromBrowser"==this.type?(this._scene.texDependencyTracking=!1,this.UpdateDirectAndIndirect(),
this._scene.texDependencyTracking=!0):this.CheckDependence();return!0};infinityrt_texture.prototype.CheckDependence=function(){if(!this._scene.texDependencyTracking)return!1;var a,b=[],c;for(c in this._scene._Texture_ref)if((a=this._scene._Texture_ref[c])&&"Procedural"==a.type)for(var d=0;d<a._unis.length;d++){var e=a._unis[d];"sampler"==e.type&&e.val==this.name&&b.push(a)}for(c=0;c<b.length;c++)a=b[c],a._decoded=!1,a.vp=this.vp,a.refresh();return 0<b.length};
infinityrt_texture.prototype.UpdateDirectAndIndirect=function(){if(this.indirect)for(var a=0;a<this.indirect.length;a++){var b=this._scene._Texture_ref[this.indirect[a]];b.refresh()}if(this.direct)for(a=0;a<this.direct.length;a++)b=this._scene._Texture_ref[this.direct[a]],b._decoded=!1,b.vp=this.vp,b.refresh()};infinityrt_texture.prototype.ProceduralPreload=function(){if(this.indirect)for(var a=0;a<this.indirect.length;a++){var b=this._scene._Texture_ref[this.indirect[a]];"Procedural"==b.type&&b.performTexProceduralPreload()}};
function clearTextureUnit(a,b){a.activeTexture(b);a.bindTexture(a.TEXTURE_CUBE_MAP,null);a.bindTexture(a.TEXTURE_2D,null)}infinityrt_texture.prototype.checkForSharedImgPath=function(a){var b=this._scene;if(b.shared&&"FileCube3x2"==this.type){var c=a.replace(b.urlRoot,b.shared.env),d=c.lastIndexOf("/");-1!=d&&(c=c.substring(0,d+1));c+=this.name;return c+=b._bSupportsWebP&&a.endsWith(".webp")?".webp":".png"}return a};
infinityrt_texture.prototype.loadError=function(a){if(3>a._tex.retries)return a._tex.retries++,setTimeout(function(){if(1<a._tex.retries){var d=".webp";a._tex._scene.urlPostfix&&(d+=a._tex._scene.urlPostfix);a.urlRetry.endsWith(d)&&(a.urlRetry=ReplaceAll(a.urlRetry,".webp",a._tex.name.endsWith(".png")||"FileCube3x2"==a._tex.type?".png":".jpg"))}a.src=a.urlRetry},500),!0;var b="Error: "+a.src+" failed to load after retries";console.error(b);var c=this._scene;c.fnFatalError&&c.fnFatalError("LoadFailure",
b);return!1};function selfcheckRequestHeader(a,b,c){if(a.selfcheck){var d=new XMLHttpRequest;d.open("HEAD",b,!0);d.onreadystatechange=function(){if(4==d.readyState&&200==d.status){a.selfcheck.texreqs--;a.selfcheck.tex[0]++;var e=parseInt(d.getResponseHeader("Content-Length"));isNaN(e)?c&&(c.filesize=0):(a.selfcheck.tex[1]+=e,c&&(c.filesize=e))}};a.selfcheck.texreqs++;d.send(null)}}
infinityrt_texture.prototype.startFileDownloads=function(){var a=this._scene;if(a.manageTexs&&1>this.refs)this.dl&&this.unloadGPU();else if(this.downloadStarted=!0,"File"==this.type||"FileEnv"==this.type||"FileCube"==this.type||"Parameterised"==this.type||"FileCube3x2"==this.type||"File3D"==this.type){if("undefined"==typeof this._scene._Images[this.tex_id]){var b=this._img_path;0==this.lvl&&this._lvlfilenames.length&&this._lvlfilenames[this.lvl].length&&(b=this._lvlfilenames[this.lvl]);selfcheckRequestHeader(this._scene,
this.checkForSharedImgPath(b),this);var c=new Image;this._images.push(c);b.endsWith(".f32")||(c.onload=function(){this._tex.dl=!0;1==this._tex.defer&&a.AutoDeferTextureDecoded(this._tex);a._outstandingjobs--;if(!this._tex.filesize&&performance){var f=performance.getEntriesByName(this.src);1<f.length&&(this._tex.filesize=f[1].encodedBodySize,a.selfcheck.tex[1]+=this._tex.filesize)}a.selfcheckCSV+=this._tex.name+",";a.selfcheckCSV+=this.src+",";a.selfcheckCSV+=this.src.substr(this.src.lastIndexOf(".")+
1)+",";a.selfcheckCSV+=this._tex.filesize+",";a.selfcheckCSV+=this.width+",";a.selfcheckCSV+=this.height+",";a.selfcheckCSV+="\n";-1!=a._inlineGPULoading&&function(g){setTimeout(function(){g.use(a.gl.TEXTURE0)},a._inlineGPULoading)}(this._tex);a.smartDeferral&&this._tex._scene.CheckForFinalSmartDeferral(this._tex);this._tex=null},c.onerror=function(){this._tex.loadError(c)});c._tex=this;window.infinityrt_options&&!0===window.infinityrt_options.withCredentials?c.crossOrigin="use-credentials":this._scene._usingwkwebview||
(c.crossOrigin="anonymous");c.src=c.urlRetry=this.checkForSharedImgPath(b);this._scene._outstandingjobs++;this._scene._totaljobs++;this._scene._Images[this.tex_id]=1}}else if("FileCompressed"==this.type){if(null==this._downloaddata){var d=new XMLHttpRequest;d._tex=this;d.open("GET",this._img_path,!0);d.responseType="arraybuffer";window.infinityrt_options&&!0===window.infinityrt_options.withCredentials&&(xmlhttp.withCredentials=!0);d.onload=function(f){if(a._usingwkwebview||200==d.status)d._tex._downloaddata=
d.response,a._outstandingjobs--};a._outstandingjobs++;a._totaljobs++;d.send("")}}else if("Video"==this.type){var e=this.video=document.createElement("video");e.autoplay=!0;e.muted=!0;e.loop=!0;e.addEventListener("playing",function(){e._playing=!0;!e._loaded&&e._playing&e._timeupdate&&(e._loaded=!0,a._outstandingjobs--)},!0);e.addEventListener("timeupdate",function(){e._timeupdate=!0;!e._loaded&&e._playing&e._timeupdate&&(e._loaded=!0,a._outstandingjobs--)},!0);a._outstandingjobs++;a._totaljobs++;
window.infinityrt_options&&!0===window.infinityrt_options.withCredentials&&(e.crossOrigin="use-credentials");e.src=this._img_path;e.play()}};
infinityrt_texture.prototype.refresh=function(){if(this._decoded)return!1;if("Procedural"==this.type&&!this.checkValidInputTextures())return null==this._scene._Textures[this.tex_id]&&(this._scene._Textures[this.tex_id]=this._scene.gl.createTexture(),this._decoded=!1,this.loaded=!0),!1;this._decoded=!0;var a=!1;"Noise"==this.type?(this._scene._Textures[this.tex_id]=this.renderNoiseTexture(),a=!0):"Operation"==this.type?(this.performTexOp(),a=!0):"Procedural"==this.type?(this.performTexProcedural(),
a=!0):"FromBrowser"==this.type&&null==this._scene._Textures[this.tex_id]&&(this._scene._Textures[this.tex_id]=this._scene.gl.createTexture(),this.loaded=!0);this.CheckDependence()&&(a=!0);return a};
infinityrt_texture.prototype.performTexOp=function(){this._tex1=this._scene._Texture_ref[this.tex1name];this._tex1.refresh();"undefined"!=typeof this.tex2name&&(this._tex2=this._scene._Texture_ref[this.tex2name],this._tex2.refresh());"undefined"!=typeof this.tex3name&&(this._tex3=this._scene._Texture_ref[this.tex3name],this._tex3.refresh());var a=this._scene.gl,b=a.createFramebuffer();a.bindFramebuffer(a.FRAMEBUFFER,b);var c=a.createTexture();a.bindTexture(a.TEXTURE_2D,c);a.texParameteri(a.TEXTURE_2D,
a.TEXTURE_MAG_FILTER,a.LINEAR);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR);a.texImage2D(a.TEXTURE_2D,0,a.RGBA,this.width,this.height,0,a.RGBA,a.UNSIGNED_BYTE,null);a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,c,0);a.bindFramebuffer(a.FRAMEBUFFER,b);a.viewport(0,0,this.width,this.height);b=a.createProgram();var d=infinityrt_compileShader(a,"attribute vec2 a_position; \nattribute vec2 a_tex0; \nvarying vec2 uv0; \nvoid main() \n{ \n uv0 = a_tex0; \n gl_Position = vec4(a_position, 0.0, 1.0); \n}",
"x-shader/x-vertex");a.attachShader(b,d);d="#ifdef GL_FRAGMENT_PRECISION_HIGH \nprecision highp float; \n#else \nprecision mediump float; \n#endif \nvarying vec2 uv0; \nuniform sampler2D tex1; \n";"undefined"!=typeof this.tex2name&&(d+="uniform sampler2D tex2; \n");"undefined"!=typeof this.tex3name&&(d+="uniform sampler2D tex3; \n");d+="void main() \n{ \n";"Invert"==this.operation?d+="gl_FragColor = vec4(1.0-texture2D(tex1, uv0).xyz, 1.0); \n":"Add"==this.operation?d+="gl_FragColor = vec4(texture2D(tex1, uv0).xyz+texture2D(tex2, uv0).xyz, 1.0); \n":
"Subtract"==this.operation?d+="gl_FragColor = vec4(texture2D(tex1, uv0).xyz-texture2D(tex2, uv0).xyz, 1.0); \n":"Multiply"==this.operation?d+="gl_FragColor = vec4(texture2D(tex1, uv0).xyz*texture2D(tex2, uv0).xyz, 1.0); \n":"Blend"==this.operation&&(d+="float val1 = texture2D(tex3, uv0).x;\nfloat val2 = 1.0-val1;\ngl_FragColor = vec4((val1*texture2D(tex1, uv0).xyz)+(val2*texture2D(tex2, uv0).xyz), 1.0); \n");d=infinityrt_compileShader(a,d+"} \n","x-shader/x-fragment");a.attachShader(b,d);a.linkProgram(b);
a.getProgramParameter(b,a.LINK_STATUS)?(a.clear(a.COLOR_BUFFER_BIT),a.useProgram(b),this._tex1.use(a.TEXTURE1),a.uniform1i(a.getUniformLocation(b,"tex1"),1),"undefined"!=typeof this.tex2name&&(this._tex2.use(a.TEXTURE2),a.uniform1i(a.getUniformLocation(b,"tex2"),2)),"undefined"!=typeof this.tex3name&&(this._tex3.use(a.TEXTURE3),a.uniform1i(a.getUniformLocation(b,"tex3"),3)),this.drawTexOpSquare(a,b,"a_position","a_tex0"),this._scene._Textures[this.tex_id]=c,this.loaded=!0,this.lvl=1):console.log("***Could not initialise tex op shader")};
infinityrt_texture.prototype.drawTexOpSquare=function(a,b,c,d,e,f){"undefined"==typeof e&&(e=new Float32Array([-1,-1,1,-1,-1,1,1,1]));c=a.getAttribLocation(b,c);var g=a.createBuffer();a.bindBuffer(a.ARRAY_BUFFER,g);a.bufferData(a.ARRAY_BUFFER,e,a.STATIC_DRAW);a.vertexAttribPointer(c,2,a.FLOAT,!1,0,0);a.enableVertexAttribArray(c);"undefined"==typeof f&&(f=new Float32Array([0,0,1,0,0,1,1,1]));b=a.getAttribLocation(b,d);d=a.createBuffer();a.bindBuffer(a.ARRAY_BUFFER,d);a.bufferData(a.ARRAY_BUFFER,f,
a.STATIC_DRAW);a.vertexAttribPointer(b,2,a.FLOAT,!1,0,0);a.enableVertexAttribArray(b);a.drawArrays(a.TRIANGLE_STRIP,0,4)};infinityrt_texture.prototype.checkValidInputTextures=function(){for(var a=0;a<this._unis.length;a++){var b=this._unis[a];if("sampler"==b.type&&!this._scene._Texture_ref[b.val]._decoded)return!1}return!0};
infinityrt_texture.prototype.performTexProcedural=function(){var a=this._scene.gl;if(this._scene.prepareTexIncludesProcedurals||this._scene._prepared){var b=a.getParameter(a.CURRENT_PROGRAM);if("undefined"==typeof this.rtTexOp){var c="#define mipmapbias 0.0\n#define hdribias 0\n#define camresponse 0\n#define amboccusevertcol 0\n#define extOESSD 0\n#define BUILDVERSION "+this._scene.verScene.build+"\n",d=shaderInfinityRT_Modularfs;d=ReplaceAll(d,"MODULAR_FRAGMENT_HEADER_INSERT",this._fragheaderinsert);
d=ReplaceAll(d,"MODULAR_FRAGMENT_INSERT",this._fraginsert);d=ReplaceAll(d,"MODULAR_FRAGMENT_SAMPLING",this._fragsamplinginsert);d=ReplaceAll(d,"SIRT_STANDARD_HEADER_INSERT",shaderInfinityRT_Headerfs);d=ReplaceAll(d,"SIRT_PBR2_HEADER_INSERT",shaderInfinityRT_PBR2_Headerfs);this.rtTexOp=new infinityrt_shader(c+"attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nvarying vec2 tex1;\nvarying vec2 tex2;\nvarying vec3 g_norm;\nvarying vec3 eyeDir;\nvarying vec3 vert;\nvarying vec3 bu;\nvarying vec3 bv;\nvarying float vcolor;\nvoid main(void)\n{\ngl_Position = vec4(aVertexPosition, 0.0, 1.0);\nvert = gl_Position.xyz;\ntex2 = tex1 = aTextureCoord;\ng_norm = vec3(0.0, 0.0, 1.0);\neyeDir = vec3(0.0, 0.0, -1.0);\nbu = vec3(1.0, 0.0, 0.0);\nbv = vec3(0.0, 1.0, 0.0);\nvcolor = 1.0;\n}\n",
c+d,a,this._scene.extParallelCompile,!1);this.rtTexOp.addFloat2("viewportsize");infinityrt_AddModularUniforms(this.name,this._unis,this.rtTexOp)}else this.pendingProceduralUniforms&&(this.pendingProceduralUniforms=!1,this.rtTexOp.checkCompilation(),this.rtTexOp.addFloat2("viewportsize"),infinityrt_AddModularUniforms(this.name,this._unis,this.rtTexOp));c=a.createFramebuffer();a.bindFramebuffer(a.FRAMEBUFFER,c);d=this._scene._Textures[this.tex_id];null==d&&(d=this._scene._Textures[this.tex_id]=a.createTexture());
a.activeTexture(a.TEXTURE7);a.bindTexture(a.TEXTURE_2D,d);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.LINEAR);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR);a.texImage2D(a.TEXTURE_2D,0,a.RGBA,this.width,this.height,0,a.RGBA,a.UNSIGNED_BYTE,null);a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,d,0);a.viewport(0,0,this.width,this.height);a.clear(a.COLOR_BUFFER_BIT);this.rtTexOp.use(this._scene);this.rtTexOp.setFloat2("viewportsize",[this.width,this.height]);
var e=infinityrt_SetModularUniforms(this.name,this._unis,this.rtTexOp,this._scene);a.bindFramebuffer(a.FRAMEBUFFER,c);if("undefined"!=typeof this.vp){for(var f=this.vp,g=f.slice(),h=0;h<g.length;h++)g[h]=2*g[h]-1;this.drawTexOpSquare(a,this.rtTexOp.shader,"aVertexPosition","aTextureCoord",new Float32Array([g[0],g[1],g[2],g[1],g[0],g[3],g[2],g[3]]),new Float32Array([f[0],f[1],f[2],f[1],f[0],f[3],f[2],f[3]]))}else this.drawTexOpSquare(a,this.rtTexOp.shader,"aVertexPosition","aTextureCoord");for(f=0;f<
e;f++)a.activeTexture(a.TEXTURE0+f),a.bindTexture(a.TEXTURE_2D,null);a.activeTexture(a.TEXTURE7);a.bindTexture(a.TEXTURE_2D,d);this.mipmap&&a.generateMipmap(a.TEXTURE_2D);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,this.filtering);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,this.mipmap?a.LINEAR_MIPMAP_LINEAR:this.filtering);this._bAnisotropicFiltering&&"undefined"!=typeof this._scene.extTextureFilterAnisotropic&&1<this._scene.TexFilterAnisotropicMax&&this.IsPowerOfTwo()&&a.texParameteri(a.TEXTURE_2D,
this._scene.extTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT,this._scene.TexFilterAnisotropicMax);a.bindTexture(a.TEXTURE_2D,null);a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,null,0);a.bindFramebuffer(a.FRAMEBUFFER,this._scene.currentFrameBuffer);a.viewport(0,0,this._scene.viewwidth,this._scene.viewheight);a.deleteFramebuffer(c);a.useProgram(b);this.loaded=!0;this.lvl=1}else this._scene._Textures[this.tex_id]=a.createTexture(),this._decoded=!1,this.loaded=!0};
infinityrt_texture.prototype.performTexProceduralPreload=function(){if(!this.pendingProceduralUniforms){var a=this._scene.gl;a.getParameter(a.CURRENT_PROGRAM);if("undefined"==typeof this.rtTexOp){var b="#define mipmapbias 0.0\n#define hdribias 0\n#define camresponse 0\n#define amboccusevertcol 0\n#define extOESSD 0\n#define BUILDVERSION "+this._scene.verScene.build+"\n",c=shaderInfinityRT_Modularfs;c=ReplaceAll(c,"MODULAR_FRAGMENT_HEADER_INSERT",this._fragheaderinsert);c=ReplaceAll(c,"MODULAR_FRAGMENT_INSERT",
this._fraginsert);c=ReplaceAll(c,"MODULAR_FRAGMENT_SAMPLING",this._fragsamplinginsert);c=ReplaceAll(c,"SIRT_STANDARD_HEADER_INSERT",shaderInfinityRT_Headerfs);c=ReplaceAll(c,"SIRT_PBR2_HEADER_INSERT",shaderInfinityRT_PBR2_Headerfs);this.rtTexOp=new infinityrt_shader(b+"attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\nvarying vec2 tex1;\nvarying vec2 tex2;\nvarying vec3 g_norm;\nvarying vec3 eyeDir;\nvarying vec3 vert;\nvarying vec3 bu;\nvarying vec3 bv;\nvarying float vcolor;\nvoid main(void)\n{\ngl_Position = vec4(aVertexPosition, 0.0, 1.0);\nvert = gl_Position.xyz;\ntex2 = tex1 = aTextureCoord;\ng_norm = vec3(0.0, 0.0, 1.0);\neyeDir = vec3(0.0, 0.0, -1.0);\nbu = vec3(1.0, 0.0, 0.0);\nbv = vec3(0.0, 1.0, 0.0);\nvcolor = 1.0;\n}\n",
b+c,a,this._scene.extParallelCompile,!1);this.pendingProceduralUniforms=!0}}};
infinityrt_texture.prototype.loadrtex=function(a){if(!(a>=this._lvlfilenames.length||-1!=this._ovRLvl&&a!=this._ovRLvl)){var b=this;if(!(b._scene.manageTexs&&1>this.refs)){a=0<a&&this._img_path.length>this._lvlfilenames[a].length?this._img_path:this._lvlfilenames[a];selfcheckRequestHeader(b._scene,this.checkForSharedImgPath(a),this);var c=new Image;c._tex=this;c.onload=function(){b._scene.rtexsAvail.push({tex:b,img:c});b._scene.CheckProgTexTimer();c._tex.retries=0;b._scene.smartDeferral&&(b.defer=
0,b._scene.CheckForFinalSmartDeferral(b));if(!b.filesize&&performance){var d=performance.getEntriesByName(this.src);1<d.length&&(b.filesize=d[1].encodedBodySize,b._scene.selfcheck.tex[1]+=b.filesize)}b._scene.selfcheckCSV+=b.name+",";b._scene.selfcheckCSV+=this.src+",";b._scene.selfcheckCSV+=this.src.substr(this.src.lastIndexOf(".")+1)+",";b._scene.selfcheckCSV+=b.filesize+",";b._scene.selfcheckCSV+=this.width+",";b._scene.selfcheckCSV+=this.height+",";b._scene.selfcheckCSV+="YES,";b._scene.selfcheckCSV+=
"\n"};c.onerror=function(){b.loadError(c)||console.error("Error: "+c.src+" loadrtex will be ignored")};window.infinityrt_options&&!0===window.infinityrt_options.withCredentials?c.crossOrigin="use-credentials":this._scene._usingwkwebview||(c.crossOrigin="anonymous");c.src=c.urlRetry=this.checkForSharedImgPath(a)}}};
infinityrt_texture.prototype.updatertex=function(a){this.unloadGPU();this._images=[a];1==this.defer&&this._scene.AutoDeferTextureDecoded(this);this._scene._Images[this.tex_id]=1;this.dl=!0;this.CheckDependence()};infinityrt_texture.prototype.overridertex=function(a){a>=this._lvlfilenames.length||(this._ovRLvl=a,this.loaded&&(this.loadrtex(a),this._scene.clearRefine()))};var ScrRand=function(a){this._seed=a>>>0};
ScrRand.prototype.uint32=function(){this._seed^=this._seed<<13>>>0;this._seed>>>=0;this._seed^=this._seed>>>17>>>0;this._seed>>>=0;this._seed^=this._seed<<5>>>0;return this._seed>>>=0};var g_vertNoise="\n     attribute vec2 position; attribute vec2 uv; varying vec2 vUv;    void main(void)     {        vUv = uv;         gl_Position = vec4(position, 0.0, 1.0);    }",g_fragNoise="#ifdef GL_FRAGMENT_PRECISION_HIGH\n         precision highp float;\n     #else\n         precision mediump float;\n     #endif\n     varying vec2 vUv;    uniform float brightness;     uniform float contrast;     float perlin_hash(vec3 p)     {         p = fract(p*0.3183099 + 0.1);         p *= 17.0;         return fract(p.x*p.y*p.z*(p.x + p.y + p.z));     }     float perlin_noise(in vec3 x)     { \t    vec3 p = floor(x);         vec3 f = fract(x);         f = f*f*(3.0 - 2.0*f);         return mix(mix(mix(perlin_hash(p + vec3(0.0, 0.0, 0.0)),             perlin_hash(p + vec3(1.0, 0.0, 0.0)), f.x),             mix(perlin_hash(p + vec3(0.0, 1.0, 0.0)),                 perlin_hash(p + vec3(1.0, 1.0, 0.0)), f.x), f.y),             mix(mix(perlin_hash(p + vec3(0.0, 0.0, 1.0)),                 perlin_hash(p + vec3(1.0, 0.0, 1.0)), f.x),                 mix(perlin_hash(p + vec3(0.0, 1.0, 1.0)),                     perlin_hash(p + vec3(1.0, 1.0, 1.0)), f.x), f.y), f.z);     }     void main()    {        vec3 q = 16.0*vec3(16.0*vUv, 95.0);         q = (vec3((perlin_noise(q))-0.5) * contrast + 0.5) + brightness;         gl_FragColor = vec4(q, 1.0);     }";
infinityrt_texture.prototype.renderNoiseTexture=function(){var a=this._scene.gl,b=a.createFramebuffer();a.bindFramebuffer(a.FRAMEBUFFER,b);var c=a.createTexture();a.bindTexture(a.TEXTURE_2D,c);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.LINEAR);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE);a.texImage2D(a.TEXTURE_2D,0,a.RGBA,512,512,0,a.RGBA,a.UNSIGNED_BYTE,
null);a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,c,0);a.bindTexture(a.TEXTURE_2D,null);if("undefined"==typeof this._scene._shader_noise){var d=this._scene._shader_noise=new infinityrt_shader(g_vertNoise,g_fragNoise,a);d.addVertexArray("position");d.addUVArray("uv");d.addFloat("brightness");d.addFloat("contrast");d.init()}this._scene._shader_noise.use(this._scene);this._scene._shader_noise.setFloat("brightness",this.noisebrightness);this._scene._shader_noise.setFloat("contrast",
this.noisecontrast);this._scene.RenderOrthoQuad({_nFBO:b,_nFBOWidth:512,_nFBOHeight:512},this._scene._shader_noise);this.loaded=!0;a.bindFramebuffer(a.FRAMEBUFFER,null);a.deleteFramebuffer(b);return c};
var infinityrt_material=function(a,b){this.scene=b;this.useCgLights=0;this.DynamicTextureUnits=16>b.MaxTextureUnits;this.material_id=b._Materials.length;this.name=a;this.diffusecolor=[0,0,0];this.usediffuseenv=1;this.glossycolor=[0,0,0];this.specularcolor=[0,0,0];this.bumpuserscale=1;this.basecolor=[0,0,0];this._colPlanarReflect=[0,0,0];this.fresnel=0;this.degree_0_specular=.2;this.degree_90_specular=1;this.brdf_curve=5;this.ior_R0Clear=this.ior_R0Intensity=this.ior_R0DG=1.3;this.iorClear_flip=this.iorIntensity_flip=
this.iorDiffuse_flip=0;this.invertreflectiony=1;this.mipmapbias=0;this.roughness=1;this.roughnessEdgeFac=0;this.reflectionplanescale=1;this.reflectionplanescalealpha=this.reflectionplanealternativemix=0;this.reflectionplanescalespecular=1;this.reflectionplaneroughness=.5;this._rpInstTexId=[0,0];this.additionalcolor=[0,0,0];this.roughnessenvmaplevels=[0,0,0];this.exposure=[1,1,1];this.glowbias=[1,1,1];this._diffuseInputCC=[0,1,1,1];this.textures=[];this.diffuseUVT=[1,0,0,0,1,0,0,0,1];this.roughnessUVT=
[1,0,0,0,1,0,0,0,1];this.intensityUVT=[1,0,0,0,1,0,0,0,1];this.specularUVT=[1,0,0,0,1,0,0,0,1];this.alphaUVT=[1,0,0,0,1,0,0,0,1];this.bumpUVT=[1,0,0,0,1,0,0,0,1];this.additionalUVT=[1,0,0,0,1,0,0,0,1];this.amboccUVT=[1,0,0,0,1,0,0,0,1];this.reflectionplanedynamicinfluence=[0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0];1<b._glVersionNum&&(this.diffuseUVT_3x4=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0]),this.roughnessUVT_3x4=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0]),this.intensityUVT_3x4=new Float32Array([1,0,
0,0,0,1,0,0,0,0,1,0]),this.specularUVT_3x4=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0]),this.alphaUVT_3x4=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0]),this.bumpUVT_3x4=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0]),this.additionalUVT_3x4=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0]),this.amboccUVT_3x4=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0]));this.shader=null;this.hdribias=this.gammaDiffAddTexs=0;this.ColCorrAndCamResp=1;this._needsAttribsAndUniforms=this.usespecularroughnessenvmap=!0;this._transparent=
!1;this.amboccParamValue=[0,0,0];this.ambOccBoost=[1,1,1];this._2ndref=[0,0];this.alphacolor=1;this.secondaryalphacolor=0;this.rendersecondary=!1;this.ppexistence=this.decalalpha=0;this.ppexistencethreshold=.5;this.amboccusevertcol=this.sphericalwhirl=0;this.envScale=this.specularworkflow=1;this.simpleintensity=this.dualintensitycolor=this.clearIgnoreBump=this.defer=this.metallic=0;this.intensityBcolor=[0,0,0];this.dualintensityfalloff=1;this.usebumpflakes=0;this.bumpflakesdata=[.05,.2];this._cc_brightness=
0;this._cc_saturation=this._cc_contrast=1;this._cc_tint=[1,1,1];this._strMaterialPtr=[""];this._MaterialPtrSel=0;this._pMaterialPtr=null;this.numreflectionplanes=0;this.enablereflectionplanes=1;this.uniBlockGlassDirty=this.uniBlockAmbientDirty=this.uniBlockUnlitDirty=this.uniBlockDirty=!0;this.scene._Materials.push(this);"undefined"!=typeof a&&(this.scene._Material_ref[a]=this)};
infinityrt_material.prototype.destroy=function(){delete this.scene._Material_ref[this.name];this.scene._Materials.splice(this.scene._Materials.indexOf(this),1);this.unload()};infinityrt_material.prototype.unload=function(){this.shader=null};
infinityrt_material.prototype.setTextureByName=function(a,b){this.texprefix&&b!=TEXTURE_MAP_DIFFUSEENV&&b!=TEXTURE_MAP_SPECULARENV&&b!=TEXTURE_MAP_SPECULARBLURENV&&b!=TEXTURE_MAP_PHYSICAL1&&b!=TEXTURE_MAP_PHYSICAL2&&b!=TEXTURE_MAP_PHYSICAL3&&(a=this.texprefix+a);if("undefined"!=typeof this.scene._Texture_ref[a])this.setTexture(this.scene._Texture_ref[a],b);else if(b==TEXTURE_MAP_SPECULARBLURENV){for(var c=a.slice(0,a.lastIndexOf(".")),d=parseInt(this.scene.specularBlurLevel.substr(1)),e=0;e<this.scene._TextureObjs.length;e++)if(this.scene._TextureObjs[e].name.includes(c)){a=
parseInt(this.scene._TextureObjs[e].name.slice(this.scene._TextureObjs[e].name.lastIndexOf(".")+1))>d?this.scene._TextureObjs[e].name:e+2<this.scene._TextureObjs.length?this.scene._TextureObjs[e+2].name:this.scene._TextureObjs[e].name;break}"undefined"!=typeof this.scene._Texture_ref[a]?this.setTexture(this.scene._Texture_ref[a],b):console.log("***ERROR: Material '"+this.name+"' assignment to SPECULARBLURENV missing texture '"+a+"'")}else console.log("***ERROR: Material '"+this.name+"' assignment to "+
b+" missing texture '"+a+"'")};infinityrt_material.prototype.setTexture=function(a,b){"undefined"==typeof b&&(b=0);this.scene.manageTexs&&this.textures[b]!=a&&(this.textures[b]&&this.textures[b].delRef(),a&&a.addRef());this.textures[b]=a;this.uniBlockGlassDirty=this.uniBlockAmbientDirty=this.uniBlockUnlitDirty=this.uniBlockDirty=!0};infinityrt_material.prototype.ResolveIndirections=function(){for(this._pMaterialPtr=this;"Indirect"==this._pMaterialPtr.type;)this._pMaterialPtr=this.scene._Material_ref[this._pMaterialPtr._strMaterialPtr[this._pMaterialPtr._MaterialPtrSel]]};
var infinityrt_intToFloatArray=function(a){var b=[];b[2]=(a&255)/255;b[1]=(a>>8&255)/255;b[0]=(a>>16&255)/255;return b};
infinityrt_material.prototype.getShaderHeader=function(){var a="#define geomgen "+this.scene.geomgen;a+="\n#define uvch "+this.scene.uvch;a+="\n#define num_scene_lights "+this.scene._lights.length*this.useCgLights;a+="\n#define eScale "+this.scene.eScale;a+="\n#define skinned "+this.scene.hasDeformation;"Match"==this.type||"Unlit"==this.type||"Reflective"==this.type||"ARKit"==this.type||"PBR2"==this.type||"Glass"==this.type||"Glass_Refracted"==this.type||"Ambient"==this.type||"Indirect"==this.type&&
1<this.scene._glVersionNum?(a+="\n#define hasAmbOccTextureParam "+("undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&"Parameterised"==this.textures[TEXTURE_MAP_AMBOCCTEX].type?1:0)+"\n#define hasClearCoatRoughnessTexture "+("undefined"!=typeof this.textures[TEXTURE_MAP_CCROUGHNESSTEX]?1:0)+"\n#define usesTangents "+("Ambient"!=this.type?1:0)+"\n#define camresponse "+this.scene.camresponse+"\n#define encodeenvmapsinmono "+this.scene._encodeenvmapsinmono+"\n#define extrabrightenvmap "+this.scene._extrabrightenvmap+
"\n#define mipmapenvmap "+this.scene._mipmapenvmap+"\n#define hdribias "+this.hdribias+"\n#define hasBrightReflections "+this.scene.hasBrightReflections+"\n#define has2ndRef "+(0!=this._2ndref[0]&&0!=this._2ndref[1]?1:0)+"\n#define amboccusevertcol "+("Modular"==this.type?1:this.amboccusevertcol)+"\n#define ComplexGlossyRead "+this.scene.ComplexGlossyRead+"\n#define ClearCoatEdgeAA "+this.scene.ClearCoatEdgeAA+"\n#define extOESSD "+("undefined"!=typeof this.scene.extOESSD||1<this.scene._glVersionNum?
1:0)+"\n#define MaxTextureUnits "+this.scene.MaxTextureUnits+"\n#define PlanarReflectPassActive "+this.scene._nPlanarReflectPassActive+"\n#define FadedReflectionsActive "+(this.scene._fadedReflectionsActive?1:0)+"\n#define AVOIDCONDITIONALUNIFORMS "+(this.scene.avoidConditionalUniforms?1:0)+"\n#define AABBEnvironmentMapActive "+(this.scene._AABBEnvironmentMapActive?1:0)+"\n\n",this.scene.avoidConditionalUniforms&&(a+="\n#define NUM_REFLECTON_PLANES "+this.numreflectionplanes+"\n#define HAS_PPEXISTENCE "+
this.ppexistence)):a+="\n#define hasAlphaTexture "+("undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?1:0)+"\n#define hasDiffuseTexture "+("undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?1:0)+"\n#define hasSpecularEnv "+("undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]?1:0)+"\n#define hasSpecularTexture "+("undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?1:0)+"\n#define hasGlossyEnv "+("undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL1]?1:0)+"\n#define hasGlossyTexture "+
("undefined"!=typeof this.textures[TEXTURE_MAP_GLOSSYTEX]?1:0)+"\n#define hasDiffuseEnv "+("undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSEENV]?1:0)+"\n#define hasBumpTexture "+("undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]||"Modular"==this.type?1:0)+"\n#define hasBaseTexture "+("undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?1:0)+"\n#define hasRoughnessTexture "+("undefined"!=typeof this.textures[TEXTURE_MAP_ROUGHNESSTEX]?1:0)+"\n#define hasIntensityTexture "+("undefined"!=
typeof this.textures[TEXTURE_MAP_GLOSSYTEX]?1:0)+"\n#define hasAdditionalTexture "+("undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]?1:0)+"\n#define hasAmbOccTexture "+("undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?1:0)+"\n#define hasAmbOccTextureParam "+("undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&"Parameterised"==this.textures[TEXTURE_MAP_AMBOCCTEX].type?1:0)+"\n#define hasTransmissionTexture "+("undefined"!=typeof this.textures[TEXTURE_MAP_TRANSMISSIONTEX]?
1:0)+"\n#define usesTangents "+("Ambient"!=this.type?1:0)+"\n#define usespecularroughnessenvmap "+(this.usespecularroughnessenvmap?1:0)+"\n#define camresponse "+this.scene.camresponse+"\n#define encodeenvmapsinmono "+this.scene._encodeenvmapsinmono+"\n#define extrabrightenvmap "+this.scene._extrabrightenvmap+"\n#define mipmapenvmap "+this.scene._mipmapenvmap+"\n#define hdribias "+this.hdribias+"\n#define hasBrightReflections "+this.scene.hasBrightReflections+"\n#define has2ndRef "+(0!=this._2ndref[0]&&
0!=this._2ndref[1]?1:0)+"\n#define decalalpha "+this.decalalpha+"\n#define sphericalwhirl "+this.sphericalwhirl+"\n#define amboccusevertcol "+("Modular"==this.type?1:this.amboccusevertcol)+"\n#define extOESSD "+("undefined"!=typeof this.scene.extOESSD||1<this.scene._glVersionNum?1:0)+"\n#define MaxTextureUnits "+this.scene.MaxTextureUnits+"\n#define PlanarReflectPassActive "+this.scene._nPlanarReflectPassActive+"\n#define FadedReflectionsActive "+(this.scene._fadedReflectionsActive?1:0)+"\n#define AABBEnvironmentMapActive "+
(this.scene._AABBEnvironmentMapActive?1:0)+"\n\n";2==this.scene._glVersionNum&&(a+="\n#define OutputDoFDepth 0\n");a+="\n#define compPlanarRefl "+this.scene.compPlanarRefl+"\n";a+="\n#define BUILDVERSION "+this.scene.verScene.build+"\n";return a+="\n#define MAXFRAGUNIVECS "+this.scene.MaxFragUniVecs+"\n"};
infinityrt_material.prototype.bindObject=function(a){var b=this.scene.gl;"undefined"!=typeof this.shader.uniforms.a_skinweights&&(b.bindBuffer(b.ARRAY_BUFFER,a.compiled.gl_skinweights),b.vertexAttribPointer(this.shader.uniforms.a_skinweights,4,4==this.scene.geomgen||5==this.scene.geomgen?b.UNSIGNED_SHORT:b.FLOAT,!1,0,0));"undefined"!=typeof this.shader.uniforms.aColor&&(b.bindBuffer(b.ARRAY_BUFFER,a.compiled.gl_cols),b.vertexAttribPointer(this.shader.uniforms.aColor,4,b.FLOAT,!1,0,0));a.compiled?
(b.bindBuffer(b.ARRAY_BUFFER,a.compiled.gl_pnu),4==this.scene.geomgen||5==this.scene.geomgen?(b.vertexAttribPointer(this.shader.uniforms.aVertexPosition,3,b.UNSIGNED_SHORT,!1,0,0),b.vertexAttribPointer(this.shader.uniforms.aNormal,3,b.SHORT,!1,0,a.compiled.ofs_normals),("Reflective"!=this.type||1<this.scene._glVersionNum)&&b.vertexAttribPointer(this.shader.uniforms.aTextureCoord,2,b.UNSIGNED_SHORT,!1,0,a.compiled.ofs_uvs)):(b.vertexAttribPointer(this.shader.uniforms.aVertexPosition,3,b.FLOAT,!1,0,
0),b.vertexAttribPointer(this.shader.uniforms.aNormal,3,b.FLOAT,!1,0,a.compiled.ofs_normals),("Reflective"!=this.type||1<this.scene._glVersionNum)&&b.vertexAttribPointer(this.shader.uniforms.aTextureCoord,2,b.FLOAT,!1,0,a.compiled.ofs_uvs)),-1!=this.shader.uniforms.aSurfTanU&&b.vertexAttribPointer(this.shader.uniforms.aSurfTanU,3,b.FLOAT,!1,0,a.compiled.ofs_tanus),1<this.scene.uvch&&b.vertexAttribPointer(this.shader.uniforms.aTextureCoord2,2,4==this.scene.geomgen||5==this.scene.geomgen?b.UNSIGNED_SHORT:
b.FLOAT,!1,0,a.compiled.ofs_uvs2),b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,a.compiled.gl_elements)):(a=Object.assign({},a),console.log("Error. obj_in not compiled yet: ",a),console.trace())};
infinityrt_material.prototype.compile=function(){var a=!1;if(null==this.shader){var b=this.getShaderHeader();2==this.scene._glVersionNum&&(b="#version 300 es\n"+b);if(void 0==this.scene._ShaderCache[this.type+" "+b]||this._optimisedshader){a=!0;if(2==this.scene._glVersionNum){var c=shaderes3_InfinityRT_Corevs;c=ReplaceAll(c,"SIRT_BLOCKVERTEX_INSERT",shaderes3_InfinityRT_BlockVertexvs);if("Match"==this.type||"Indirect"==this.type)var d=this.scene.fastMatch?shaderes3_InfinityRT_Match_Minifs:shaderes3_InfinityRT_Matchfs;
else if("Reflective"==this.type)d=shaderes3_InfinityRT_Reflectivefs;else if("Unlit"==this.type)d=shaderes3_InfinityRT_Unlitfs;else if("Glass"==this.type)d=shaderes3_InfinityRT_Glassfs;else if("Ambient"==this.type)d=shaderes3_InfinityRT_Ambientfs;else if("Glass_Refracted"==this.type)d=shaderes3_InfinityRT_Glass_Refractedfs;else if("ARKit"==this.type)d=shaderes3_InfinityRT_ARKitfs;else if("Modular"==this.type){if(this._optimisedshader){this.shader=new infinityrt_shader(b+c,this._optimisedshader,this.scene.gl,
this.scene.extParallelCompile,!1);this.buffBlockFrame=this.shader.addBlock("BlockFrame",this.scene);this.shader.addBlock("BlockInstance",this.scene);this._needsAttribsAndUniforms=!0;return}d=shaderes3_InfinityRT_Modularfs;d=ReplaceAll(d,"MODULAR_FRAGMENT_HEADER_INSERT",this._fragheaderinsert);d=ReplaceAll(d,"MODULAR_FRAGMENT_INSERT",this._fraginsert);d=ReplaceAll(d,"MODULAR_FRAGMENT_SAMPLING",this._fragsamplinginsert)}else console.log("***ERROR: Missing Material Type '"+this.type+"'");d=ReplaceAll(d,
"SIRT_STANDARD_HEADER_INSERT",shaderes3_InfinityRT_Headerfs);d=ReplaceAll(d,"SIRT_STANDARD_HEADER_MINI_INSERT",shaderes3_InfinityRT_Header_Minifs);d=ReplaceAll(d,"SIRT_PBR2_HEADER_INSERT",shaderes3_InfinityRT_PBR2_Headerfs);d=ReplaceAll(d,"SIRT_BLOCKVERTEX_INSERT",shaderes3_InfinityRT_BlockVertexvs)}else{c=shaderInfinityRT_Corevs;if("Glass"==this.type)d=shaderInfinityRT_Glassfs;else if("Ambient"==this.type)d=shaderInfinityRT_Ambientfs;else if("ARKit"==this.type)d=shaderInfinityRT_ARKitfs;else if("PBR2"==
this.type)d=shaderInfinityRT_PBR2fs;else if("Match"==this.type)d=this.scene.fastMatch?shaderInfinityRT_Match_Minifs:shaderInfinityRT_Matchfs;else if("Reflective"==this.type)d=shaderInfinityRT_Reflectivefs;else if("Unlit"==this.type)d=shaderInfinityRT_Unlitfs;else if("Glass_Refracted"==this.type)d=shaderInfinityRT_Glass_Refractedfs;else if("Modular"==this.type){if(this._optimisedshader){this.shader=new infinityrt_shader(b+shaderInfinityRT_Corevs,this._optimisedshader,this.scene.gl,this.scene.extParallelCompile,
!1);this._needsAttribsAndUniforms=!0;return}d=shaderInfinityRT_Modularfs;d=ReplaceAll(d,"MODULAR_FRAGMENT_HEADER_INSERT",this._fragheaderinsert);d=ReplaceAll(d,"MODULAR_FRAGMENT_INSERT",this._fraginsert);d=ReplaceAll(d,"MODULAR_FRAGMENT_SAMPLING",this._fragsamplinginsert)}else"Core"==this.type||"Standard"==this.type||"Indirect"==this.type?d=shaderInfinityRT_Corefs:console.log("***ERROR: Missing Material Type '"+this.type+"'");d=ReplaceAll(d,"SIRT_STANDARD_HEADER_INSERT",shaderInfinityRT_Headerfs);
d=ReplaceAll(d,"SIRT_STANDARD_HEADER_MINI_INSERT",shaderInfinityRT_Header_Minifs);d=ReplaceAll(d,"SIRT_PBR2_HEADER_INSERT",shaderInfinityRT_PBR2_Headerfs)}this.shader=new infinityrt_shader(b+c,b+d,this.scene.gl,this.scene.extParallelCompile,!1);"Indirect"!=this.type&&(this.scene._ShaderCache[this.type+" "+b]=this.shader)}else this.shader=this.scene._ShaderCache[this.type+" "+b];this._needsAttribsAndUniforms=!0}return a};
infinityrt_material.prototype.CheckShaderCompilation=function(){var a=!1;null==this.shader&&(a=this.compile());this.shader.checkCompilation();return a};infinityrt_material.prototype.addInitialBlocks=function(){null==this.shader&&this.compile();1<this.scene._glVersionNum&&"Indirect"!=this.type&&!this.shader.blocksAdded&&(this.buffBlockFrame=this.shader.addBlock("BlockFrame",this.scene),this.shader.addBlock("BlockInstance",this.scene),this.shader.blocksAdded=!0)};
infinityrt_material.prototype.use=function(){if(this.scene.curMat!=this){var a=this.scene.gl;if(this._needsAttribsAndUniforms){this.addInitialBlocks();this.CheckShaderCompilation();this._needsAttribsAndUniforms=!1;null!=this.shader.vertexShader&&this.shader.checkCompilation();if("Glass"==this.type)1<this.scene._glVersionNum?(this.buffBlockGlass=this.shader.addBlock("BlockGlass",this),this.shader.addInt("bumptexture",TEXTURE_MAP_BUMPTEX),this.shader.addInt("speculartexture",TEXTURE_MAP_SPECULARTEX),
"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.shader.addInt("specularenv",TEXTURE_MAP_SPECULARENV),this.shader.addInt("basetexture",TEXTURE_MAP_DIFFUSETEX),this.shader.addInt("glowpass",0)):(this.shader.addInt2("specularTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?this.textures[TEXTURE_MAP_SPECULARTEX]._coord:0]),this.shader.addInt2("baseTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?
1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?this.textures[TEXTURE_MAP_DIFFUSETEX]._coord:0]),this.shader.addInt2("bumpTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?this.textures[TEXTURE_MAP_BUMPTEX]._coord:0]),this.shader.addInt("bumptexture",TEXTURE_MAP_BUMPTEX),this.shader.addMat3("bumpUVT",this.bumpUVT),this.shader.addFloat("bumpuserscale",this.bumpuserscale),this.shader.addInt("speculartexture",TEXTURE_MAP_SPECULARTEX),
this.shader.addMat3("specularUVT",this.specularUVT),"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.shader.addInt("specularenv",TEXTURE_MAP_SPECULARENV),this.shader.addVector("specularcolor",this.specularcolor),this.shader.addFloat("degree_0_specular",this.degree_0_specular),this.shader.addFloat("degree_90_specular",this.degree_90_specular),this.shader.addFloat("brdf_curve",this.brdf_curve),this.shader.addInt("basetexture",TEXTURE_MAP_DIFFUSETEX),this.shader.addMat3("baseUVT",this.diffuseUVT),
this.shader.addVector("basecolor",this.basecolor),this.shader.addVector("exposure",this.exposure),this.shader.addFloat("gamma",this.scene.gamma),this.shader.addFloat("highlightcompression",this.scene.highlightcompression),this.shader.addFloat("vignetting",this.scene.vignetting)),0<this.scene._nPlanarReflectPassActive&&(this.shader.addVector("planarreflectstrength",this._colPlanarReflect),this.shader.addInt("texPlanarReflect"));else if("Ambient"==this.type)if(1<this.scene._glVersionNum){if(this.buffBlockAmbient=
this.shader.addBlock("BlockAmbient",this),this.shader.addInt("diffusetexture",TEXTURE_MAP_DIFFUSETEX),this.shader.addInt("ambocctexture",TEXTURE_MAP_AMBOCCTEX),this.shader.addInt("alphatexture",TEXTURE_MAP_ALPHATEX),0<this.scene._nPlanarReflectPassActive&&(this.shader.addVector("planarreflectstrength",this._colPlanarReflect),this.shader.addInt("texPlanarReflect")),"undefined"!=typeof this.dynambocc)for(var b=0;b<this.dynambocc.names.length&&8>b;b++)this.shader.addMatrix("matAmbOcc["+b+"]"),this.shader.addVector("vecAmbOccSize["+
b+"]")}else{if(this.shader.addInt2("diffuseTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?this.textures[TEXTURE_MAP_DIFFUSETEX]._coord:0]),this.shader.addInt2("alphaTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?this.textures[TEXTURE_MAP_ALPHATEX]._coord:0]),this.shader.addInt2("amboccTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?
1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?this.textures[TEXTURE_MAP_AMBOCCTEX]._coord:0]),this.shader.addInt("diffusetexture"),this.shader.addMat3("diffuseUVT",this.diffuseUVT),this.shader.addInt("ambocctexture"),this.shader.addMat3("amboccUVT",this.amboccUVT),this.shader.addVector("diffusecolor",this.diffusecolor),this.shader.addFloat("gamma",this.scene.gamma),this.shader.addFloat("highlightcompression",this.scene.highlightcompression),this.shader.addFloat("vignetting",this.scene.vignetting),
0<this.scene._nPlanarReflectPassActive&&(this.shader.addVector("planarreflectstrength",this._colPlanarReflect),this.shader.addInt("texPlanarReflect")),this.shader.addVector4("diffuseInputCC",this._diffuseInputCC),this.shader.addInt("linearworkflow",this.scene.linearworkflow),this.shader.addInt("decalalpha",this.decalalpha),this.shader.addInt("alphatexture"),this.shader.addMat3("alphaUVT",this.alphaUVT),this.shader.addFloat("alphacolor",this.alphacolor),this.shader.addFloat("ppexistencethreshold",
this.ppexistencethreshold),this.shader.addInt("ppexistence",this.ppexistence),"undefined"!=typeof this.dynambocc){this.shader.addInt2("dynAmbOcc");for(b=0;b<this.dynambocc.names.length&&8>b;b++)this.shader.addMatrix("matAmbOcc["+b+"]"),this.shader.addVector("vecAmbOccSize["+b+"]");this.shader.addFloat("dynAmbOccGamma")}}else if("Match"==this.type){if(1<this.scene._glVersionNum){this.buffBlockMatch=this.shader.addBlock("BlockMatch",this);this.shader.addInt("bumptexture",TEXTURE_MAP_BUMPTEX);this.shader.addInt("alphatexture",
TEXTURE_MAP_ALPHATEX);this.shader.addInt("diffusetexture",TEXTURE_MAP_DIFFUSETEX);8<this.scene.MaxTextureUnits&&("undefined"!=typeof this.scene.extOESSD||1<this.scene._glVersionNum)||this.usediffuseenv?(this.shader.addInt("diffuseenv",TEXTURE_MAP_DIFFUSEENV),this.shader.addInt("specularblurenv",TEXTURE_MAP_SPECULARBLURENV)):(this.shader.addInt("diffuseenv",TEXTURE_MAP_SPECULARENV),this.shader.addInt("specularblurenv",TEXTURE_MAP_SPECULARENV));this.shader.addInt("roughnesstexture",TEXTURE_MAP_ROUGHNESSTEX);
this.shader.addInt("additionaltexture",TEXTURE_MAP_ADDITIONALTEX);this.shader.addInt("speculartexture",TEXTURE_MAP_SPECULARTEX);this.shader.addInt("intensitytexture",TEXTURE_MAP_GLOSSYTEX);this.simpleintensity?(this.shader.addInt("channelcache1cubetexture",TEXTURE_MAP_PHYSICAL3),this.shader.addInt("channelcache2cubetexture",TEXTURE_MAP_PHYSICAL3),this.shader.addInt("channelcache3cubetexture",TEXTURE_MAP_PHYSICAL3)):("undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL1]&&this.shader.addInt("channelcache1cubetexture",
TEXTURE_MAP_PHYSICAL1),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL2]&&this.shader.addInt("channelcache2cubetexture",TEXTURE_MAP_PHYSICAL2),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL3]&&this.shader.addInt("channelcache3cubetexture",TEXTURE_MAP_PHYSICAL3));"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.shader.addInt("specularenv",TEXTURE_MAP_SPECULARENV);this.shader.addInt("reflectionplaneTex",TEXTURE_MAP_REFLECTIONTEX);this.shader.addInt("reflectionplaneTex2",
TEXTURE_MAP_REFLECTIONTEX2);0<this.numreflectionplanes&&(this._rpInst=[]);for(b=0;b<this.numreflectionplanes;b++)this.shader.addMatrix("reflectionplanematrix["+b+"]"),this._rpInst[b]=this.scene.getInstanceByNameIncEnv(this._rpInstName[b],this.scene);this.shader.addInt2("reflectionplanetexval");this.shader.addMatrix("reflectionplanedynamicinfluence");this.shader.addFloat("curveMax");this.shader.addFloat("curveMin");"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&(this.shader.addInt("ambocctexture",
TEXTURE_MAP_AMBOCCTEX),"Parameterised"==this.textures[TEXTURE_MAP_AMBOCCTEX].type&&this.shader.addVector("amboccParamValue",this.amboccParamValue));this.shader.addInt("glowpass",0);this.shader.addVector("camzv",infinityrt_normalize([this.scene.matView[8],this.scene.matView[9],this.scene.matView[10]]))}else{this.shader.addVector("diffusecolor");this.shader.addVector("intensitycolor");this.shader.addVector("intensitybcolor");this.shader.addVector("specularcolor");this.shader.addVector("mapblurlevel");
this.shader.addVector("additionalcolor");this.shader.addVector("amboccBoost");this.shader.addVector("ior_R0");this.shader.addMat3("diffuseUVT");this.shader.addMat3("roughnessUVT");this.shader.addMat3("intensityUVT");this.shader.addMat3("specularUVT");this.shader.addMat3("alphaUVT");this.shader.addMat3("bumpUVT");this.shader.addMat3("additionalUVT");this.shader.addMat3("amboccUVT");this.shader.addFloat("invertreflectiony");this.shader.addFloat2("bumpflakesdata");this.shader.addFloat("alphacolor");
this.shader.addFloat("gamma");this.shader.addFloat("highlightcompression");this.shader.addFloat("vignetting");this.shader.addInt3("ior_R0Flip");this.shader.addInt3("hasIOR");this.shader.addInt2("diffuseTexData");this.shader.addInt2("roughnessTexData");this.shader.addInt2("intensityTexData");this.shader.addInt2("specularTexData");this.shader.addInt2("additionalTexData");this.shader.addInt2("alphaTexData");this.shader.addInt2("amboccTexData");this.shader.addInt2("bumpTexData");this.shader.addInt("uhasDiffuseEnv");
this.shader.addInt("linearworkflow");this.shader.addInt("refractionmode");this.shader.addInt4("iflagsA");this.shader.addInt4("iflagsB");this.shader.addVector4("fflagsA");this.shader.addVector4("fflagsB");this.shader.addInt("bumptexture");this.shader.addInt("alphatexture");this.shader.addInt("diffusetexture");this.shader.addInt("diffuseenv");this.shader.addInt("roughnesstexture");this.shader.addInt("additionaltexture");this.shader.addInt("speculartexture");this.shader.addInt("intensitytexture");"undefined"!=
typeof this.textures[TEXTURE_MAP_PHYSICAL1]&&this.shader.addInt("channelcache1cubetexture");"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL2]&&this.shader.addInt("channelcache2cubetexture");"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL3]&&this.shader.addInt("channelcache3cubetexture");"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.shader.addInt("specularenv");this.shader.addInt("specularblurenv");this.shader.addInt("reflectionplaneTex");this.shader.addInt("reflectionplaneTex2");
0<this.numreflectionplanes&&(this._rpInst=[]);for(b=0;b<this.numreflectionplanes;b++)this.shader.addMatrix("reflectionplanematrix["+b+"]"),this._rpInst[b]=this.scene.getInstanceByNameIncEnv(this._rpInstName[b],this.scene);this.shader.addInt("reflectionplanestotal");this.shader.addFloat("reflectionplanescale");this.shader.addInt("reflectionplanealternativemix");this.shader.addInt("reflectionplanescalealpha");this.shader.addFloat("reflectionplanescalespecular");this.shader.addFloat("reflectionplaneroughness");
this.shader.addInt2("reflectionplanetexval");this.shader.addMatrix("reflectionplanedynamicinfluence");this.shader.addFloat("curveMax");this.shader.addFloat("curveMin");"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&(this.shader.addInt("ambocctexture"),"Parameterised"==this.textures[TEXTURE_MAP_AMBOCCTEX].type&&this.shader.addVector("amboccParamValue",this.amboccParamValue));this.shader.addVector("exposure");this.shader.addFloat("fadedReflectionsScale",this.scene.fadedReflectionsScale);
this.shader.addFloat("fadedReflectionsOffset",this.scene.fadedReflectionsOffset);this.shader.addFloat("fadedReflectionsPow",this.scene.fadedReflectionsPow);this.shader.addVector("fadedReflectionsColor",this.scene.fadedReflectionsColor);this.shader.addVector("envAABBMin",this.scene._AABBmin);this.shader.addVector("envAABBMax",this.scene._AABBmax);this.shader.addVector("camzv",infinityrt_normalize([this.scene.matView[8],this.scene.matView[9],this.scene.matView[10]]));this.shader.addVector("fAngVector")}0!=
this.amboccusevertcol&&(this.shader.addVertexArray("aColor"),this.shader.addInt("amboccchannel"));this.AddLightUniforms()}else"Unlit"==this.type?(1<this.scene._glVersionNum?this.buffBlockUnlit=this.shader.addBlock("BlockUnlit",this):(this.shader.addVector("additionalcolor",this.additionalcolor),this.shader.addFloat("fadedReflectionsScale",this.scene.fadedReflectionsScale),this.shader.addFloat("fadedReflectionsOffset",this.scene.fadedReflectionsOffset),this.shader.addFloat("fadedReflectionsPow",this.scene.fadedReflectionsPow),
this.shader.addVector("fadedReflectionsColor",this.scene.fadedReflectionsColor),this.shader.addFloat("alphacolor"),this.shader.addFloat("gamma"),this.shader.addFloat("highlightcompression"),this.shader.addFloat("vignetting"),this.shader.addVector("exposure"),this.shader.addVector("glowbias"),this.shader.addMat3("alphaUVT",this.alphaUVT),this.shader.addMat3("additionalUVT",this.additionalUVT),this.shader.addInt2("additionalTexData"),this.shader.addInt2("alphaTexData"),this.shader.addInt("gammaDiffAddTexs"),
this.shader.addInt("linearworkflow"),this.shader.addInt("decalalpha"),this.shader.addInt("ppexistence")),this.shader.addInt("alphatexture",TEXTURE_MAP_ALPHATEX),this.shader.addInt("additionaltexture",TEXTURE_MAP_ADDITIONALTEX),this.shader.addInt("glowpass",0)):"Reflective"==this.type?(this.shader.addVector("diffusecolor"),this.shader.addVector("intensitycolor"),this.shader.addVector("intensitybcolor"),this.shader.addVector("specularcolor"),this.shader.addVector("mapblurlevel"),this.shader.addVector("additionalcolor"),
this.shader.addVector("ior_R0"),this.shader.addFloat("invertreflectiony"),this.shader.addFloat("alphacolor"),this.shader.addFloat("gamma"),this.shader.addFloat("highlightcompression"),this.shader.addFloat("vignetting"),this.shader.addFloat("envScale"),this.shader.addInt3("ior_R0Flip"),this.shader.addInt3("hasIOR"),this.shader.addFloat("roughness"),this.shader.addInt("decalalpha",this.decalalpha),this.shader.addInt("ppexistence",this.ppexistence),this.shader.addInt("dualintensitycolor",this.dualintensitycolor),
this.shader.addFloat("dualintensityfalloff"),this.shader.addFloat("roughnessEdgeFac"),this.shader.addFloat("iorpower"),this.shader.addVector("exposure"),this.shader.addVector("glowbias"),this.shader.addInt("diffuseenv",TEXTURE_MAP_DIFFUSEENV),this.shader.addInt("specularenv",TEXTURE_MAP_SPECULARENV),this.shader.addInt("specularblurenv"),this.shader.addInt("channelcache1cubetexture"),this.shader.addInt("channelcache2cubetexture"),this.shader.addInt("channelcache3cubetexture"),this.shader.addVector("exposure"),
this.shader.addFloat("fadedReflectionsScale",this.scene.fadedReflectionsScale),this.shader.addFloat("fadedReflectionsOffset",this.scene.fadedReflectionsOffset),this.shader.addFloat("fadedReflectionsPow",this.scene.fadedReflectionsPow),this.shader.addVector("fadedReflectionsColor",this.scene.fadedReflectionsColor),this.shader.addInt("glowpass",0),this.shader.addFloat("curveMax"),this.shader.addFloat("curveMin"),this.AddLightUniforms()):"ARKit"==this.type?(this.shader.addInt("uhasDiffuseEnv","undefined"!=
typeof this.textures[TEXTURE_MAP_DIFFUSEENV]?1:0),this.shader.addInt("uhasDiffuseTexture","undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?1:0),this.shader.addInt("uhasRoughnessTexture","undefined"!=typeof this.textures[TEXTURE_MAP_ROUGHNESSTEX]?1:0),this.shader.addInt("uhasIntensityTexture","undefined"!=typeof this.textures[TEXTURE_MAP_GLOSSYTEX]?1:0),this.shader.addInt("uhasSpecularTexture","undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?1:0),this.shader.addInt("uhasAdditionalTexture",
"undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]?1:0),this.shader.addInt("uhasAlphaTexture","undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?1:0),this.shader.addInt2("amboccTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?this.textures[TEXTURE_MAP_AMBOCCTEX]._coord:0]),this.shader.addInt2("bumpTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?
this.textures[TEXTURE_MAP_BUMPTEX]._coord:0]),this.shader.addInt("sphericalwhirl"),this.shader.addInt("bumptexture"),this.shader.addMat3("bumpUVT",this.bumpUVT),this.shader.addFloat("bumpuserscale",this.bumpuserscale),this.shader.addInt("alphatexture"),this.shader.addMat3("alphaUVT",this.alphaUVT),this.shader.addInt("decalalpha",this.decalalpha),this.shader.addFloat("alphacolor",this.alphacolor),this.shader.addInt("diffusetexture"),this.shader.addMat3("diffuseUVT",this.diffuseUVT),this.shader.addInt("diffuseenv"),
this.shader.addInt("roughnesstexture"),this.shader.addMat3("roughnessUVT",this.roughnessUVT),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL1]&&this.shader.addInt("channelcache1cubetexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL2]&&this.shader.addInt("channelcache2cubetexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL3]&&this.shader.addInt("channelcache3cubetexture"),this.shader.addInt("speculartexture"),this.shader.addMat3("specularUVT",this.specularUVT),"undefined"!=
typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.shader.addInt("specularenv"),this.shader.addFloat("roughness",0==this.specularworkflow?this.roughness*this.roughness:this.roughness),this.shader.addVector("mapblurlevel",this.roughnessenvmaplevels),this.shader.addVector("diffusecolor",this.diffusecolor),this.shader.addVector("intensitycolor",this.glossycolor),this.shader.addInt("intensitytexture"),this.shader.addMat3("intensityUVT",this.intensityUVT),this.shader.addVector("specularcolor",this.specularcolor),
this.shader.addInt("specularworkflow",this.specularworkflow),this.shader.addFloat("ior_R0DG",this.ior_R0DG),this.shader.addFloat("ior_R0Intensity",this.ior_R0Intensity),this.shader.addFloat("ior_R0Clear",this.ior_R0Clear),this.shader.addInt("ior_R0DGFlip",this.iorDiffuse_flip),this.shader.addInt("ior_R0IntensityFlip",this.iorIntensity_flip),this.shader.addInt("ior_R0ClearFlip",this.iorClear_flip),this.shader.addFloat("invertreflectiony",this.invertreflectiony),this.shader.addInt("additionaltexture"),
this.shader.addMat3("additionalUVT",this.additionalUVT),"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&(this.shader.addInt("ambocctexture"),this.shader.addMat3("amboccUVT",this.textures[TEXTURE_MAP_AMBOCCTEX]._uvTransform),"Parameterised"==this.textures[TEXTURE_MAP_AMBOCCTEX].type&&this.shader.addVector("amboccParamValue",this.amboccParamValue)),0!=this.amboccusevertcol&&(this.shader.addVertexArray("aColor"),this.shader.addInt("amboccchannel")),this.shader.addVector("additionalcolor",this.additionalcolor),
this.shader.addInt("refractionmode",0),this.shader.addInt("hasIORDG",0!=this.ior_R0DG?1:0),this.shader.addInt("hasIORIntensity",0!=this.ior_R0Intensity?1:0),this.shader.addInt("hasIORClear",0!=this.ior_R0Clear?1:0),this.shader.addVector("exposure",this.exposure),this.shader.addFloat("gamma",this.scene.gamma),this.shader.addFloat("highlightcompression",this.scene.highlightcompression),this.shader.addFloat("vignetting",this.scene.vignetting)):"PBR2"==this.type?(this.shader.addInt("uhasDiffuseEnv","undefined"!=
typeof this.textures[TEXTURE_MAP_DIFFUSEENV]?1:0),this.shader.addInt("uhasDiffuseTexture","undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?1:0),this.shader.addInt("uhasRoughnessTexture","undefined"!=typeof this.textures[TEXTURE_MAP_ROUGHNESSTEX]?1:0),this.shader.addInt("uhasIntensityTexture","undefined"!=typeof this.textures[TEXTURE_MAP_GLOSSYTEX]?1:0),this.shader.addInt("uhasSpecularTexture","undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?1:0),this.shader.addInt("uhasAdditionalTexture",
"undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]?1:0),this.shader.addInt("uhasAlphaTexture","undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?1:0),this.shader.addInt2("amboccTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?this.textures[TEXTURE_MAP_AMBOCCTEX]._coord:0]),this.shader.addInt2("bumpTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?
this.textures[TEXTURE_MAP_BUMPTEX]._coord:0]),this.shader.addInt("bumptexture"),this.shader.addMat3("bumpUVT","undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?this.textures[TEXTURE_MAP_BUMPTEX]._uvTransform:[1,0,0,0,1,0,0,0,1]),this.shader.addFloat("bumpuserscale",this.bumpuserscale),this.shader.addInt("ShadingModel",this.shadingmodel),this.shader.addInt("alphatexture"),this.shader.addMat3("alphaUVT","undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?this.textures[TEXTURE_MAP_ALPHATEX]._uvTransform:
[1,0,0,0,1,0,0,0,1]),this.shader.addInt("decalalpha",this.decalalpha),this.shader.addFloat("alphacolor",this.alphacolor),this.shader.addInt("diffusetexture"),this.shader.addMat3("diffuseUVT","undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?this.textures[TEXTURE_MAP_DIFFUSETEX]._uvTransform:[1,0,0,0,1,0,0,0,1]),this.shader.addInt("diffuseenv"),this.shader.addInt("roughnesstexture"),this.shader.addMat3("roughnessUVT","undefined"!=typeof this.textures[TEXTURE_MAP_ROUGHNESSTEX]?this.textures[TEXTURE_MAP_ROUGHNESSTEX]._uvTransform:
[1,0,0,0,1,0,0,0,1]),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL1]&&this.shader.addInt("channelcache1cubetexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL2]&&this.shader.addInt("channelcache2cubetexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL3]&&this.shader.addInt("channelcache3cubetexture"),this.shader.addInt("speculartexture"),this.shader.addMat3("specularUVT","undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?this.textures[TEXTURE_MAP_SPECULARTEX]._uvTransform:
[1,0,0,0,1,0,0,0,1]),"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.shader.addInt("specularenv"),this.shader.addFloat("roughness",0==this.specularworkflow?this.roughness*this.roughness:this.roughness),this.shader.addVector("mapblurlevel",this.roughnessenvmaplevels),this.shader.addVector("diffusecolor",this.diffusecolor),this.shader.addVector("intensitycolor",this.glossycolor),this.shader.addInt("intensitytexture"),this.shader.addMat3("intensityUVT","undefined"!=typeof this.textures[TEXTURE_MAP_GLOSSYTEX]?
this.textures[TEXTURE_MAP_GLOSSYTEX]._uvTransform:[1,0,0,0,1,0,0,0,1]),this.shader.addVector("specularcolor",this.specularcolor),this.shader.addInt("specularworkflow",this.specularworkflow),this.shader.addFloat("invertreflectiony",this.invertreflectiony),this.shader.addInt("additionaltexture"),this.shader.addMat3("additionalUVT","undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]?this.textures[TEXTURE_MAP_ADDITIONALTEX]._uvTransform:[1,0,0,0,1,0,0,0,1]),"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&
(this.shader.addInt("ambocctexture"),this.shader.addMat3("amboccUVT",this.textures[TEXTURE_MAP_AMBOCCTEX]._uvTransform),"Parameterised"==this.textures[TEXTURE_MAP_AMBOCCTEX].type&&this.shader.addVector("amboccParamValue",this.amboccParamValue)),0!=this.amboccusevertcol&&(this.shader.addVertexArray("aColor"),this.shader.addInt("amboccchannel")),this.shader.addVector("additionalcolor",this.additionalcolor),this.shader.addInt("refractionmode",0),this.shader.addInt("hasIORDG",0!=this.ior_R0DG?1:0),this.shader.addInt("hasIORIntensity",
0!=this.ior_R0Intensity?1:0),this.shader.addInt("hasIORClear",0!=this.ior_R0Clear?1:0),this.shader.addFloat("metallic",this.metallic),this.shader.addInt("uhasMetallicTexture","undefined"!=typeof this.textures[TEXTURE_MAP_TRANSMISSIONTEX]?1:0),this.shader.addInt("metallictexture"),this.shader.addMat3("metallicUVT","undefined"!=typeof this.textures[TEXTURE_MAP_TRANSMISSIONTEX]?this.textures[TEXTURE_MAP_TRANSMISSIONTEX]._uvTransform:[1,0,0,0,1,0,0,0,1]),this.shader.addVector("exposure",this.exposure),
this.shader.addFloat("gamma",this.scene.gamma),this.shader.addFloat("highlightcompression",this.scene.highlightcompression),this.shader.addFloat("vignetting",this.scene.vignetting),this.shader.addFloat("ClearCoatRoughness",this.clearcoatroughness),"undefined"!=typeof this.textures[TEXTURE_MAP_CCROUGHNESSTEX]&&(this.shader.addInt("clearcoatroughnessTex"),this.shader.addMat3("clearcoatroughnessUVT","undefined"!=typeof this.textures[TEXTURE_MAP_CCROUGHNESSTEX]?this.textures[TEXTURE_MAP_CCROUGHNESSTEX]._uvTransform:
[1,0,0,0,1,0,0,0,1]))):"Glass_Refracted"==this.type?(this.shader.addInt("uhasSpecularTexture","undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?1:0),this.shader.addInt("uhasBaseTexture","undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?1:0),this.shader.addInt("uhasTransmissionTexture","undefined"!=typeof this.textures[TEXTURE_MAP_TRANSMISSIONTEX]?1:0),this.shader.addInt2("bumpTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?
this.textures[TEXTURE_MAP_BUMPTEX]._coord:0]),this.shader.addInt("bumptexture"),this.shader.addMat3("bumpUVT","undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?this.textures[TEXTURE_MAP_BUMPTEX]._uvTransform:[1,0,0,0,1,0,0,0,1]),this.shader.addFloat("bumpuserscale",this.bumpuserscale),this.shader.addInt("speculartexture"),this.shader.addMat3("specularUVT","undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?this.textures[TEXTURE_MAP_SPECULARTEX]._uvTransform:[1,0,0,0,1,0,0,0,1]),this.shader.addInt("specularenv"),
this.shader.addVector("specularcolor",this.specularcolor),this.shader.addFloat("ior_R0Intensity",this.ior_R0Intensity),this.shader.addFloat("ior_R0Clear",this.ior_R0Clear),this.shader.addInt("ior_R0IntensityFlip",this.iorIntensity_flip),this.shader.addInt("ior_R0ClearFlip",this.iorClear_flip),this.shader.addFloat("brdf_curve",this.brdf_curve),this.shader.addInt("basetexture"),this.shader.addMat3("baseUVT","undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?this.textures[TEXTURE_MAP_DIFFUSETEX]._uvTransform:
[1,0,0,0,1,0,0,0,1]),this.shader.addVector("basecolor",this.basecolor),this.shader.addInt("refractiontexture"),this.shader.addFloat("refractscale",this.refractscale),this.shader.addFloat("refractthinness",this.refractthinness),this.shader.addVector("camx"),this.shader.addVector("camy"),this.shader.addVector("camz"),this.shader.addInt("transmissiontexture"),this.shader.addMat3("transmissionUVT","undefined"!=typeof this.textures[TEXTURE_MAP_TRANSMISSIONTEX]?this.textures[TEXTURE_MAP_TRANSMISSIONTEX]._uvTransform:
[1,0,0,0,1,0,0,0,1]),this.shader.addVector("transmissioncolor",this.transmissioncolor),this.shader.addInt("hasIORIntensity",0!=this.ior_R0Intensity?1:0),this.shader.addInt("hasIORClear",0!=this.ior_R0Clear?1:0),this.shader.addVector("exposure",this.exposure),0!=this._2ndref[0]&&0!=this._2ndref[1]&&this.shader.addFloat2("v2ndRef",this._2ndref),this.shader.addFloat("gamma",this.scene.gamma),this.shader.addFloat("highlightcompression",this.scene.highlightcompression),this.shader.addFloat("vignetting",
this.scene.vignetting)):"Modular"==this.type?(this.shader.addVertexArray("aColor"),this.shader.addInt("amboccchannel"),infinityrt_AddModularUniforms(this.name,this._unis,this.shader)):("undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]&&(this.shader.addInt("bumptexture"),this.shader.addMat3("bumpUVT",this.textures[TEXTURE_MAP_BUMPTEX]._uvTransform),this.shader.addFloat("bumpuserscale",this.bumpuserscale)),"undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]&&(this.shader.addInt("alphatexture"),
this.shader.addMat3("alphaUVT",this.textures[TEXTURE_MAP_ALPHATEX]._uvTransform)),"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]&&(this.shader.addInt("diffusetexture"),this.shader.addMat3("diffuseUVT",this.textures[TEXTURE_MAP_DIFFUSETEX]._uvTransform)),"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSEENV]&&this.shader.addInt("diffuseenv"),"undefined"!=typeof this.textures[TEXTURE_MAP_GLOSSYTEX]&&(this.shader.addInt("glossytexture"),this.shader.addMat3("glossyUVT",this.textures[TEXTURE_MAP_GLOSSYTEX]._uvTransform)),
"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL1]&&this.shader.addInt("glossyenv"),"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]&&(this.shader.addInt("speculartexture"),this.shader.addMat3("specularUVT",this.textures[TEXTURE_MAP_SPECULARTEX]._uvTransform)),"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.shader.addInt("specularenv"),"undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]&&(this.shader.addInt("additionaltexture"),this.shader.addMat3("additionalUVT",
this.textures[TEXTURE_MAP_ADDITIONALTEX]._uvTransform)),"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&(this.shader.addInt("ambocctexture"),this.shader.addMat3("amboccUVT",this.textures[TEXTURE_MAP_AMBOCCTEX]._uvTransform)),this.shader.addVector("additionalcolor",this.additionalcolor),this.shader.addVector("diffusecolor",this.diffusecolor),this.shader.addVector("glossycolor",this.glossycolor),this.shader.addVector("specularcolor",this.specularcolor),this.shader.addInt("fresnel",this.fresnel),
this.shader.addFloat("degree_0_specular",this.degree_0_specular),this.shader.addFloat("degree_90_specular",this.degree_90_specular),this.shader.addFloat("brdf_curve",this.brdf_curve),this.shader.addFloat("invertreflectiony",this.invertreflectiony),this.shader.addInt("refractionmode",0),this.shader.addFloat("gamma",this.scene.gamma),this.shader.addFloat("highlightcompression",this.scene.highlightcompression),this.shader.addFloat("vignetting",this.scene.vignetting));1==this.scene._glVersionNum&&(this.shader.addMatrix("uMVPMatrix"),
this.shader.addVector("uCamPos"),this.shader.addFloat2("jitter"),this.shader.addFloat2("viewportsize"),this.shader.addInt("aarefinecount"),this.shader.addFloat("fovfactor"),this.shader.addFloat("planarReflFlip"),this.shader.addFloat("scenesize"),this.shader.addMatrix("uOMatrix"),4==this.scene.geomgen||5==this.scene.geomgen)&&(this.shader.addVector("bbmin"),this.shader.addVector("bbmax"),this.shader.addFloat2("texbbmin"),this.shader.addFloat2("texbbmax"),1<this.scene.uvch&&(this.shader.addFloat2("tex2bbmin"),
this.shader.addFloat2("tex2bbmax")));if(1==this.scene._glVersionNum||"Match"!=this.type&&"Unlit"!=this.type)"Match"==this.type?this.shader.addVector("cc_bri_con_sat",[this.scene._cc_brightness+this._cc_brightness,this.scene._cc_contrast*this._cc_contrast,this.scene._cc_saturation*this._cc_saturation]):"Reflective"==this.type||"Unlit"==this.type?(this.shader.addFloat("cc_brightness",this.scene._cc_brightness+this._cc_brightness),this.shader.addFloat("cc_contrast",this.scene._cc_contrast*this._cc_contrast),
this.shader.addFloat("cc_saturation",this.scene._cc_saturation*this._cc_saturation)):(this.shader.addFloat("cc_brightness",this.scene._cc_brightness),this.shader.addFloat("cc_contrast",this.scene._cc_contrast),this.shader.addFloat("cc_saturation",this.scene._cc_saturation)),b=[],b[0]=this.scene._cc_tint[0]*this._cc_tint[0],b[1]=this.scene._cc_tint[1]*this._cc_tint[1],b[2]=this.scene._cc_tint[2]*this._cc_tint[2],this.shader.addVector("cc_tint",b),this.shader.addFloat("mipmapbias",this.mipmapbias),
this.shader.addInt("uhasLUTTexture");this.shader.addVertexShaderPosVars(this.scene);this.shader.addVertexArray("aNormal");this.shader.addUVArray("aTextureCoord");1<this.scene.uvch&&this.shader.addUVArray("aTextureCoord2");this.shader.addVertexArray("aSurfTanU");this.shader.addInt("ColCorrAndCamResp",this.ColCorrAndCamResp);this.shader.addInt("isSecondaryMat");this.shader.addFloat("secondaryMatAlpha")}this.shader.use(this.scene);this.UpdateUniforms();if(1<this.scene._glVersionNum){var c=this.shader.uniforms.BlockMatch;
if(c){if(this.uniBlockDirty){this.uniBlockDirty=!1;a.bindBuffer(a.UNIFORM_BUFFER,this.buffBlockMatch);a.bufferSubData(a.UNIFORM_BUFFER,0,new Float32Array([this.diffusecolor[0],this.diffusecolor[1],this.diffusecolor[2],this.roughness,this.glossycolor[0],this.glossycolor[1],this.glossycolor[2],this.brdf_curve,this.intensityBcolor[0],this.intensityBcolor[1],this.intensityBcolor[2],this.invertreflectiony,this.specularcolor[0],this.specularcolor[1],this.specularcolor[2],this.bumpflakesdata[0],this.roughnessenvmaplevels[0],
this.roughnessenvmaplevels[1],this.roughnessenvmaplevels[2],this.bumpflakesdata[1],this.additionalcolor[0],this.additionalcolor[1],this.additionalcolor[2],this.dualintensityfalloff,this.ambOccBoost[0],this.ambOccBoost[1],this.ambOccBoost[2],this.scene.NormDerivThreshold,this.ior_R0DG,this.ior_R0Intensity,this.ior_R0Clear,this.alphacolor,this.scene._cc_tint[0]*this._cc_tint[0],this.scene._cc_tint[1]*this._cc_tint[1],this.scene._cc_tint[2]*this._cc_tint[2],this.reflectionplanescalespecular]));a.bufferSubData(a.UNIFORM_BUFFER,
144,this.diffuseUVT_3x4);a.bufferSubData(a.UNIFORM_BUFFER,192,this.roughnessUVT_3x4);a.bufferSubData(a.UNIFORM_BUFFER,240,this.intensityUVT_3x4);a.bufferSubData(a.UNIFORM_BUFFER,288,this.specularUVT_3x4);a.bufferSubData(a.UNIFORM_BUFFER,336,this.alphaUVT_3x4);a.bufferSubData(a.UNIFORM_BUFFER,384,this.bumpUVT_3x4);a.bufferSubData(a.UNIFORM_BUFFER,432,this.additionalUVT_3x4);a.bufferSubData(a.UNIFORM_BUFFER,480,this.amboccUVT_3x4);a.bufferSubData(a.UNIFORM_BUFFER,528,new Float32Array([this.envScale,
this.bumpuserscale,this.mipmapbias,this.scene.mipmapbiasEnv,this.scene.gamma,this.scene.highlightcompression,this.scene.vignetting,this.scene._cc_brightness+this._cc_brightness,this.scene._cc_contrast*this._cc_contrast,this.scene._cc_saturation*this._cc_saturation,this.reflectionplanescale,this.roughnessEdgeFac,this.exposure[0],this.exposure[1],this.exposure[2],1,this.glowbias[0],this.glowbias[1],this.glowbias[2],this.reflectionplaneroughness]));var d=[this.iorDiffuse_flip,this.iorIntensity_flip,
this.iorClear_flip],e=[0!=this.ior_R0DG?1:0,0!=this.ior_R0Intensity?1:0,0!=this.ior_R0Clear?1:0],f=["undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?this.textures[TEXTURE_MAP_DIFFUSETEX]._coord:0],g=["undefined"!=typeof this.textures[TEXTURE_MAP_ROUGHNESSTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_ROUGHNESSTEX]?this.textures[TEXTURE_MAP_ROUGHNESSTEX]._coord:0],h=["undefined"!=typeof this.textures[TEXTURE_MAP_GLOSSYTEX]?
1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_GLOSSYTEX]?this.textures[TEXTURE_MAP_GLOSSYTEX]._coord:0],k=["undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?this.textures[TEXTURE_MAP_SPECULARTEX]._coord:0],l=["undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]?this.textures[TEXTURE_MAP_ADDITIONALTEX]._coord:0];b=["undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?
1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?this.textures[TEXTURE_MAP_ALPHATEX]._coord:0];var m=["undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?this.textures[TEXTURE_MAP_AMBOCCTEX]._coord:0],n=["undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?this.textures[TEXTURE_MAP_BUMPTEX]._coord:0],p="undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?
this.textures[TEXTURE_MAP_SPECULARTEX].fAngVector:[.1,.16,.13];a.bufferSubData(a.UNIFORM_BUFFER,608,new Int32Array([d[0],d[1],d[2],this.reflectionplanescalealpha,e[0],e[1],e[2],this.reflectionplanealternativemix,f[0],f[1],g[0],g[1],h[0],h[1],k[0],k[1],l[0],l[1],b[0],b[1],m[0],m[1],n[0],n[1],this._rpInstTexId[0],this._rpInstTexId[1],"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSEENV]&&this.usediffuseenv?1:0,this.usebumpflakes,this.gammaDiffAddTexs,this.scene.linearworkflow,this.simpleintensity,
this.dualintensitycolor,this.sphericalwhirl,this.decalalpha,this.clearIgnoreBump,0,0,this.numreflectionplanes*this.enablereflectionplanes,this.ppexistence]));a.bufferSubData(a.UNIFORM_BUFFER,764,new Float32Array([this.scene.fadedReflectionsScale,this.scene.fadedReflectionsOffset,this.scene.fadedReflectionsPow,this.scene.fadedReflectionsColor[0],this.scene.fadedReflectionsColor[1],this.scene.fadedReflectionsColor[2],this.scene._AABBmin[0],this.scene._AABBmin[1],this.scene._AABBmin[2],this.scene._AABBmax[0],
this.scene._AABBmax[1],this.scene._AABBmax[2],p[0],p[1],p[2]]));a.bindBuffer(a.UNIFORM_BUFFER,null)}a.bindBufferBase(a.UNIFORM_BUFFER,c,this.buffBlockMatch)}if(f=this.shader.uniforms.BlockUnlit)this.uniBlockUnlitDirty&&(this.uniBlockUnlitDirty=!1,a.bindBuffer(a.UNIFORM_BUFFER,this.buffBlockUnlit),c=new Float32Array([this.additionalcolor[0],this.additionalcolor[1],this.additionalcolor[2],1,this.scene._cc_tint[0]*this._cc_tint[0],this.scene._cc_tint[1]*this._cc_tint[1],this.scene._cc_tint[2]*this._cc_tint[2],
1,this.exposure[0],this.exposure[1],this.exposure[2],this.alphacolor,this.glowbias[0],this.glowbias[1],this.glowbias[2],this.scene.gamma,this.scene.fadedReflectionsScale,this.scene.fadedReflectionsOffset,this.scene.fadedReflectionsPow,this.scene.fadedReflectionsColor[0],this.scene.fadedReflectionsColor[1],this.scene.fadedReflectionsColor[2],this.mipmapbias,this.scene.highlightcompression,this.scene.vignetting,this.scene._cc_brightness+this._cc_brightness,this.scene._cc_contrast*this._cc_contrast,
this.scene._cc_saturation*this._cc_saturation]),l=["undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]?this.textures[TEXTURE_MAP_ADDITIONALTEX]._coord:0],b=["undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?this.textures[TEXTURE_MAP_ALPHATEX]._coord:0],a.bufferSubData(a.UNIFORM_BUFFER,0,c),a.bufferSubData(a.UNIFORM_BUFFER,112,this.alphaUVT_3x4),a.bufferSubData(a.UNIFORM_BUFFER,
160,this.additionalUVT_3x4),a.bufferSubData(a.UNIFORM_BUFFER,208,new Int32Array([l[0],l[1],b[0],b[1],this.gammaDiffAddTexs,this.scene.linearworkflow,this.decalalpha,this.ppexistence])),a.bindBuffer(a.UNIFORM_BUFFER,null)),a.bindBufferBase(a.UNIFORM_BUFFER,f,this.buffBlockUnlit);if(k=this.shader.uniforms.BlockAmbient){if(this.uniBlockAmbientDirty){this.uniBlockAmbientDirty=!1;a.bindBuffer(a.UNIFORM_BUFFER,this.buffBlockAmbient);n=[0,0];b=1;if("undefined"!=typeof this.dynambocc){if(null==this.dynambocc.nodes)for(this.dynambocc.nodes=
[],b=0;b<this.dynambocc.names.length&&8>b;b++)f=this.dynambocc.names[b],this.refEnv&&(f=this.refEnv+":"+f),this.dynambocc.nodes.push(this.scene.getInstanceByNameIncEnv(f));n[0]=this.dynambocc.names.length;n[1]=this.dynambocc.inalpha;b=1/this.dynambocc.gamma}c=new Float32Array([this.diffusecolor[0],this.diffusecolor[1],this.diffusecolor[2],this.alphacolor,this._diffuseInputCC[0],this._diffuseInputCC[1],this._diffuseInputCC[2],this._diffuseInputCC[3],this.scene._cc_tint[0],this.scene._cc_tint[1],this.scene._cc_tint[2],
this.ppexistencethreshold,this.mipmapbias,this.scene.gamma,this.scene.highlightcompression,this.scene.vignetting,b,this.scene._cc_brightness+this._cc_brightness,this.scene._cc_contrast*this._cc_contrast,this.scene._cc_saturation*this._cc_saturation]);f=["undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?this.textures[TEXTURE_MAP_DIFFUSETEX]._coord:0];b=["undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?
this.textures[TEXTURE_MAP_ALPHATEX]._coord:0];m=["undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?this.textures[TEXTURE_MAP_AMBOCCTEX]._coord:0];l=0;a.bufferSubData(a.UNIFORM_BUFFER,0,c);a.bufferSubData(a.UNIFORM_BUFFER,80,this.diffuseUVT_3x4);a.bufferSubData(a.UNIFORM_BUFFER,128,this.alphaUVT_3x4);a.bufferSubData(a.UNIFORM_BUFFER,176,this.amboccUVT_3x4);a.bufferSubData(a.UNIFORM_BUFFER,224,new Int32Array([f[0],f[1],b[0],b[1],m[0],
m[1],n[0],n[1],this.decalalpha,this.ppexistence,l,this.scene.linearworkflow]));a.bindBuffer(a.UNIFORM_BUFFER,null)}a.bindBufferBase(a.UNIFORM_BUFFER,k,this.buffBlockAmbient)}if(b=this.shader.uniforms.BlockGlass)this.uniBlockGlassDirty&&(this.uniBlockGlassDirty=!1,a.bindBuffer(a.UNIFORM_BUFFER,this.buffBlockGlass),c=new Float32Array([this.specularcolor[0],this.specularcolor[1],this.specularcolor[2],this.bumpuserscale,this.basecolor[0],this.basecolor[1],this.basecolor[2],this.degree_0_specular,this.scene._cc_tint[0],
this.scene._cc_tint[1],this.scene._cc_tint[2],this.degree_90_specular,this.exposure[0],this.exposure[1],this.exposure[2],1,this.glowbias[0],this.glowbias[1],this.glowbias[2],1,this.scene._cc_brightness+this._cc_brightness,this.scene._cc_contrast*this._cc_contrast,this.scene._cc_saturation*this._cc_saturation,this.brdf_curve,this.mipmapbias,this.scene.gamma,this.scene.highlightcompression,this.scene.vignetting]),k=["undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?
this.textures[TEXTURE_MAP_SPECULARTEX]._coord:0],f=["undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?this.textures[TEXTURE_MAP_DIFFUSETEX]._coord:0],n=["undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?this.textures[TEXTURE_MAP_BUMPTEX]._coord:0],l=0,a.bufferSubData(a.UNIFORM_BUFFER,0,c),a.bufferSubData(a.UNIFORM_BUFFER,c.byteLength,this.specularUVT_3x4),a.bufferSubData(a.UNIFORM_BUFFER,
c.byteLength+48,this.diffuseUVT_3x4),a.bufferSubData(a.UNIFORM_BUFFER,c.byteLength+48+48,this.bumpUVT_3x4),a.bufferSubData(a.UNIFORM_BUFFER,c.byteLength+48+48+48,new Int32Array([k[0],k[1],f[0],f[1],n[0],n[1],0,l])),a.bindBuffer(a.UNIFORM_BUFFER,null)),a.bindBufferBase(a.UNIFORM_BUFFER,b,this.buffBlockGlass)}this.activeTexUnits={};this.nTexUnit=0;if("Glass"==this.type)1<this.scene._glVersionNum?(this.ApplyTexToStaticUnit(TEXTURE_MAP_BUMPTEX),this.ApplyTexToStaticUnit(TEXTURE_MAP_SPECULARTEX),this.ApplyTexToStaticUnit(TEXTURE_MAP_DIFFUSETEX),
"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.ApplyTexToStaticUnit(TEXTURE_MAP_SPECULARENV)):(this.ApplyTexToActiveUnit(TEXTURE_MAP_BUMPTEX,"bumptexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARTEX,"speculartexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_DIFFUSETEX,"basetexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARENV,"specularenv")),a.uniform3fv(this.shader.uniforms.exposure,this.scene._renderingGlowPass?
this.glowbias:this.exposure),null!=this.scene._fboPlanarReflect&&this.ApplyPlanarReflectTex();else if("Ambient"==this.type)1<this.scene._glVersionNum?(this.ApplyTexToStaticUnit(TEXTURE_MAP_DIFFUSETEX,"diffusetexture"),this.ApplyTexToStaticUnit(TEXTURE_MAP_ALPHATEX,"alphatexture"),this.ApplyTexToStaticUnit(TEXTURE_MAP_AMBOCCTEX,"ambocctexture")):(this.ApplyTexToActiveUnit(TEXTURE_MAP_DIFFUSETEX,"diffusetexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_ALPHATEX,"alphatexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_AMBOCCTEX,
"ambocctexture")),null!=this.scene._fboPlanarReflect&&this.ApplyPlanarReflectTex();else if("Match"==this.type){if(1<this.scene._glVersionNum){this.ApplyTexToStaticUnit(TEXTURE_MAP_BUMPTEX);this.ApplyTexToStaticUnit(TEXTURE_MAP_ALPHATEX);this.ApplyTexToStaticUnit(TEXTURE_MAP_DIFFUSETEX);this.ApplyTexToStaticUnit(TEXTURE_MAP_ROUGHNESSTEX);this.ApplyTexToStaticUnit(TEXTURE_MAP_SPECULARTEX);"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.ApplyTexToStaticUnit(TEXTURE_MAP_SPECULARENV);
8<this.scene.MaxTextureUnits&&("undefined"!=typeof this.scene.extOESSD||1<this.scene._glVersionNum)||this.usediffuseenv?(this.ApplyTexToStaticUnit(TEXTURE_MAP_DIFFUSEENV),this.ApplyTexToStaticUnit(TEXTURE_MAP_SPECULARBLURENV)):this.ApplyTexToStaticUnit(TEXTURE_MAP_SPECULARENV);this.simpleintensity?"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL3]&&(this.ApplyTexToStaticUnit(TEXTURE_MAP_PHYSICAL3),this.ApplyTexToStaticUnit(TEXTURE_MAP_PHYSICAL3),this.ApplyTexToStaticUnit(TEXTURE_MAP_PHYSICAL3)):
("undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL1]&&this.ApplyTexToStaticUnit(TEXTURE_MAP_PHYSICAL1),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL2]&&this.ApplyTexToStaticUnit(TEXTURE_MAP_PHYSICAL2),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL3]&&this.ApplyTexToStaticUnit(TEXTURE_MAP_PHYSICAL3));this.ApplyTexToStaticUnit(TEXTURE_MAP_GLOSSYTEX);this.ApplyTexToStaticUnit(TEXTURE_MAP_REFLECTIONTEX);for(b=0;b<this.numreflectionplanes;b++)a.uniformMatrix4fv(this.shader.uniforms["reflectionplanematrix["+
b+"]"],!1,this._rpInst[b].ltog_rpmatrix);this.shader.setMatrix("reflectionplanedynamicinfluence",this.reflectionplanedynamicinfluence);this.shader.setFloat("curveMax",this.scene.curveMax);this.shader.setFloat("curveMin",this.scene.curveMin);this.ApplyTexToStaticUnit(TEXTURE_MAP_REFLECTIONTEX2);this.ApplyTexToStaticUnit(TEXTURE_MAP_ADDITIONALTEX);this.ApplyTexToStaticUnit(TEXTURE_MAP_AMBOCCTEX);this.shader.setVector("camzv",infinityrt_normalize([this.scene.matView[8],this.scene.matView[9],this.scene.matView[10]]))}else{this.ApplyTexToActiveUnit(TEXTURE_MAP_BUMPTEX,
"bumptexture");this.ApplyTexToActiveUnit(TEXTURE_MAP_ALPHATEX,"alphatexture");this.ApplyTexToActiveUnit(TEXTURE_MAP_DIFFUSETEX,"diffusetexture");this.ApplyTexToActiveUnit(TEXTURE_MAP_ROUGHNESSTEX,"roughnesstexture");this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARTEX,"speculartexture");"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARENV,"specularenv");8<this.scene.MaxTextureUnits&&("undefined"!=typeof this.scene.extOESSD||1<this.scene._glVersionNum)||
this.usediffuseenv?(this.ApplyTexToActiveUnit(TEXTURE_MAP_DIFFUSEENV,"diffuseenv"),this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARBLURENV,"specularblurenv")):this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARENV,"diffuseenv");this.simpleintensity?"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL3]&&(this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL3,"channelcache1cubetexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL3,"channelcache2cubetexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL3,
"channelcache3cubetexture")):("undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL1]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL1,"channelcache1cubetexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL2]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL2,"channelcache2cubetexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL3]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL3,"channelcache3cubetexture"));this.ApplyTexToActiveUnit(TEXTURE_MAP_GLOSSYTEX,"intensitytexture");
this.ApplyTexToActiveUnit(TEXTURE_MAP_REFLECTIONTEX,"reflectionplaneTex");this.shader.setInt("reflectionplanestotal",this.numreflectionplanes*this.enablereflectionplanes);this.shader.setInt("reflectionplanealternativemix",this.reflectionplanealternativemix);this.shader.setInt("reflectionplanescalealpha",this.reflectionplanescalealpha);this.shader.setFloat("reflectionplanescalespecular",this.reflectionplanescalespecular);this.shader.setFloat("reflectionplaneroughness",this.reflectionplaneroughness);
this.shader.setFloat("reflectionplanescale",this.reflectionplanescale);this.shader.setInt2("reflectionplanetexval",this._rpInstTexId);for(b=0;b<this.numreflectionplanes;b++)a.uniformMatrix4fv(this.shader.uniforms["reflectionplanematrix["+b+"]"],!1,this._rpInst[b].ltog_rpmatrix);this.shader.setMatrix("reflectionplanedynamicinfluence",this.reflectionplanedynamicinfluence);this.shader.setFloat("curveMax",this.scene.curveMax);this.shader.setFloat("curveMin",this.scene.curveMin);this.ApplyTexToActiveUnit(TEXTURE_MAP_REFLECTIONTEX2,
"reflectionplaneTex2");this.ApplyTexToActiveUnit(TEXTURE_MAP_ADDITIONALTEX,"additionaltexture");this.ApplyTexToActiveUnit(TEXTURE_MAP_AMBOCCTEX,"ambocctexture");a.uniform3fv(this.shader.uniforms.exposure,this.scene._renderingGlowPass?this.glowbias:this.exposure);this.shader.setVector("camzv",infinityrt_normalize([this.scene.matView[8],this.scene.matView[9],this.scene.matView[10]]));p="undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?this.textures[TEXTURE_MAP_SPECULARTEX].fAngVector:[.1,.16,
.13];this.shader.setVector("fAngVector",p)}"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&"Parameterised"==this.textures[TEXTURE_MAP_AMBOCCTEX].type&&a.uniform3fv(this.shader.uniforms.amboccParamValue,this.amboccParamValue)}else"Unlit"==this.type?1<this.scene._glVersionNum?(this.ApplyTexToStaticUnit(TEXTURE_MAP_ALPHATEX),this.ApplyTexToStaticUnit(TEXTURE_MAP_ADDITIONALTEX)):("undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_ALPHATEX,"alphatexture"),
"undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_ADDITIONALTEX,"additionaltexture"),a.uniform3fv(this.shader.uniforms.exposure,this.scene._renderingGlowPass?this.glowbias:this.exposure)):"Reflective"==this.type?("undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARENV,"specularenv"),8<this.scene.MaxTextureUnits&&("undefined"!=typeof this.scene.extOESSD||1<this.scene._glVersionNum)||this.usediffuseenv?
(this.ApplyTexToActiveUnit(TEXTURE_MAP_DIFFUSEENV,"diffuseenv"),this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARBLURENV,"specularblurenv")):this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARENV,"diffuseenv"),this.simpleintensity?"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL3]&&(this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL3,"channelcache1cubetexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL3,"channelcache2cubetexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL3,"channelcache3cubetexture")):
("undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL1]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL1,"channelcache1cubetexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL2]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL2,"channelcache2cubetexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL3]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL3,"channelcache3cubetexture")),1==this.scene._glVersionNum&&a.uniform3fv(this.shader.uniforms.exposure,this.scene._renderingGlowPass?
this.glowbias:this.exposure),this.shader.setFloat("curveMax",this.scene.curveMax),this.shader.setFloat("curveMin",this.scene.curveMin)):"ARKit"==this.type?(this.ApplyTexToActiveUnit(TEXTURE_MAP_BUMPTEX,"bumptexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_ALPHATEX,"alphatexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_DIFFUSETEX,"diffusetexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_DIFFUSEENV,"diffuseenv"),this.ApplyTexToActiveUnit(TEXTURE_MAP_ROUGHNESSTEX,"roughnesstexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARTEX,
"speculartexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARENV,"specularenv"),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL1]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL1,"channelcache1cubetexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL2]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL2,"channelcache2cubetexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL3]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL3,
"channelcache3cubetexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_GLOSSYTEX,"intensitytexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_REFLECTIONTEX2]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_REFLECTIONTEX2,"reflectionplaneTex2"),this.ApplyTexToActiveUnit(TEXTURE_MAP_ADDITIONALTEX,"additionaltexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_AMBOCCTEX,"ambocctexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&"Parameterised"==this.textures[TEXTURE_MAP_AMBOCCTEX].type&&this.shader.setVector("amboccParamValue",
this.amboccParamValue),a.uniform3fv(this.shader.uniforms.exposure,this.scene._renderingGlowPass?this.glowbias:this.exposure)):"PBR2"==this.type?(this.ApplyTexToActiveUnit(TEXTURE_MAP_BUMPTEX,"bumptexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_ALPHATEX,"alphatexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_DIFFUSETEX,"diffusetexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_DIFFUSEENV,"diffuseenv"),this.ApplyTexToActiveUnit(TEXTURE_MAP_ROUGHNESSTEX,"roughnesstexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARTEX,
"speculartexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARENV,"specularenv"),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL1]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL1,"channelcache1cubetexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL2]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL2,"channelcache2cubetexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL3]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL3,
"channelcache3cubetexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_GLOSSYTEX,"intensitytexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_REFLECTIONTEX2]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_REFLECTIONTEX2,"reflectionplaneTex2"),this.ApplyTexToActiveUnit(TEXTURE_MAP_ADDITIONALTEX,"additionaltexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_AMBOCCTEX,"ambocctexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&"Parameterised"==this.textures[TEXTURE_MAP_AMBOCCTEX].type&&a.uniform3fv(this.shader.uniforms.amboccParamValue,
this.amboccParamValue),this.ApplyTexToActiveUnit(TEXTURE_MAP_TRANSMISSIONTEX,"metallictexture"),a.uniform3fv(this.shader.uniforms.exposure,this.scene._renderingGlowPass?this.glowbias:this.exposure),"undefined"!=typeof this.textures[TEXTURE_MAP_CCROUGHNESSTEX]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_CCROUGHNESSTEX,"clearcoatroughnessTex")):"Glass_Refracted"==this.type?(this.ApplyTexToActiveUnit(TEXTURE_MAP_BUMPTEX,"bumptexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARTEX,"speculartexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARENV,
"specularenv"),this.ApplyTexToActiveUnit(TEXTURE_MAP_DIFFUSETEX,"basetexture"),this.ApplyTexToActiveUnit(TEXTURE_MAP_TRANSMISSIONTEX,"transmissiontexture"),a.uniform3fv(this.shader.uniforms.exposure,this.scene._renderingGlowPass?this.glowbias:this.exposure)):"Modular"==this.type?(this.shader.setFloat2("rendersize",[this.scene.viewwidth,this.scene.viewheight]),infinityrt_SetModularUniforms(this.name,this._unis,this.shader,this.scene)):("undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_BUMPTEX,
"bumptexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_ALPHATEX,"alphatexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_DIFFUSETEX,"diffusetexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSEENV]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_DIFFUSEENV,"diffuseenv"),"undefined"!=typeof this.textures[TEXTURE_MAP_GLOSSYTEX]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_GLOSSYTEX,"glossytexture"),
"undefined"!=typeof this.textures[TEXTURE_MAP_PHYSICAL1]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_PHYSICAL1,"glossyenv"),"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARTEX,"speculartexture"),"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_SPECULARENV,"specularenv"),"undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_ADDITIONALTEX,"additionaltexture"),
"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&this.ApplyTexToActiveUnit(TEXTURE_MAP_AMBOCCTEX,"ambocctexture"));this.scene.curMat=this}};infinityrt_material.prototype.AddLightUniforms=function(){var a=this.scene;if(!a.fastMatch&&this.useCgLights&&0<a._lights.length)if(1<a._glVersionNum)this.shader.addBlock("BlockLights",a);else for(var b=0;b<a._lights.length&&8>b;b++)this.shader.addMatrix("ulights["+b+"]"),this.shader.addFloat("light_roughnessdelta["+b+"]")};
infinityrt_material.prototype.setLightUniforms=function(){var a=this.scene;if(!a.fastMatch&&this.useCgLights&&0<a._lights.length){var b=a.gl;if(1<a._glVersionNum){if(a.uniBlockLightsDirty){a.uniBlockLightsDirty=!1;b.bindBuffer(b.UNIFORM_BUFFER,a.buffBlockLights);for(var c=[],d=0;d<a._lights.length&&8>d;d++){var e=new Float32Array(a._lights[d].data);b.bufferSubData(b.UNIFORM_BUFFER,64*d,e);c.push(a._lights[d].roughdelta)}b.bufferSubData(b.UNIFORM_BUFFER,64*a._lights.length,new Float32Array(c));b.bindBuffer(b.UNIFORM_BUFFER,
null)}(c=this.shader.uniforms.BlockLights)&&b.bindBufferBase(b.UNIFORM_BUFFER,c,a.buffBlockLights)}else for(d=0;d<a._lights.length&&8>d;d++)this.shader.setMatrix("ulights["+d+"]",a._lights[d].data),this.shader.setFloat("light_roughnessdelta["+d+"]",a._lights[d].roughdelta)}};
infinityrt_material.prototype.ApplyPlanarReflectTex=function(){var a=null,b="texPlanarReflect";this.scene._renderingPlanarReflectPass&&(a=this.GetDummyTexture(TEXTURE_MAP_TOTALTYPES),b=a.name);var c=this.activeTexUnits[b];"undefined"==typeof c&&(this.nTexUnit++,c=this.activeTexUnits[b]=this.nTexUnit,this.nTexUnit++);b=this.scene.gl;this.scene._renderingPlanarReflectPass?a.use(b.TEXTURE0+c,TEXTURE_MAP_TOTALTYPES):(b.activeTexture(b.TEXTURE0+c),b.bindTexture(b.TEXTURE_2D,this.scene._fboPlanarReflect._nFBOTex));
this.shader.setInt("texPlanarReflect",c)};infinityrt_material.prototype.NeutralMaterial_ToneMapSettings=function(a){this.shader.setInt("ColCorrAndCamResp",a?0:this.ColCorrAndCamResp)};infinityrt_material.prototype.SetSecondaryMat=function(a){this.rendersecondary=a};
infinityrt_material.prototype.UpdateUniforms=function(){var a=this.scene.gl;this.shader.use(this.scene);if("Glass"==this.type)this.shader.setInt2("specularTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?this.textures[TEXTURE_MAP_SPECULARTEX]._coord:0]),this.shader.setInt2("baseTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?this.textures[TEXTURE_MAP_DIFFUSETEX]._coord:
0]),this.shader.setInt2("bumpTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?this.textures[TEXTURE_MAP_BUMPTEX]._coord:0]),"undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]&&(this.shader.setMat3("bumpUVT",this.textures[TEXTURE_MAP_BUMPTEX]._uvTransform),this.shader.setFloat("bumpuserscale",this.bumpuserscale)),"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]&&this.shader.setMat3("specularUVT",this.textures[TEXTURE_MAP_SPECULARTEX]._uvTransform),
this.shader.setVector("specularcolor",this.specularcolor),this.shader.setFloat("degree_0_specular",this.degree_0_specular),this.shader.setFloat("degree_90_specular",this.degree_90_specular),this.shader.setFloat("brdf_curve",this.brdf_curve),"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]&&this.shader.setMat3("baseUVT",this.textures[TEXTURE_MAP_DIFFUSETEX]._uvTransform),this.shader.setVector("basecolor",this.basecolor),0<this.scene._nPlanarReflectPassActive&&this.shader.setVector("planarreflectstrength",
this._colPlanarReflect);else if("Ambient"==this.type){if(1==this.scene._glVersionNum)if(this.shader.setInt2("diffuseTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?this.textures[TEXTURE_MAP_DIFFUSETEX]._coord:0]),this.shader.setInt2("alphaTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?this.textures[TEXTURE_MAP_ALPHATEX]._coord:0]),this.shader.setInt2("amboccTexData",
["undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?this.textures[TEXTURE_MAP_AMBOCCTEX]._coord:0]),"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]&&this.shader.setMat3("diffuseUVT",this.diffuseUVT),"undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]&&this.shader.setMat3("alphaUVT",this.alphaUVT),"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&this.shader.setMat3("amboccUVT",this.amboccUVT),this.shader.setInt("decalalpha",
this.decalalpha),this.shader.setFloat("alphacolor",this.alphacolor),this.shader.setFloat("ppexistencethreshold",this.ppexistencethreshold),this.shader.setVector("diffusecolor",this.diffusecolor),this.shader.setInt("ColCorrAndCamResp",this.ColCorrAndCamResp),this.shader.setVector4("diffuseInputCC",this._diffuseInputCC),this.shader.setInt("linearworkflow",this.scene.linearworkflow),this.shader.setInt("ppexistence",this.ppexistence),"undefined"!=typeof this.dynambocc){if(null==this.dynambocc.nodes)for(this.dynambocc.nodes=
[],a=0;a<this.dynambocc.names.length&&8>a;a++){var b=this.dynambocc.names[a];this.refEnv&&(b=this.refEnv+":"+b);this.dynambocc.nodes.push(this.scene.getInstanceByNameIncEnv(b))}this.shader.setInt2("dynAmbOcc",[this.dynambocc.names.length,this.dynambocc.inalpha]);for(a=0;a<this.dynambocc.names.length&&8>a;a++){var c=infinityrt_identity.slice(0);b=this.dynambocc.sizes[a];if(null!=this.dynambocc.nodes[a]){c[12]=this.dynambocc.offset[a][0];c[13]=this.dynambocc.offset[a][1];c[14]=this.dynambocc.offset[a][2];
var d=this.dynambocc.nodes[a].ltog_matrix.slice(0);var e=infinityrt_normalize([d[0],d[1],d[2]]);d[0]=e[0];d[1]=e[1];d[2]=e[2];e=infinityrt_normalize([d[4],d[5],d[6]]);d[4]=e[0];d[5]=e[1];d[6]=e[2];e=infinityrt_normalize([d[8],d[9],d[10]]);d[8]=e[0];d[9]=e[1];d[10]=e[2];c=MatrixMultiply(c,d);c[13]+=this.dynambocc.height;this.shader.setMatrix("matAmbOcc["+a+"]",MatrixInvert(c));d=this.dynambocc.nodes[a].ltog_matrix;this.shader.setVector("vecAmbOccSize["+a+"]",[infinityrt_length([d[0],d[1],d[2]])*b[0],
infinityrt_length([d[4],d[5],d[6]])*b[1],infinityrt_length([d[8],d[9],d[10]])*b[2]])}}this.shader.setFloat("dynAmbOccGamma",1/this.dynambocc.gamma)}else this.shader.setInt2("dynAmbOcc",[0,0]);else if(this.shader.setInt("ColCorrAndCamResp",this.ColCorrAndCamResp),"undefined"!=typeof this.dynambocc){if(null==this.dynambocc.nodes)for(this.dynambocc.nodes=[],a=0;a<this.dynambocc.names.length&&8>a;a++)b=this.dynambocc.names[a],this.refEnv&&(b=this.refEnv+":"+b),this.dynambocc.nodes.push(this.scene.getInstanceByNameIncEnv(b));
for(a=0;a<this.dynambocc.names.length&&8>a;a++)c=infinityrt_identity.slice(0),b=this.dynambocc.sizes[a],null!=this.dynambocc.nodes[a]&&(c[12]=this.dynambocc.offset[a][0],c[13]=this.dynambocc.offset[a][1],c[14]=this.dynambocc.offset[a][2],d=this.dynambocc.nodes[a].ltog_matrix.slice(0),e=infinityrt_normalize([d[0],d[1],d[2]]),d[0]=e[0],d[1]=e[1],d[2]=e[2],e=infinityrt_normalize([d[4],d[5],d[6]]),d[4]=e[0],d[5]=e[1],d[6]=e[2],e=infinityrt_normalize([d[8],d[9],d[10]]),d[8]=e[0],d[9]=e[1],d[10]=e[2],c=
MatrixMultiply(c,d),c[13]+=this.dynambocc.height,this.shader.setMatrix("matAmbOcc["+a+"]",MatrixInvert(c)),d=this.dynambocc.nodes[a].ltog_matrix,this.shader.setVector("vecAmbOccSize["+a+"]",[infinityrt_length([d[0],d[1],d[2]])*b[0],infinityrt_length([d[4],d[5],d[6]])*b[1],infinityrt_length([d[8],d[9],d[10]])*b[2]]))}0<this.scene._nPlanarReflectPassActive&&this.shader.setVector("planarreflectstrength",this._colPlanarReflect)}else"Match"==this.type?(1==this.scene._glVersionNum&&(a.uniform3fv(this.shader.uniforms.diffusecolor,
this.diffusecolor),a.uniform3fv(this.shader.uniforms.intensitycolor,this.glossycolor),a.uniform3fv(this.shader.uniforms.intensitybcolor,this.intensityBcolor),a.uniform3fv(this.shader.uniforms.specularcolor,this.specularcolor),a.uniform3fv(this.shader.uniforms.mapblurlevel,this.roughnessenvmaplevels),a.uniform3fv(this.shader.uniforms.additionalcolor,this.additionalcolor),a.uniform3fv(this.shader.uniforms.amboccBoost,this.ambOccBoost),a.uniform3fv(this.shader.uniforms.ior_R0,[this.ior_R0DG,this.ior_R0Intensity,
this.ior_R0Clear]),void 0!=this.textures[TEXTURE_MAP_DIFFUSETEX]&&this.shader.setMat3("diffuseUVT",this.diffuseUVT),void 0!=this.textures[TEXTURE_MAP_ROUGHNESSTEX]&&this.shader.setMat3("roughnessUVT",this.roughnessUVT),void 0!=this.textures[TEXTURE_MAP_GLOSSYTEX]&&this.shader.setMat3("intensityUVT",this.intensityUVT),void 0!=this.textures[TEXTURE_MAP_SPECULARTEX]&&this.shader.setMat3("specularUVT",this.specularUVT),void 0!=this.textures[TEXTURE_MAP_ALPHATEX]&&this.shader.setMat3("alphaUVT",this.alphaUVT),
void 0!=this.textures[TEXTURE_MAP_BUMPTEX]&&this.shader.setMat3("bumpUVT",this.bumpUVT),void 0!=this.textures[TEXTURE_MAP_ADDITIONALTEX]&&this.shader.setMat3("additionalUVT",this.additionalUVT),void 0!=this.textures[TEXTURE_MAP_AMBOCCTEX]&&this.shader.setMat3("amboccUVT",this.amboccUVT),this.shader.setFloat2("bumpflakesdata",this.bumpflakesdata),this.shader.setFloat("alphacolor",this.alphacolor),this.shader.setInt3("ior_R0Flip",[this.iorDiffuse_flip,this.iorIntensity_flip,this.iorClear_flip]),this.shader.setInt3("hasIOR",
[0!=this.ior_R0DG?1:0,0!=this.ior_R0Intensity?1:0,0!=this.ior_R0Clear?1:0]),this.shader.setInt2("diffuseTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?this.textures[TEXTURE_MAP_DIFFUSETEX]._coord:0]),this.shader.setInt2("roughnessTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_ROUGHNESSTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_ROUGHNESSTEX]?this.textures[TEXTURE_MAP_ROUGHNESSTEX]._coord:0]),this.shader.setInt2("intensityTexData",
["undefined"!=typeof this.textures[TEXTURE_MAP_GLOSSYTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_GLOSSYTEX]?this.textures[TEXTURE_MAP_GLOSSYTEX]._coord:0]),this.shader.setInt2("specularTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?this.textures[TEXTURE_MAP_SPECULARTEX]._coord:0]),this.shader.setInt2("additionalTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]?
this.textures[TEXTURE_MAP_ADDITIONALTEX]._coord:0]),this.shader.setInt2("alphaTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?this.textures[TEXTURE_MAP_ALPHATEX]._coord:0]),this.shader.setInt2("amboccTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?this.textures[TEXTURE_MAP_AMBOCCTEX]._coord:0]),this.shader.setInt2("bumpTexData",["undefined"!=
typeof this.textures[TEXTURE_MAP_BUMPTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?this.textures[TEXTURE_MAP_BUMPTEX]._coord:0]),this.shader.setInt("uhasDiffuseEnv","undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSEENV]&&this.usediffuseenv?1:0),this.shader.setInt("linearworkflow",this.scene.linearworkflow),this.shader.setInt("refractionmode",0),this.shader.setFloat("fadedReflectionsScale",this.scene.fadedReflectionsScale),this.shader.setFloat("fadedReflectionsOffset",this.scene.fadedReflectionsOffset),
this.shader.setFloat("fadedReflectionsPow",this.scene.fadedReflectionsPow),this.shader.setVector("fadedReflectionsColor",this.scene.fadedReflectionsColor),this.shader.setInt4("iflagsA",[this.simpleintensity,this.gammaDiffAddTexs,this.decalalpha,this.ppexistence]),this.shader.setInt4("iflagsB",[this.dualintensitycolor,this.sphericalwhirl,this.clearIgnoreBump,this.usebumpflakes]),this.shader.setVector4("fflagsA",[this.roughness,this.roughnessEdgeFac,this.invertreflectiony,this.brdf_curve]),this.shader.setVector4("fflagsB",
[this.envScale,this.dualintensityfalloff,this.scene.NormDerivThreshold,this.bumpuserscale])),"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&"Parameterised"==this.textures[TEXTURE_MAP_AMBOCCTEX].type&&a.uniform3fv(this.shader.uniforms.amboccParamValue,this.amboccParamValue),this.shader.setVector("camzv",infinityrt_normalize([this.scene.matView[8],this.scene.matView[9],this.scene.matView[10]])),this.setLightUniforms()):"Unlit"==this.type?1==this.scene._glVersionNum&&(a.uniform3fv(this.shader.uniforms.exposure,
this.scene._renderingGlowPass?this.glowbias:this.exposure),this.shader.setVector("additionalcolor",this.additionalcolor),this.shader.setFloat("alphacolor",this.alphacolor),this.shader.setInt2("additionalTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]?this.textures[TEXTURE_MAP_ADDITIONALTEX]._coord:0]),this.shader.setInt2("alphaTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?
this.textures[TEXTURE_MAP_ALPHATEX]._coord:0]),this.shader.setInt("linearworkflow",this.scene.linearworkflow),this.shader.setInt("decalalpha",this.decalalpha),this.shader.setInt("ppexistence",this.ppexistence),this.shader.setInt("gammaDiffAddTexs",this.gammaDiffAddTexs),this.shader.setFloat("fadedReflectionsScale",this.scene.fadedReflectionsScale),this.shader.setFloat("fadedReflectionsOffset",this.scene.fadedReflectionsOffset),this.shader.setFloat("fadedReflectionsPow",this.scene.fadedReflectionsPow),
this.shader.setVector("fadedReflectionsColor",this.scene.fadedReflectionsColor),"undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]&&this.shader.setMat3("alphaUVT",this.alphaUVT),"undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]&&this.shader.setMat3("additionalUVT",this.additionalUVT)):"Reflective"==this.type?(this.shader.setVector("diffusecolor",this.diffusecolor),this.shader.setVector("intensitycolor",this.glossycolor),this.shader.setVector("intensitybcolor",this.intensityBcolor),
this.shader.setVector("specularcolor",this.specularcolor),this.shader.setVector("mapblurlevel",this.roughnessenvmaplevels),this.shader.setVector("additionalcolor",this.additionalcolor),this.shader.setVector("ior_R0",[this.ior_R0DG,this.ior_R0Intensity,this.ior_R0Clear]),this.shader.setFloat("invertreflectiony",this.invertreflectiony),this.shader.setFloat("alphacolor",this.alphacolor),this.shader.setFloat("envScale",this.envScale),this.shader.setInt3("ior_R0Flip",[this.iorDiffuse_flip,this.iorIntensity_flip,
this.iorClear_flip]),this.shader.setInt3("hasIOR",[0!=this.ior_R0DG?1:0,0!=this.ior_R0Intensity?1:0,0!=this.ior_R0Clear?1:0]),this.shader.setFloat("roughness",0==this.specularworkflow?this.roughness*this.roughness:this.roughness),this.shader.setInt("decalalpha",this.decalalpha),this.shader.setInt("ppexistence",this.ppexistence),this.shader.setInt("dualintensitycolor",this.dualintensitycolor),this.shader.setFloat("dualintensityfalloff",this.dualintensityfalloff),this.shader.setFloat("roughnessEdgeFac",
this.roughnessEdgeFac),this.shader.setFloat("iorpower",this.brdf_curve),this.shader.setVector("exposure",this.exposure),this.shader.setVector("glowbias",this.glowbias),this.shader.setFloat("fadedReflectionsScale",this.scene.fadedReflectionsScale),this.shader.setFloat("fadedReflectionsOffset",this.scene.fadedReflectionsOffset),this.shader.setFloat("fadedReflectionsPow",this.scene.fadedReflectionsPow),this.shader.setVector("fadedReflectionsColor",this.scene.fadedReflectionsColor),this.setLightUniforms()):
"ARKit"==this.type?(this.shader.setInt("uhasDiffuseEnv","undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSEENV]?1:0),this.shader.setInt("uhasDiffuseTexture","undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?1:0),this.shader.setInt("uhasRoughnessTexture","undefined"!=typeof this.textures[TEXTURE_MAP_ROUGHNESSTEX]?1:0),this.shader.setInt("uhasIntensityTexture","undefined"!=typeof this.textures[TEXTURE_MAP_GLOSSYTEX]?1:0),this.shader.setInt("uhasSpecularTexture","undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?
1:0),this.shader.setInt("uhasAdditionalTexture","undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]?1:0),this.shader.setInt("uhasAlphaTexture","undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?1:0),this.shader.setInt2("amboccTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?this.textures[TEXTURE_MAP_AMBOCCTEX]._coord:0]),this.shader.setInt2("bumpTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?
1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?this.textures[TEXTURE_MAP_BUMPTEX]._coord:0]),this.shader.setInt("sphericalwhirl",this.sphericalwhirl),this.shader.setFloat("bumpuserscale",this.bumpuserscale),"undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]&&this.shader.setMat3("bumpUVT",this.bumpUVT),"undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]&&this.shader.setMat3("alphaUVT",this.alphaUVT),this.shader.setInt("decalalpha",this.decalalpha),this.shader.setFloat("alphacolor",
this.alphacolor),"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]&&this.shader.setMat3("diffuseUVT",this.diffuseUVT),"undefined"!=typeof this.textures[TEXTURE_MAP_ROUGHNESSTEX]&&this.shader.setMat3("roughnessUVT",this.roughnessUVT),"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]&&this.shader.setMat3("specularUVT",this.specularUVT),this.shader.setFloat("roughness",0==this.specularworkflow?this.roughness*this.roughness:this.roughness),this.shader.setVector("mapblurlevel",this.roughnessenvmaplevels),
this.shader.setVector("diffusecolor",this.diffusecolor),this.shader.setVector("intensitycolor",this.glossycolor),"undefined"!=typeof this.textures[TEXTURE_MAP_GLOSSYTEX]&&this.shader.setMat3("intensityUVT",this.intensityUVT),this.shader.setVector("specularcolor",this.specularcolor),this.shader.setInt("specularworkflow",this.specularworkflow),this.shader.setFloat("ior_R0DG",this.ior_R0DG),this.shader.setFloat("ior_R0Intensity",this.ior_R0Intensity),this.shader.setFloat("ior_R0Clear",this.ior_R0Clear),
this.shader.setInt("ior_R0DGFlip",this.iorDiffuse_flip),this.shader.setInt("ior_R0IntensityFlip",this.iorIntensity_flip),this.shader.setInt("ior_R0ClearFlip",this.iorClear_flip),this.shader.setFloat("invertreflectiony",this.invertreflectiony),"undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]&&this.shader.setMat3("additionalUVT",this.additionalUVT),"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&(this.shader.setMat3("amboccUVT",this.textures[TEXTURE_MAP_AMBOCCTEX]._uvTransform),
"Parameterised"==this.textures[TEXTURE_MAP_AMBOCCTEX].type&&this.shader.setVector("amboccParamValue",this.amboccParamValue)),this.shader.setVector("additionalcolor",this.additionalcolor),this.shader.setInt("refractionmode",0),this.shader.setInt("hasIORDG",0!=this.ior_R0DG?1:0),this.shader.setInt("hasIORIntensity",0!=this.ior_R0Intensity?1:0),this.shader.setInt("hasIORClear",0!=this.ior_R0Clear?1:0)):"PBR2"==this.type?(this.shader.setInt("uhasDiffuseEnv","undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSEENV]?
1:0),this.shader.setInt("uhasDiffuseTexture","undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?1:0),this.shader.setInt("uhasRoughnessTexture","undefined"!=typeof this.textures[TEXTURE_MAP_ROUGHNESSTEX]?1:0),this.shader.setInt("uhasIntensityTexture","undefined"!=typeof this.textures[TEXTURE_MAP_GLOSSYTEX]?1:0),this.shader.setInt("uhasSpecularTexture","undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?1:0),this.shader.setInt("uhasAdditionalTexture","undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]?
1:0),this.shader.setInt("uhasAlphaTexture","undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]?1:0),this.shader.setInt2("amboccTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]?this.textures[TEXTURE_MAP_AMBOCCTEX]._coord:0]),this.shader.setInt2("bumpTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?this.textures[TEXTURE_MAP_BUMPTEX]._coord:0]),
this.shader.setFloat("bumpuserscale",this.bumpuserscale),"undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]&&this.shader.setMat3("bumpUVT",this.bumpUVT),this.shader.setInt("ShadingModel",this.shadingmodel),"undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]&&this.shader.setMat3("alphaUVT",this.alphaUVT),this.shader.setInt("decalalpha",this.decalalpha),this.shader.setFloat("alphacolor",this.alphacolor),"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]&&this.shader.setMat3("diffuseUVT",
this.diffuseUVT),"undefined"!=typeof this.textures[TEXTURE_MAP_ROUGHNESSTEX]&&this.shader.setMat3("roughnessUVT",this.roughnessUVT),"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]&&this.shader.setMat3("specularUVT",this.specularUVT),"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARENV]&&this.shader.setInt("specularenv"),this.shader.setFloat("roughness",0==this.specularworkflow?this.roughness*this.roughness:this.roughness),this.shader.setVector("mapblurlevel",this.roughnessenvmaplevels),
this.shader.setVector("diffusecolor",this.diffusecolor),this.shader.setVector("intensitycolor",this.glossycolor),"undefined"!=typeof this.textures[TEXTURE_MAP_GLOSSYTEX]&&this.shader.setMat3("intensityUVT",this.intensityUVT),this.shader.setVector("specularcolor",this.specularcolor),this.shader.setInt("specularworkflow",this.specularworkflow),this.shader.setFloat("invertreflectiony",this.invertreflectiony),"undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]&&this.shader.setMat3("additionalUVT",
this.additionalUVT),"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&(this.shader.setMat3("amboccUVT",this.textures[TEXTURE_MAP_AMBOCCTEX]._uvTransform),"Parameterised"==this.textures[TEXTURE_MAP_AMBOCCTEX].type&&this.shader.setVector("amboccParamValue",this.amboccParamValue)),this.shader.setVector("additionalcolor",this.additionalcolor),this.shader.setInt("refractionmode",0),this.shader.setInt("hasIORDG",0!=this.ior_R0DG?1:0),this.shader.setInt("hasIORIntensity",0!=this.ior_R0Intensity?
1:0),this.shader.setInt("hasIORClear",0!=this.ior_R0Clear?1:0),this.shader.addFloat("metallic",this.metallic),this.shader.addInt("uhasMetallicTexture","undefined"!=typeof this.textures[TEXTURE_MAP_TRANSMISSIONTEX]?1:0),"undefined"!=typeof this.textures[TEXTURE_MAP_TRANSMISSIONTEX]&&this.shader.setMat3("metallicUVT",this.textures[TEXTURE_MAP_TRANSMISSIONTEX]._uvTransform),this.shader.setFloat("ClearCoatRoughness",this.clearcoatroughness),"undefined"!=typeof this.textures[TEXTURE_MAP_CCROUGHNESSTEX]&&
this.shader.setMat3("clearcoatroughnessUVT","undefined"!=typeof this.textures[TEXTURE_MAP_CCROUGHNESSTEX]?this.textures[TEXTURE_MAP_CCROUGHNESSTEX]._uvTransform:[1,0,0,0,1,0,0,0,1])):"Glass_Refracted"==this.type?(this.shader.setInt("uhasSpecularTexture","undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]?1:0),this.shader.setInt("uhasBaseTexture","undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]?1:0),this.shader.setInt("uhasTransmissionTexture","undefined"!=typeof this.textures[TEXTURE_MAP_TRANSMISSIONTEX]?
1:0),this.shader.setInt2("bumpTexData",["undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?1:0,"undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]?this.textures[TEXTURE_MAP_BUMPTEX]._coord:0]),this.shader.setFloat("bumpuserscale",this.bumpuserscale),"undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]&&this.shader.setMat3("bumpUVT",this.textures[TEXTURE_MAP_BUMPTEX]._uvTransform),"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]&&this.shader.setMat3("specularUVT",this.textures[TEXTURE_MAP_SPECULARTEX]._uvTransform),
this.shader.setVector("specularcolor",this.specularcolor),this.shader.setFloat("ior_R0Intensity",this.ior_R0Intensity),this.shader.setFloat("ior_R0Clear",this.ior_R0Clear),this.shader.setInt("ior_R0IntensityFlip",this.iorIntensity_flip),this.shader.setInt("ior_R0ClearFlip",this.iorClear_flip),this.shader.setFloat("brdf_curve",this.brdf_curve),"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]&&this.shader.setMat3("baseUVT",this.textures[TEXTURE_MAP_DIFFUSETEX]._uvTransform),this.shader.setVector("basecolor",
this.basecolor),this.shader.setFloat("refractscale",this.refractscale),this.shader.setFloat("refractthinness",this.refractthinness),"undefined"!=typeof this.textures[TEXTURE_MAP_TRANSMISSIONTEX]&&this.shader.setMat3("transmissionUVT",this.textures[TEXTURE_MAP_TRANSMISSIONTEX]._uvTransform),this.shader.setVector("transmissioncolor",this.transmissioncolor),this.shader.setInt("hasIORIntensity",0!=this.ior_R0Intensity?1:0),this.shader.setInt("hasIORClear",0!=this.ior_R0Clear?1:0),0!=this._2ndref[0]&&
0!=this._2ndref[1]&&this.shader.setFloat2("v2ndRef",this._2ndref)):("undefined"!=typeof this.textures[TEXTURE_MAP_BUMPTEX]&&(this.shader.setMat3("bumpUVT",this.textures[TEXTURE_MAP_BUMPTEX]._uvTransform),this.shader.setFloat("bumpuserscale",this.bumpuserscale)),"undefined"!=typeof this.textures[TEXTURE_MAP_ALPHATEX]&&this.shader.setMat3("alphaUVT",this.textures[TEXTURE_MAP_ALPHATEX]._uvTransform),"undefined"!=typeof this.textures[TEXTURE_MAP_DIFFUSETEX]&&this.shader.setMat3("diffuseUVT",this.textures[TEXTURE_MAP_DIFFUSETEX]._uvTransform),
"undefined"!=typeof this.textures[TEXTURE_MAP_GLOSSYTEX]&&this.shader.setMat3("glossyUVT",this.textures[TEXTURE_MAP_GLOSSYTEX]._uvTransform),"undefined"!=typeof this.textures[TEXTURE_MAP_SPECULARTEX]&&this.shader.setMat3("specularUVT",this.textures[TEXTURE_MAP_SPECULARTEX]._uvTransform),"undefined"!=typeof this.textures[TEXTURE_MAP_ADDITIONALTEX]&&this.shader.setMat3("additionalUVT",this.textures[TEXTURE_MAP_ADDITIONALTEX]._uvTransform),"undefined"!=typeof this.textures[TEXTURE_MAP_AMBOCCTEX]&&this.shader.setMat3("amboccUVT",
this.textures[TEXTURE_MAP_AMBOCCTEX]._uvTransform),this.shader.setVector("additionalcolor",this.additionalcolor),this.shader.setVector("diffusecolor",this.diffusecolor),this.shader.setVector("glossycolor",this.glossycolor),this.shader.setVector("specularcolor",this.specularcolor),this.shader.setInt("fresnel",this.fresnel),this.shader.setFloat("degree_0_specular",this.degree_0_specular),this.shader.setFloat("degree_90_specular",this.degree_90_specular),this.shader.setFloat("brdf_curve",this.brdf_curve),
this.shader.setFloat("invertreflectiony",this.invertreflectiony),this.shader.setInt("refractionmode",0));if(1==this.scene._glVersionNum||"Match"!=this.type&&"Unlit"!=this.type)this.shader.setFloat("vignetting",this.scene.vignetting),this.shader.setFloat("highlightcompression",this.scene.highlightcompression),this.shader.setFloat("gamma",this.scene.gamma),"Match"==this.type?this.shader.setVector("cc_bri_con_sat",[this.scene._cc_brightness+this._cc_brightness,this.scene._cc_contrast*this._cc_contrast,
this.scene._cc_saturation*this._cc_saturation]):"Reflective"==this.type||"Unlit"==this.type?(this.shader.setFloat("cc_brightness",this.scene._cc_brightness+this._cc_brightness),this.shader.setFloat("cc_contrast",this.scene._cc_contrast*this._cc_contrast),this.shader.setFloat("cc_saturation",this.scene._cc_saturation*this._cc_saturation)):(this.shader.setFloat("cc_brightness",this.scene._cc_brightness),this.shader.setFloat("cc_contrast",this.scene._cc_contrast),this.shader.setFloat("cc_saturation",
this.scene._cc_saturation)),a=[],a[0]=this.scene._cc_tint[0]*this._cc_tint[0],a[1]=this.scene._cc_tint[1]*this._cc_tint[1],a[2]=this.scene._cc_tint[2]*this._cc_tint[2],this.shader.setVector("cc_tint",a),this.shader.setFloat("mipmapbias",this.mipmapbias),this.shader.setInt("uhasLUTTexture",0);this.shader.setInt("isSecondaryMat",this.rendersecondary?1:0);this.shader.setFloat("secondaryMatAlpha",this.secondaryalphacolor)};
infinityrt_material.prototype.CreateBlankTexture=function(a,b){var c=new infinityrt_texture("__rtblanktexture__","File","",this.scene);c.width=a;c.height=b;c._decoded=!0;a=document.createElement("canvas");a.width=c.width;a.height=c.height;a=a.getContext("2d").getImageData(0,0,c.width,c.height);for(b=0;b<c.height;b++)for(var d=b*c.width,e=0;e<c.width;e++){var f=4*(d+e);a.data[f]=0;a.data[f+1]=0;a.data[f+2]=0;a.data[f+3]=255}c._images.push(a);return c};
infinityrt_material.prototype.GetDummyTexture=function(a){var b=this.scene;a=a==TEXTURE_MAP_DIFFUSEENV||a==TEXTURE_MAP_SPECULARENV||a==TEXTURE_MAP_SPECULARBLURENV||a==TEXTURE_MAP_PHYSICAL1||a==TEXTURE_MAP_PHYSICAL2||a==TEXTURE_MAP_PHYSICAL3?"FileCube3x2":"File";for(var c=0;c<TEXTURE_MAP_TOTALTYPES;c++){var d=this.textures[c];if("undefined"!=typeof d&&d.type==a)return d}if(void 0!=b.texDummy[a])return b.texDummy[a];for(var e in b._Texture_ref)if(d=b._Texture_ref[e],d.loaded&&d.type==a)return b.texDummy[a]=
d;if("File3D"==a)return"undefined"==typeof b._TexDummy3D&&(e=b.gl,a=b._TexDummy3D=new infinityrt_texture("__rtblanktexture3d__","File3D","",b),a.width=a.height=1,a._decoded=a.loaded=!0,a.lvl=1,a._size=[1,1,1],b._Textures[a.tex_id]=e.createTexture(),e.bindTexture(e.TEXTURE_3D,b._Textures[a.tex_id]),e.texImage3D(e.TEXTURE_3D,0,e.RGBA,1,1,1,0,e.RGBA,e.UNSIGNED_BYTE,null),e.bindTexture(e.TEXTURE_3D,null)),b._TexDummy3D;"undefined"==typeof b._TexDummy&&(b._TexDummy=this.CreateBlankTexture(1,1));return b._TexDummy};
infinityrt_material.prototype.ApplyTexToActiveUnit=function(a,b){var c=this.textures[a];"undefined"==typeof c&&(c=this.GetDummyTexture(a));if(this.DynamicTextureUnits){var d=c.name;var e=this.activeTexUnits[d];"undefined"==typeof e&&(e=this.activeTexUnits[d]=this.nTexUnit,this.nTexUnit++)}else e=a,e>this.nTexUnit&&(this.nTexUnit=e);this.scene.activeTexMap&&(this.scene.activeTexMap[a]=c);c.use(this.scene.gl.TEXTURE0+e,a);this.shader.setInt(b,e)};
infinityrt_material.prototype.ApplyTexToStaticUnit=function(a){var b=this.textures[a],c="undefined"==typeof b;c&&(b=this.GetDummyTexture(a));a>this.nTexUnit&&(this.nTexUnit=a);if(this.scene.activeTexMap){if(b==this.scene.activeTexMap[a]||c&&this.scene.activeTexMap[a])return;this.scene.activeTexMap[a]=b}b.use(this.scene.gl.TEXTURE0+a,a)};
infinityrt_material.prototype.ParseTextureSlot=function(a,b,c){a.getElementsByTagName(b).length?this.setTextureByName(a.getElementsByTagName(b)[0].firstChild.nodeValue,c):this.textures[c]=void 0};infinityrt_material.prototype.ParseUVT=function(a,b){a.getElementsByTagName(b).length&&(this[b]=a.getElementsByTagName(b)[0].firstChild.nodeValue.split(" "),1<this.scene._glVersionNum&&(a=this[b],this[b+"_3x4"]=new Float32Array([a[0],a[1],a[2],0,a[3],a[4],a[5],0,a[6],a[7],a[8],0])))};
infinityrt_material.prototype.IsBlackColor=function(a){return 1E-5>a[0]&&1E-5>a[1]&&1E-5>a[2]};infinityrt_material.prototype.CheckEnvName=function(a,b,c){if(c&&2==c.type||3==c.type&&c.newHDRIName){if(b==TEXTURE_MAP_DIFFUSEENV)return c.newHDRIName+"_diffuse";if(b==TEXTURE_MAP_SPECULARENV)return c.newHDRIName+"_specular";b=a.indexOf("_gloss_");if(-1!=b)return c.newHDRIName+a.substring(b)}return a};
infinityrt_material.prototype.ParseMaterial=function(a,b,c){if(2==c.type||3==c.type)this.refEnv=c.ref;3==c.type&&(this.texprefix=this.refEnv+":");if("Standard"==this.type)a.getElementsByTagName("diffuseenv").length&&this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("diffuseenv")[0].firstChild.nodeValue,TEXTURE_MAP_DIFFUSEENV,c),TEXTURE_MAP_DIFFUSEENV),a.getElementsByTagName("diffusetexture").length&&this.setTextureByName(a.getElementsByTagName("diffusetexture")[0].firstChild.nodeValue,
TEXTURE_MAP_DIFFUSETEX),this.diffusecolor=a.getElementsByTagName("diffusecolour")[0].firstChild.nodeValue.split(","),this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("glossyenv")[0].firstChild.nodeValue,TEXTURE_MAP_PHYSICAL1,c),TEXTURE_MAP_PHYSICAL1),a.getElementsByTagName("glossytexture").length&&this.setTextureByName(a.getElementsByTagName("glossytexture")[0].firstChild.nodeValue,TEXTURE_MAP_GLOSSYTEX),this.glossycolor=a.getElementsByTagName("glossycolour")[0].firstChild.nodeValue.split(","),
this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("specularenv")[0].firstChild.nodeValue,TEXTURE_MAP_SPECULARENV,c),TEXTURE_MAP_SPECULARENV),a.getElementsByTagName("speculartexture").length&&this.setTextureByName(a.getElementsByTagName("speculartexture")[0].firstChild.nodeValue,TEXTURE_MAP_SPECULARTEX),this.specularcolor=a.getElementsByTagName("specularcolour")[0].firstChild.nodeValue.split(","),a.getElementsByTagName("degree_0_specular").length&&(this.fresnel=1,this.degree_0_specular=
parseFloat(a.getElementsByTagName("degree_0_specular")[0].firstChild.nodeValue),a.getElementsByTagName("degree_90_specular").length&&(this.degree_90_specular=parseFloat(a.getElementsByTagName("degree_90_specular")[0].firstChild.nodeValue)),a.getElementsByTagName("brdf_curve").length&&(this.brdf_curve=parseFloat(a.getElementsByTagName("brdf_curve")[0].firstChild.nodeValue))),a.getElementsByTagName("alphatexture").length&&this.setTextureByName(a.getElementsByTagName("alphatexture")[0].firstChild.nodeValue,
TEXTURE_MAP_ALPHATEX),a.getElementsByTagName("bumptexture").length&&(this.setTextureByName(a.getElementsByTagName("bumptexture")[0].firstChild.nodeValue,TEXTURE_MAP_BUMPTEX),this.bumpuserscale=parseFloat(a.getElementsByTagName("bumpuserscale")[0].firstChild.nodeValue)),this.invertreflectiony=parseFloat(a.getElementsByTagName("invertreflectiony")[0].firstChild.nodeValue),a.getElementsByTagName("additionaltexture").length&&this.setTextureByName(a.getElementsByTagName("additionaltexture")[0].firstChild.nodeValue,
TEXTURE_MAP_ADDITIONALTEX),a.getElementsByTagName("additionalcolour").length&&(this.additionalcolor=a.getElementsByTagName("additionalcolour")[0].firstChild.nodeValue.split(",")),a.getElementsByTagName("ambocctexture").length&&this.setTextureByName(a.getElementsByTagName("ambocctexture")[0].firstChild.nodeValue,TEXTURE_MAP_AMBOCCTEX);else if("Glass"==this.type)this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("specularenv")[0].firstChild.nodeValue,TEXTURE_MAP_SPECULARENV,c),TEXTURE_MAP_SPECULARENV),
a.getElementsByTagName("speculartexture").length&&this.setTextureByName(a.getElementsByTagName("speculartexture")[0].firstChild.nodeValue,TEXTURE_MAP_SPECULARTEX),this.specularcolor=a.getElementsByTagName("specularcolour")[0].firstChild.nodeValue.split(","),a.getElementsByTagName("degree_0_specular").length&&(this.degree_0_specular=parseFloat(a.getElementsByTagName("degree_0_specular")[0].firstChild.nodeValue),a.getElementsByTagName("degree_90_specular").length&&(this.degree_90_specular=parseFloat(a.getElementsByTagName("degree_90_specular")[0].firstChild.nodeValue)),
a.getElementsByTagName("brdf_curve").length&&(this.brdf_curve=parseFloat(a.getElementsByTagName("brdf_curve")[0].firstChild.nodeValue))),a.getElementsByTagName("bumptexture").length&&(this.setTextureByName(a.getElementsByTagName("bumptexture")[0].firstChild.nodeValue,TEXTURE_MAP_BUMPTEX),this.bumpuserscale=parseFloat(a.getElementsByTagName("bumpuserscale")[0].firstChild.nodeValue)),a.getElementsByTagName("basetexture").length&&this.setTextureByName(a.getElementsByTagName("basetexture")[0].firstChild.nodeValue,
TEXTURE_MAP_DIFFUSETEX),this.basecolor=a.getElementsByTagName("basecolour")[0].firstChild.nodeValue.split(","),a.getElementsByTagName("exposure").length&&(this.exposure=a.getElementsByTagName("exposure")[0].firstChild.nodeValue.split(",")),a.getElementsByTagName("glowbias").length&&(this.glowbias=a.getElementsByTagName("glowbias")[0].firstChild.nodeValue.split(",")),a.getElementsByTagName("planarreflect").length&&(this._colPlanarReflect=a.getElementsByTagName("planarreflect")[0].firstChild.nodeValue.split(","));
else if("Ambient"==this.type)a.getElementsByTagName("diffusetexture").length&&this.setTextureByName(a.getElementsByTagName("diffusetexture")[0].firstChild.nodeValue,TEXTURE_MAP_DIFFUSETEX),this.ParseUVT(a,"diffuseUVT"),this.diffusecolor=a.getElementsByTagName("diffusecolour")[0].firstChild.nodeValue.split(","),a.getElementsByTagName("ambocctexture").length&&this.setTextureByName(a.getElementsByTagName("ambocctexture")[0].firstChild.nodeValue,TEXTURE_MAP_AMBOCCTEX),a.getElementsByTagName("ColCorrAndCamResp").length&&
(this.ColCorrAndCamResp=parseInt(a.getElementsByTagName("ColCorrAndCamResp")[0].firstChild.nodeValue)),a.getElementsByTagName("planarreflect").length&&(this._colPlanarReflect=a.getElementsByTagName("planarreflect")[0].firstChild.nodeValue.split(",")),a.getElementsByTagName("diffuseinputcc_brightness").length&&(this._diffuseInputCC[0]=parseFloat(a.getElementsByTagName("diffuseinputcc_brightness")[0].firstChild.nodeValue)),a.getElementsByTagName("diffuseinputcc_contrast").length&&(this._diffuseInputCC[1]=
parseFloat(a.getElementsByTagName("diffuseinputcc_contrast")[0].firstChild.nodeValue)),a.getElementsByTagName("diffuseinputcc_saturation").length&&(this._diffuseInputCC[2]=parseFloat(a.getElementsByTagName("diffuseinputcc_saturation")[0].firstChild.nodeValue)),a.getElementsByTagName("diffuseinputcc_gamma").length&&(this._diffuseInputCC[3]=parseFloat(a.getElementsByTagName("diffuseinputcc_gamma")[0].firstChild.nodeValue)),this.ParseTextureSlot(a,"alphatexture",TEXTURE_MAP_ALPHATEX),this.ParseUVT(a,
"alphaUVT"),a.getElementsByTagName("alphacolor").length&&(this.alphacolor=parseFloat(a.getElementsByTagName("alphacolor")[0].firstChild.nodeValue)),a.getElementsByTagName("decalalpha").length&&(this.decalalpha=parseInt(a.getElementsByTagName("decalalpha")[0].firstChild.nodeValue)),a.getElementsByTagName("ppexistence").length&&(this.ppexistence=parseInt(a.getElementsByTagName("ppexistence")[0].firstChild.nodeValue)),a.getElementsByTagName("ppexistencethreshold").length&&(this.ppexistencethreshold=
parseFloat(a.getElementsByTagName("ppexistencethreshold")[0].firstChild.nodeValue)),a.getElementsByTagName("dynambocc_names").length&&a.getElementsByTagName("dynambocc_names")[0].firstChild&&(this.dynambocc={names:a.getElementsByTagName("dynambocc_names")[0].firstChild.nodeValue.split(","),nodes:null,height:0,gamma:1,inalpha:0},a.getElementsByTagName("dynambocc_height").length&&(this.dynambocc.height=parseFloat(a.getElementsByTagName("dynambocc_height")[0].firstChild.nodeValue)),a.getElementsByTagName("dynambocc_gamma").length&&
(this.dynambocc.gamma=parseFloat(a.getElementsByTagName("dynambocc_gamma")[0].firstChild.nodeValue)),a.getElementsByTagName("dynambocc_offset").length&&(this.dynambocc.offset=eval(a.getElementsByTagName("dynambocc_offset")[0].firstChild.nodeValue)),a.getElementsByTagName("dynambocc_sizes").length&&(this.dynambocc.sizes=eval(a.getElementsByTagName("dynambocc_sizes")[0].firstChild.nodeValue)),a.getElementsByTagName("dynambocc_inalpha").length&&(this.dynambocc.inalpha=eval(a.getElementsByTagName("dynambocc_inalpha")[0].firstChild.nodeValue)));
else if("Match"==this.type){var d=!0,e=!0;a.getElementsByTagName("useCgLights").length&&(this.useCgLights=parseInt(a.getElementsByTagName("useCgLights")[0].firstChild.nodeValue));a.getElementsByTagName("envScale").length&&(this.envScale=parseFloat(a.getElementsByTagName("envScale")[0].firstChild.nodeValue));this.diffusecolor=a.getElementsByTagName("diffusecolour")[0].firstChild.nodeValue.split(",");a.getElementsByTagName("usediffuseenv").length&&(this.usediffuseenv=parseInt(a.getElementsByTagName("usediffuseenv")[0].firstChild.nodeValue),
(8<this.scene.MaxTextureUnits&&("undefined"!=typeof this.scene.extOESSD||1<this.scene._glVersionNum)||!this.IsBlackColor(this.diffusecolor))&&this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("diffuseenv")[0].firstChild.nodeValue,TEXTURE_MAP_DIFFUSEENV,c),TEXTURE_MAP_DIFFUSEENV));this.ParseTextureSlot(a,"diffusetexture",TEXTURE_MAP_DIFFUSETEX);this.ParseUVT(a,"diffuseUVT");this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("physical1")[0].firstChild.nodeValue,TEXTURE_MAP_PHYSICAL1,
c),TEXTURE_MAP_PHYSICAL1);this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("physical2")[0].firstChild.nodeValue,TEXTURE_MAP_PHYSICAL2,c),TEXTURE_MAP_PHYSICAL2);this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("physical3")[0].firstChild.nodeValue,TEXTURE_MAP_PHYSICAL3,c),TEXTURE_MAP_PHYSICAL3);this.ParseTextureSlot(a,"roughnesstexture",TEXTURE_MAP_ROUGHNESSTEX);this.ParseUVT(a,"roughnessUVT");this.glossycolor=a.getElementsByTagName("intensitycolor")[0].firstChild.nodeValue.split(",");
this.ParseTextureSlot(a,"intensitytexture",TEXTURE_MAP_GLOSSYTEX);this.ParseUVT(a,"intensityUVT");this.roughness=parseFloat(a.getElementsByTagName("roughness")[0].firstChild.nodeValue);a.getElementsByTagName("roughnessEdgeFac").length&&(this.roughnessEdgeFac=parseFloat(a.getElementsByTagName("roughnessEdgeFac")[0].firstChild.nodeValue));this.roughnessenvmaplevels=a.getElementsByTagName("roughnessenvmaplevels")[0].firstChild.nodeValue.split(",");this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("specularenv")[0].firstChild.nodeValue,
TEXTURE_MAP_SPECULARENV,c),TEXTURE_MAP_SPECULARENV);b=this.CheckEnvName(a.getElementsByTagName("physical3")[0].firstChild.nodeValue,TEXTURE_MAP_SPECULARBLURENV,c);b=b.replace(b.slice(b.lastIndexOf(".")),this.scene.specularBlurLevel);this.setTextureByName(b,TEXTURE_MAP_SPECULARBLURENV);this.ParseTextureSlot(a,"speculartexture",TEXTURE_MAP_SPECULARTEX);this.ParseUVT(a,"specularUVT");this.specularcolor=a.getElementsByTagName("specularcolour")[0].firstChild.nodeValue.split(",");a.getElementsByTagName("clearignorebump").length&&
(this.clearIgnoreBump=parseInt(a.getElementsByTagName("clearignorebump")[0].firstChild.nodeValue));a.getElementsByTagName("ior_R0DG").length&&(this.ior_R0DG=parseFloat(a.getElementsByTagName("ior_R0DG")[0].firstChild.nodeValue));a.getElementsByTagName("ior_R0Intensity").length&&(this.ior_R0Intensity=parseFloat(a.getElementsByTagName("ior_R0Intensity")[0].firstChild.nodeValue));a.getElementsByTagName("ior_R0Clear").length&&(this.ior_R0Clear=parseFloat(a.getElementsByTagName("ior_R0Clear")[0].firstChild.nodeValue));
a.getElementsByTagName("iorDiffuse_flip").length&&(this.iorDiffuse_flip=parseInt(a.getElementsByTagName("iorDiffuse_flip")[0].firstChild.nodeValue));a.getElementsByTagName("iorIntensity_flip").length&&(this.iorIntensity_flip=parseInt(a.getElementsByTagName("iorIntensity_flip")[0].firstChild.nodeValue));a.getElementsByTagName("iorClear_flip").length&&(this.iorClear_flip=parseInt(a.getElementsByTagName("iorClear_flip")[0].firstChild.nodeValue));a.getElementsByTagName("brdf_curve").length&&(this.brdf_curve=
parseFloat(a.getElementsByTagName("brdf_curve")[0].firstChild.nodeValue));this.ParseTextureSlot(a,"alphatexture",TEXTURE_MAP_ALPHATEX);this.ParseUVT(a,"alphaUVT");a.getElementsByTagName("alphacolor").length&&(this.alphacolor=parseFloat(a.getElementsByTagName("alphacolor")[0].firstChild.nodeValue));a.getElementsByTagName("decalalpha").length&&(this.decalalpha=parseInt(a.getElementsByTagName("decalalpha")[0].firstChild.nodeValue));a.getElementsByTagName("ppexistence").length&&(this.ppexistence=parseInt(a.getElementsByTagName("ppexistence")[0].firstChild.nodeValue));
a.getElementsByTagName("sphericalwhirl").length?(this.sphericalwhirl=1,this.bumpuserscale=parseFloat(a.getElementsByTagName("bumpuserscale")[0].firstChild.nodeValue)):(this.ParseTextureSlot(a,"bumptexture",TEXTURE_MAP_BUMPTEX),this.ParseUVT(a,"bumpUVT"),a.getElementsByTagName("bumpuserscale").length&&(this.bumpuserscale=parseFloat(a.getElementsByTagName("bumpuserscale")[0].firstChild.nodeValue)));this.invertreflectiony=parseFloat(a.getElementsByTagName("invertreflectiony")[0].firstChild.nodeValue);
a.getElementsByTagName("reflectionplanetexture").length&&(this.setTextureByName(a.getElementsByTagName("reflectionplanetexture")[0].firstChild.nodeValue,TEXTURE_MAP_REFLECTIONTEX),this.reflectionplanescale=parseFloat(a.getElementsByTagName("reflectionplanescale")[0].firstChild.nodeValue),a.getElementsByTagName("reflectionplanealternativemix").length&&(this.reflectionplanealternativemix=parseInt(a.getElementsByTagName("reflectionplanealternativemix")[0].firstChild.nodeValue)),a.getElementsByTagName("reflectionplanescalealpha").length&&
(this.reflectionplanescalealpha=parseInt(a.getElementsByTagName("reflectionplanescalealpha")[0].firstChild.nodeValue)),a.getElementsByTagName("reflectionplanescalespecular").length&&(this.reflectionplanescalespecular=parseFloat(a.getElementsByTagName("reflectionplanescalespecular")[0].firstChild.nodeValue)),a.getElementsByTagName("reflectionplaneroughness").length&&(this.reflectionplaneroughness=parseFloat(a.getElementsByTagName("reflectionplaneroughness")[0].firstChild.nodeValue)),e=d=!1);if(a.getElementsByTagName("reflectionplane").length)for(e=
d=!1,b=a.getElementsByTagName("reflectionplane")[0].firstChild.nodeValue,this._rpInstName=b.split(","),this.numreflectionplanes=16>this._rpInstName.length?this._rpInstName.length:16,b=0;b<this.numreflectionplanes;b++){var f=this._rpInstName[b].split("|");this._rpInstTexId[b]=1<f.length?parseInt(f[1]):0;this._rpInstName[b]=this.ParseInstanceName(f[0],c)}this.ParseTextureSlot(a,"reflectionplanetexture2",TEXTURE_MAP_REFLECTIONTEX2);a.getElementsByTagName("reflectionplanedynamicinfluence").length&&(this.reflectionplanedynamicinfluence=
a.getElementsByTagName("reflectionplanedynamicinfluence")[0].childNodes[0].nodeValue.split(" "));a.getElementsByTagName("usespecularroughnessenvmap").length&&(this.usespecularroughnessenvmap="0"!=a.getElementsByTagName("usespecularroughnessenvmap")[0].firstChild.nodeValue);this.ParseTextureSlot(a,"additionaltexture",TEXTURE_MAP_ADDITIONALTEX);this.ParseUVT(a,"additionalUVT");a.getElementsByTagName("additionalcolour").length&&(this.additionalcolor=a.getElementsByTagName("additionalcolour")[0].firstChild.nodeValue.split(","));
this.ParseTextureSlot(a,"ambocctexture",TEXTURE_MAP_AMBOCCTEX);a.getElementsByTagName("amboccusevertcol").length&&(this.amboccusevertcol=parseInt(a.getElementsByTagName("amboccusevertcol")[0].firstChild.nodeValue));a.getElementsByTagName("amboccboost").length&&(this.ambOccBoost=a.getElementsByTagName("amboccboost")[0].firstChild.nodeValue.split(","));a.getElementsByTagName("exposure").length&&(this.exposure=a.getElementsByTagName("exposure")[0].firstChild.nodeValue.split(","));a.getElementsByTagName("glowbias").length&&
(this.glowbias=a.getElementsByTagName("glowbias")[0].firstChild.nodeValue.split(","));a.getElementsByTagName("gammaDiffAddTexs").length&&(this.gammaDiffAddTexs=parseInt(a.getElementsByTagName("gammaDiffAddTexs")[0].firstChild.nodeValue));a.getElementsByTagName("simpleintensity").length&&(this.simpleintensity=parseInt(a.getElementsByTagName("simpleintensity")[0].firstChild.nodeValue));a.getElementsByTagName("dualintensitycolor").length&&(this.dualintensitycolor=parseInt(a.getElementsByTagName("dualintensitycolor")[0].firstChild.nodeValue),
a.getElementsByTagName("intensityBcolor").length&&(this.intensityBcolor=a.getElementsByTagName("intensityBcolor")[0].firstChild.nodeValue.split(",")),a.getElementsByTagName("dualintensityfalloff").length&&(this.dualintensityfalloff=parseFloat(a.getElementsByTagName("dualintensityfalloff")[0].firstChild.nodeValue)));a.getElementsByTagName("usebumpflakes").length&&(this.usebumpflakes=parseInt(a.getElementsByTagName("usebumpflakes")[0].firstChild.nodeValue),a.getElementsByTagName("bumpflakessize").length&&
(this.bumpflakesdata[0]=parseFloat(a.getElementsByTagName("bumpflakessize")[0].firstChild.nodeValue.split(","))),a.getElementsByTagName("bumpflakesintensity").length&&(this.bumpflakesdata[1]=parseFloat(a.getElementsByTagName("bumpflakesintensity")[0].firstChild.nodeValue)));a.getElementsByTagName("cc_tint").length&&(this._cc_tint=a.getElementsByTagName("cc_tint")[0].firstChild.nodeValue.split(","));a.getElementsByTagName("cc_brightness").length&&(this._cc_brightness=parseFloat(a.getElementsByTagName("cc_brightness")[0].firstChild.nodeValue));
a.getElementsByTagName("cc_contrast").length&&(this._cc_contrast=parseFloat(a.getElementsByTagName("cc_contrast")[0].firstChild.nodeValue));a.getElementsByTagName("cc_saturation").length&&(this._cc_saturation=parseFloat(a.getElementsByTagName("cc_saturation")[0].firstChild.nodeValue));if(void 0!=this.textures[TEXTURE_MAP_DIFFUSETEX]||void 0!=this.textures[TEXTURE_MAP_ROUGHNESSTEX]||void 0!=this.textures[TEXTURE_MAP_GLOSSYTEX]||void 0!=this.textures[TEXTURE_MAP_SPECULARTEX]||void 0!=this.textures[TEXTURE_MAP_REFLECTIONTEX]||
void 0!=this.textures[TEXTURE_MAP_REFLECTIONTEX2]||void 0!=this.textures[TEXTURE_MAP_AMBOCCTEX]||void 0!=this.textures[TEXTURE_MAP_BUMPTEX]||this.usebumpflakes)e=d=!1;if(void 0!=this.textures[TEXTURE_MAP_ALPHATEX]||void 0!=this.textures[TEXTURE_MAP_ADDITIONALTEX])d=!1;this.IsBlackColor(this.diffusecolor)&&this.IsBlackColor(this.specularcolor)&&this.IsBlackColor(this.glossycolor)||(e=!1);d&&(this.type="Reflective",e=!1,this.scene.debug&&console.log("Converting material to REFLECTIVE: ",this.name));
e&&(this.type="Unlit",this.scene.debug&&console.log("Converting material to UNLIT: ",this.name))}else if("Unlit"==this.type)a.getElementsByTagName("brdf_curve").length&&(this.brdf_curve=parseFloat(a.getElementsByTagName("brdf_curve")[0].firstChild.nodeValue)),this.ParseTextureSlot(a,"alphatexture",TEXTURE_MAP_ALPHATEX),this.ParseUVT(a,"alphaUVT"),a.getElementsByTagName("alphacolor").length&&(this.alphacolor=parseFloat(a.getElementsByTagName("alphacolor")[0].firstChild.nodeValue)),a.getElementsByTagName("decalalpha").length&&
(this.decalalpha=parseInt(a.getElementsByTagName("decalalpha")[0].firstChild.nodeValue)),a.getElementsByTagName("ppexistence").length&&(this.ppexistence=parseInt(a.getElementsByTagName("ppexistence")[0].firstChild.nodeValue)),this.ParseTextureSlot(a,"additionaltexture",TEXTURE_MAP_ADDITIONALTEX),this.ParseUVT(a,"additionalUVT"),a.getElementsByTagName("additionalcolour").length&&(this.additionalcolor=a.getElementsByTagName("additionalcolour")[0].firstChild.nodeValue.split(",")),a.getElementsByTagName("exposure").length&&
(this.exposure=a.getElementsByTagName("exposure")[0].firstChild.nodeValue.split(",")),a.getElementsByTagName("glowbias").length&&(this.glowbias=a.getElementsByTagName("glowbias")[0].firstChild.nodeValue.split(",")),a.getElementsByTagName("gammaDiffAddTexs").length&&(this.gammaDiffAddTexs=parseInt(a.getElementsByTagName("gammaDiffAddTexs")[0].firstChild.nodeValue)),a.getElementsByTagName("cc_tint").length&&(this._cc_tint=a.getElementsByTagName("cc_tint")[0].firstChild.nodeValue.split(",")),a.getElementsByTagName("cc_brightness").length&&
(this._cc_brightness=parseFloat(a.getElementsByTagName("cc_brightness")[0].firstChild.nodeValue)),a.getElementsByTagName("cc_contrast").length&&(this._cc_contrast=parseFloat(a.getElementsByTagName("cc_contrast")[0].firstChild.nodeValue)),a.getElementsByTagName("cc_saturation").length&&(this._cc_saturation=parseFloat(a.getElementsByTagName("cc_saturation")[0].firstChild.nodeValue));else if("Reflective"==this.type)a.getElementsByTagName("useCgLights").length&&(this.useCgLights=parseInt(a.getElementsByTagName("useCgLights")[0].firstChild.nodeValue)),
a.getElementsByTagName("envScale").length&&(this.envScale=parseFloat(a.getElementsByTagName("envScale")[0].firstChild.nodeValue)),this.diffusecolor=a.getElementsByTagName("diffusecolour")[0].firstChild.nodeValue.split(","),a.getElementsByTagName("usediffuseenv").length&&(this.usediffuseenv=parseInt(a.getElementsByTagName("usediffuseenv")[0].firstChild.nodeValue)),(8<this.scene.MaxTextureUnits&&("undefined"!=typeof this.scene.extOESSD||1<this.scene._glVersionNum)||!this.IsBlackColor(this.diffusecolor))&&
this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("diffuseenv")[0].firstChild.nodeValue,TEXTURE_MAP_DIFFUSEENV,c),TEXTURE_MAP_DIFFUSEENV),this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("physical1")[0].firstChild.nodeValue,TEXTURE_MAP_PHYSICAL1,c),TEXTURE_MAP_PHYSICAL1),this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("physical2")[0].firstChild.nodeValue,TEXTURE_MAP_PHYSICAL2,c),TEXTURE_MAP_PHYSICAL2),this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("physical3")[0].firstChild.nodeValue,
TEXTURE_MAP_PHYSICAL3,c),TEXTURE_MAP_PHYSICAL3),b=this.CheckEnvName(a.getElementsByTagName("physical3")[0].firstChild.nodeValue,TEXTURE_MAP_SPECULARBLURENV,c),b=b.replace(b.slice(b.lastIndexOf(".")),this.scene.specularBlurLevel),this.setTextureByName(b,TEXTURE_MAP_SPECULARBLURENV),this.glossycolor=a.getElementsByTagName("intensitycolor")[0].firstChild.nodeValue.split(","),this.roughness=parseFloat(a.getElementsByTagName("roughness")[0].firstChild.nodeValue),a.getElementsByTagName("roughnessEdgeFac").length&&
(this.roughnessEdgeFac=parseFloat(a.getElementsByTagName("roughnessEdgeFac")[0].firstChild.nodeValue)),this.roughnessenvmaplevels=a.getElementsByTagName("roughnessenvmaplevels")[0].firstChild.nodeValue.split(","),this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("specularenv")[0].firstChild.nodeValue,TEXTURE_MAP_SPECULARENV,c),TEXTURE_MAP_SPECULARENV),this.specularcolor=a.getElementsByTagName("specularcolour")[0].firstChild.nodeValue.split(","),a.getElementsByTagName("clearignorebump").length&&
(this.clearIgnoreBump=parseInt(a.getElementsByTagName("clearignorebump")[0].firstChild.nodeValue)),a.getElementsByTagName("ior_R0DG").length&&(this.ior_R0DG=parseFloat(a.getElementsByTagName("ior_R0DG")[0].firstChild.nodeValue)),a.getElementsByTagName("ior_R0Intensity").length&&(this.ior_R0Intensity=parseFloat(a.getElementsByTagName("ior_R0Intensity")[0].firstChild.nodeValue)),a.getElementsByTagName("ior_R0Clear").length&&(this.ior_R0Clear=parseFloat(a.getElementsByTagName("ior_R0Clear")[0].firstChild.nodeValue)),
a.getElementsByTagName("iorDiffuse_flip").length&&(this.iorDiffuse_flip=parseInt(a.getElementsByTagName("iorDiffuse_flip")[0].firstChild.nodeValue)),a.getElementsByTagName("iorIntensity_flip").length&&(this.iorIntensity_flip=parseInt(a.getElementsByTagName("iorIntensity_flip")[0].firstChild.nodeValue)),a.getElementsByTagName("iorClear_flip").length&&(this.iorClear_flip=parseInt(a.getElementsByTagName("iorClear_flip")[0].firstChild.nodeValue)),a.getElementsByTagName("brdf_curve").length&&(this.brdf_curve=
parseFloat(a.getElementsByTagName("brdf_curve")[0].firstChild.nodeValue)),a.getElementsByTagName("alphacolor").length&&(this.alphacolor=parseFloat(a.getElementsByTagName("alphacolor")[0].firstChild.nodeValue)),a.getElementsByTagName("decalalpha").length&&(this.decalalpha=parseInt(a.getElementsByTagName("decalalpha")[0].firstChild.nodeValue)),a.getElementsByTagName("ppexistence").length&&(this.ppexistence=parseInt(a.getElementsByTagName("ppexistence")[0].firstChild.nodeValue)),this.invertreflectiony=
parseFloat(a.getElementsByTagName("invertreflectiony")[0].firstChild.nodeValue),a.getElementsByTagName("usespecularroughnessenvmap").length&&(this.usespecularroughnessenvmap="0"!=a.getElementsByTagName("usespecularroughnessenvmap")[0].firstChild.nodeValue),a.getElementsByTagName("additionalcolour").length&&(this.additionalcolor=a.getElementsByTagName("additionalcolour")[0].firstChild.nodeValue.split(",")),a.getElementsByTagName("amboccboost").length&&(this.ambOccBoost=a.getElementsByTagName("amboccboost")[0].firstChild.nodeValue.split(",")),
a.getElementsByTagName("exposure").length&&(this.exposure=a.getElementsByTagName("exposure")[0].firstChild.nodeValue.split(",")),a.getElementsByTagName("glowbias").length&&(this.glowbias=a.getElementsByTagName("glowbias")[0].firstChild.nodeValue.split(",")),a.getElementsByTagName("gammaDiffAddTexs").length&&(this.gammaDiffAddTexs=parseInt(a.getElementsByTagName("gammaDiffAddTexs")[0].firstChild.nodeValue)),a.getElementsByTagName("simpleintensity").length&&(this.simpleintensity=parseInt(a.getElementsByTagName("simpleintensity")[0].firstChild.nodeValue)),
a.getElementsByTagName("dualintensitycolor").length&&(this.dualintensitycolor=parseInt(a.getElementsByTagName("dualintensitycolor")[0].firstChild.nodeValue),a.getElementsByTagName("intensityBcolor").length&&(this.intensityBcolor=a.getElementsByTagName("intensityBcolor")[0].firstChild.nodeValue.split(",")),a.getElementsByTagName("dualintensityfalloff").length&&(this.dualintensityfalloff=parseFloat(a.getElementsByTagName("dualintensityfalloff")[0].firstChild.nodeValue))),a.getElementsByTagName("usebumpflakes").length&&
(this.usebumpflakes=parseInt(a.getElementsByTagName("usebumpflakes")[0].firstChild.nodeValue),a.getElementsByTagName("bumpflakessize").length&&(this.bumpflakesdata[0]=parseFloat(a.getElementsByTagName("bumpflakessize")[0].firstChild.nodeValue.split(","))),a.getElementsByTagName("bumpflakesintensity").length&&(this.bumpflakesdata[1]=parseFloat(a.getElementsByTagName("bumpflakesintensity")[0].firstChild.nodeValue))),a.getElementsByTagName("cc_tint").length&&(this._cc_tint=a.getElementsByTagName("cc_tint")[0].firstChild.nodeValue.split(",")),
a.getElementsByTagName("cc_brightness").length&&(this._cc_brightness=parseFloat(a.getElementsByTagName("cc_brightness")[0].firstChild.nodeValue)),a.getElementsByTagName("cc_contrast").length&&(this._cc_contrast=parseFloat(a.getElementsByTagName("cc_contrast")[0].firstChild.nodeValue)),a.getElementsByTagName("cc_saturation").length&&(this._cc_saturation=parseFloat(a.getElementsByTagName("cc_saturation")[0].firstChild.nodeValue));else if("ARKit"==this.type){a.getElementsByTagName("diffuseenv").length&&
this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("diffuseenv")[0].firstChild.nodeValue,TEXTURE_MAP_DIFFUSEENV,c),TEXTURE_MAP_DIFFUSEENV);a.getElementsByTagName("diffusetexture").length&&this.setTextureByName(a.getElementsByTagName("diffusetexture")[0].firstChild.nodeValue,TEXTURE_MAP_DIFFUSETEX);this.diffusecolor=a.getElementsByTagName("diffusecolour")[0].firstChild.nodeValue.split(",");this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("physical1")[0].firstChild.nodeValue,
TEXTURE_MAP_PHYSICAL1,c),TEXTURE_MAP_PHYSICAL1);this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("physical2")[0].firstChild.nodeValue,TEXTURE_MAP_PHYSICAL2,c),TEXTURE_MAP_PHYSICAL2);this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("physical3")[0].firstChild.nodeValue,TEXTURE_MAP_PHYSICAL3,c),TEXTURE_MAP_PHYSICAL3);a.getElementsByTagName("roughnesstexture").length&&this.setTextureByName(a.getElementsByTagName("roughnesstexture")[0].firstChild.nodeValue,TEXTURE_MAP_ROUGHNESSTEX);
this.glossycolor=a.getElementsByTagName("intensitycolor")[0].firstChild.nodeValue.split(",");a.getElementsByTagName("intensitytexture").length&&this.setTextureByName(a.getElementsByTagName("intensitytexture")[0].firstChild.nodeValue,TEXTURE_MAP_GLOSSYTEX);this.roughness=parseFloat(a.getElementsByTagName("roughness")[0].firstChild.nodeValue);this.roughnessenvmaplevels=a.getElementsByTagName("roughnessenvmaplevels")[0].firstChild.nodeValue.split(",");this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("specularenv")[0].firstChild.nodeValue,
TEXTURE_MAP_SPECULARENV,c),TEXTURE_MAP_SPECULARENV);a.getElementsByTagName("speculartexture").length&&this.setTextureByName(a.getElementsByTagName("speculartexture")[0].firstChild.nodeValue,TEXTURE_MAP_SPECULARTEX);this.specularcolor=a.getElementsByTagName("specularcolour")[0].firstChild.nodeValue.split(",");a.getElementsByTagName("specularworkflow").length&&(this.specularworkflow=parseInt(a.getElementsByTagName("specularworkflow")[0].firstChild.nodeValue));a.getElementsByTagName("ior_R0DG").length&&
(this.ior_R0DG=parseFloat(a.getElementsByTagName("ior_R0DG")[0].firstChild.nodeValue),0==this.specularworkflow&&(b=(this.ior_R0DG-1)/(this.ior_R0DG+1),this.ior_R0DG=b*b));a.getElementsByTagName("ior_R0Intensity").length&&(this.ior_R0Intensity=parseFloat(a.getElementsByTagName("ior_R0Intensity")[0].firstChild.nodeValue),0==this.specularworkflow&&(b=(this.ior_R0Intensity-1)/(this.ior_R0Intensity+1),this.ior_R0Intensity=b*b));a.getElementsByTagName("ior_R0Clear").length&&(this.ior_R0Clear=parseFloat(a.getElementsByTagName("ior_R0Clear")[0].firstChild.nodeValue),
0==this.specularworkflow&&(b=(this.ior_R0Clear-1)/(this.ior_R0Clear+1),this.ior_R0Clear=b*b));a.getElementsByTagName("iorDiffuse_flip").length&&(this.iorDiffuse_flip=parseInt(a.getElementsByTagName("iorDiffuse_flip")[0].firstChild.nodeValue));a.getElementsByTagName("iorIntensity_flip").length&&(this.iorIntensity_flip=parseInt(a.getElementsByTagName("iorIntensity_flip")[0].firstChild.nodeValue));a.getElementsByTagName("iorClear_flip").length&&(this.iorClear_flip=parseInt(a.getElementsByTagName("iorClear_flip")[0].firstChild.nodeValue));
a.getElementsByTagName("alphatexture").length&&this.setTextureByName(a.getElementsByTagName("alphatexture")[0].firstChild.nodeValue,TEXTURE_MAP_ALPHATEX);a.getElementsByTagName("alphacolor").length&&(this.alphacolor=parseFloat(a.getElementsByTagName("alphacolor")[0].firstChild.nodeValue));a.getElementsByTagName("decalalpha").length&&(this.decalalpha=parseInt(a.getElementsByTagName("decalalpha")[0].firstChild.nodeValue));a.getElementsByTagName("sphericalwhirl").length?(this.sphericalwhirl=1,this.bumpuserscale=
parseFloat(a.getElementsByTagName("bumpuserscale")[0].firstChild.nodeValue)):a.getElementsByTagName("bumptexture").length&&(this.setTextureByName(a.getElementsByTagName("bumptexture")[0].firstChild.nodeValue,TEXTURE_MAP_BUMPTEX),this.bumpuserscale=parseFloat(a.getElementsByTagName("bumpuserscale")[0].firstChild.nodeValue));this.invertreflectiony=parseFloat(a.getElementsByTagName("invertreflectiony")[0].firstChild.nodeValue);a.getElementsByTagName("reflectionplanetexture").length&&(this.setTextureByName(a.getElementsByTagName("reflectionplanetexture")[0].firstChild.nodeValue,
TEXTURE_MAP_REFLECTIONTEX),this.reflectionplanescale=parseFloat(a.getElementsByTagName("reflectionplanescale")[0].firstChild.nodeValue));if(a.getElementsByTagName("reflectionplane").length)for(b=a.getElementsByTagName("reflectionplane")[0].firstChild.nodeValue,this._rpInstName=b.split(","),this.numreflectionplanes=16>this._rpInstName.length?this._rpInstName.length:16,b=0;b<this.numreflectionplanes;b++)f=this._rpInstName[b].split("|"),this._rpInstTexId[b]=1<f.length?parseInt(f[1]):0,this._rpInstName[b]=
this.ParseInstanceName(f[0],c);a.getElementsByTagName("reflectionplanetexture2").length&&this.setTextureByName(a.getElementsByTagName("reflectionplanetexture2")[0].firstChild.nodeValue,TEXTURE_MAP_REFLECTIONTEX2);a.getElementsByTagName("usespecularroughnessenvmap").length&&(this.usespecularroughnessenvmap="0"!=a.getElementsByTagName("usespecularroughnessenvmap")[0].firstChild.nodeValue);a.getElementsByTagName("additionaltexture").length&&this.setTextureByName(a.getElementsByTagName("additionaltexture")[0].firstChild.nodeValue,
TEXTURE_MAP_ADDITIONALTEX);a.getElementsByTagName("additionalcolour").length&&(this.additionalcolor=a.getElementsByTagName("additionalcolour")[0].firstChild.nodeValue.split(","));a.getElementsByTagName("ambocctexture").length&&this.setTextureByName(a.getElementsByTagName("ambocctexture")[0].firstChild.nodeValue,TEXTURE_MAP_AMBOCCTEX);a.getElementsByTagName("amboccusevertcol").length&&(this.amboccusevertcol=parseInt(a.getElementsByTagName("amboccusevertcol")[0].firstChild.nodeValue));a.getElementsByTagName("exposure").length&&
(this.exposure=a.getElementsByTagName("exposure")[0].firstChild.nodeValue.split(","));a.getElementsByTagName("glowbias").length&&(this.glowbias=a.getElementsByTagName("glowbias")[0].firstChild.nodeValue.split(","))}else if("PBR2"==this.type){this.DynamicTextureUnits=!0;this.shadingmodel=parseInt(a.getElementsByTagName("shadingmodel")[0].firstChild.nodeValue);a.getElementsByTagName("diffuseenv").length&&this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("diffuseenv")[0].firstChild.nodeValue,
TEXTURE_MAP_DIFFUSEENV,c),TEXTURE_MAP_DIFFUSEENV);a.getElementsByTagName("diffusetexture").length&&this.setTextureByName(a.getElementsByTagName("diffusetexture")[0].firstChild.nodeValue,TEXTURE_MAP_DIFFUSETEX);this.diffusecolor=a.getElementsByTagName("diffusecolour")[0].firstChild.nodeValue.split(",");this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("physical1")[0].firstChild.nodeValue,TEXTURE_MAP_PHYSICAL1,c),TEXTURE_MAP_PHYSICAL1);this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("physical2")[0].firstChild.nodeValue,
TEXTURE_MAP_PHYSICAL2,c),TEXTURE_MAP_PHYSICAL2);this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("physical3")[0].firstChild.nodeValue,TEXTURE_MAP_PHYSICAL3,c),TEXTURE_MAP_PHYSICAL3);a.getElementsByTagName("roughnesstexture").length&&this.setTextureByName(a.getElementsByTagName("roughnesstexture")[0].firstChild.nodeValue,TEXTURE_MAP_ROUGHNESSTEX);this.glossycolor=a.getElementsByTagName("intensitycolor")[0].firstChild.nodeValue.split(",");a.getElementsByTagName("intensitytexture").length&&
this.setTextureByName(a.getElementsByTagName("intensitytexture")[0].firstChild.nodeValue,TEXTURE_MAP_GLOSSYTEX);a.getElementsByTagName("metallic").length&&(this.metallic=parseFloat(a.getElementsByTagName("metallic")[0].firstChild.nodeValue));a.getElementsByTagName("metallictexture").length&&this.setTextureByName(a.getElementsByTagName("metallictexture")[0].firstChild.nodeValue,TEXTURE_MAP_TRANSMISSIONTEX);this.roughness=parseFloat(a.getElementsByTagName("roughness")[0].firstChild.nodeValue);this.roughnessenvmaplevels=
a.getElementsByTagName("roughnessenvmaplevels")[0].firstChild.nodeValue.split(",");this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("specularenv")[0].firstChild.nodeValue,TEXTURE_MAP_SPECULARENV,c),TEXTURE_MAP_SPECULARENV);a.getElementsByTagName("speculartexture").length&&this.setTextureByName(a.getElementsByTagName("speculartexture")[0].firstChild.nodeValue,TEXTURE_MAP_SPECULARTEX);this.specularcolor=a.getElementsByTagName("specularcolour")[0].firstChild.nodeValue.split(",");a.getElementsByTagName("specularworkflow").length&&
(this.specularworkflow=parseInt(a.getElementsByTagName("specularworkflow")[0].firstChild.nodeValue));a.getElementsByTagName("ior_R0DG").length&&(this.ior_R0DG=parseFloat(a.getElementsByTagName("ior_R0DG")[0].firstChild.nodeValue),0==this.specularworkflow&&(b=(this.ior_R0DG-1)/(this.ior_R0DG+1),this.ior_R0DG=b*b));a.getElementsByTagName("ior_R0Intensity").length&&(this.ior_R0Intensity=parseFloat(a.getElementsByTagName("ior_R0Intensity")[0].firstChild.nodeValue),0==this.specularworkflow&&(b=(this.ior_R0Intensity-
1)/(this.ior_R0Intensity+1),this.ior_R0Intensity=b*b));a.getElementsByTagName("ior_R0Clear").length&&(this.ior_R0Clear=parseFloat(a.getElementsByTagName("ior_R0Clear")[0].firstChild.nodeValue),0==this.specularworkflow&&(b=(this.ior_R0Clear-1)/(this.ior_R0Clear+1),this.ior_R0Clear=b*b));a.getElementsByTagName("iorDiffuse_flip").length&&(this.iorDiffuse_flip=parseInt(a.getElementsByTagName("iorDiffuse_flip")[0].firstChild.nodeValue));a.getElementsByTagName("iorIntensity_flip").length&&(this.iorIntensity_flip=
parseInt(a.getElementsByTagName("iorIntensity_flip")[0].firstChild.nodeValue));a.getElementsByTagName("iorClear_flip").length&&(this.iorClear_flip=parseInt(a.getElementsByTagName("iorClear_flip")[0].firstChild.nodeValue));a.getElementsByTagName("alphatexture").length&&this.setTextureByName(a.getElementsByTagName("alphatexture")[0].firstChild.nodeValue,TEXTURE_MAP_ALPHATEX);a.getElementsByTagName("alphacolor").length&&(this.alphacolor=parseFloat(a.getElementsByTagName("alphacolor")[0].firstChild.nodeValue));
a.getElementsByTagName("decalalpha").length&&(this.decalalpha=parseInt(a.getElementsByTagName("decalalpha")[0].firstChild.nodeValue));a.getElementsByTagName("sphericalwhirl").length?(this.sphericalwhirl=1,this.bumpuserscale=parseFloat(a.getElementsByTagName("bumpuserscale")[0].firstChild.nodeValue)):a.getElementsByTagName("bumptexture").length&&(this.setTextureByName(a.getElementsByTagName("bumptexture")[0].firstChild.nodeValue,TEXTURE_MAP_BUMPTEX),this.bumpuserscale=parseFloat(a.getElementsByTagName("bumpuserscale")[0].firstChild.nodeValue));
this.invertreflectiony=parseFloat(a.getElementsByTagName("invertreflectiony")[0].firstChild.nodeValue);a.getElementsByTagName("reflectionplanetexture").length&&(this.setTextureByName(a.getElementsByTagName("reflectionplanetexture")[0].firstChild.nodeValue,TEXTURE_MAP_REFLECTIONTEX),this.reflectionplanescale=parseFloat(a.getElementsByTagName("reflectionplanescale")[0].firstChild.nodeValue));if(a.getElementsByTagName("reflectionplane").length)for(b=a.getElementsByTagName("reflectionplane")[0].firstChild.nodeValue,
this._rpInstName=b.split(","),this.numreflectionplanes=16>this._rpInstName.length?this._rpInstName.length:16,b=0;b<this.numreflectionplanes;b++)f=this._rpInstName[b].split("|"),this._rpInstTexId[b]=1<f.length?parseInt(f[1]):0,this._rpInstName[b]=this.ParseInstanceName(f[0],c);a.getElementsByTagName("reflectionplanetexture2").length&&this.setTextureByName(a.getElementsByTagName("reflectionplanetexture2")[0].firstChild.nodeValue,TEXTURE_MAP_REFLECTIONTEX2);a.getElementsByTagName("usespecularroughnessenvmap").length&&
(this.usespecularroughnessenvmap="0"!=a.getElementsByTagName("usespecularroughnessenvmap")[0].firstChild.nodeValue);a.getElementsByTagName("additionaltexture").length&&this.setTextureByName(a.getElementsByTagName("additionaltexture")[0].firstChild.nodeValue,TEXTURE_MAP_ADDITIONALTEX);a.getElementsByTagName("additionalcolour").length&&(this.additionalcolor=a.getElementsByTagName("additionalcolour")[0].firstChild.nodeValue.split(","));a.getElementsByTagName("ambocctexture").length&&this.setTextureByName(a.getElementsByTagName("ambocctexture")[0].firstChild.nodeValue,
TEXTURE_MAP_AMBOCCTEX);a.getElementsByTagName("amboccusevertcol").length&&(this.amboccusevertcol=parseInt(a.getElementsByTagName("amboccusevertcol")[0].firstChild.nodeValue));a.getElementsByTagName("exposure").length&&(this.exposure=a.getElementsByTagName("exposure")[0].firstChild.nodeValue.split(","));a.getElementsByTagName("glowbias").length&&(this.glowbias=a.getElementsByTagName("glowbias")[0].firstChild.nodeValue.split(","));this.clearcoatroughness=parseFloat(a.getElementsByTagName("clearcoatroughness")[0].firstChild.nodeValue);
a.getElementsByTagName("clearcoatroughnesstexture").length&&this.setTextureByName(a.getElementsByTagName("clearcoatroughnesstexture")[0].firstChild.nodeValue,TEXTURE_MAP_CCROUGHNESSTEX)}else if("Glass_Refracted"==this.type)this.DynamicTextureUnits=!0,this.setTextureByName(this.CheckEnvName(a.getElementsByTagName("specularenv")[0].firstChild.nodeValue,TEXTURE_MAP_SPECULARENV,c),TEXTURE_MAP_SPECULARENV),a.getElementsByTagName("speculartexture").length&&this.setTextureByName(a.getElementsByTagName("speculartexture")[0].firstChild.nodeValue,
TEXTURE_MAP_SPECULARTEX),this.specularcolor=a.getElementsByTagName("specularcolour")[0].firstChild.nodeValue.split(","),a.getElementsByTagName("ior_R0Intensity").length&&(this.ior_R0Intensity=parseFloat(a.getElementsByTagName("ior_R0Intensity")[0].firstChild.nodeValue)),a.getElementsByTagName("ior_R0Clear").length&&(this.ior_R0Clear=parseFloat(a.getElementsByTagName("ior_R0Clear")[0].firstChild.nodeValue)),a.getElementsByTagName("iorIntensity_flip").length&&(this.iorIntensity_flip=parseInt(a.getElementsByTagName("iorIntensity_flip")[0].firstChild.nodeValue)),
a.getElementsByTagName("iorClear_flip").length&&(this.iorClear_flip=parseInt(a.getElementsByTagName("iorClear_flip")[0].firstChild.nodeValue)),a.getElementsByTagName("brdf_curve").length&&(this.brdf_curve=parseFloat(a.getElementsByTagName("brdf_curve")[0].firstChild.nodeValue)),a.getElementsByTagName("bumptexture").length&&(this.setTextureByName(a.getElementsByTagName("bumptexture")[0].firstChild.nodeValue,TEXTURE_MAP_BUMPTEX),this.bumpuserscale=parseFloat(a.getElementsByTagName("bumpuserscale")[0].firstChild.nodeValue)),
a.getElementsByTagName("basetexture").length&&this.setTextureByName(a.getElementsByTagName("basetexture")[0].firstChild.nodeValue,TEXTURE_MAP_DIFFUSETEX),this.basecolor=a.getElementsByTagName("basecolour")[0].firstChild.nodeValue.split(","),a.getElementsByTagName("refractscale").length&&(this.refractscale=parseFloat(a.getElementsByTagName("refractscale")[0].firstChild.nodeValue)),a.getElementsByTagName("refractthinness").length&&(this.refractthinness=parseFloat(a.getElementsByTagName("refractthinness")[0].firstChild.nodeValue)),
a.getElementsByTagName("transmissiontexture").length&&this.setTextureByName(a.getElementsByTagName("transmissiontexture")[0].firstChild.nodeValue,TEXTURE_MAP_TRANSMISSIONTEX),this.transmissioncolor=a.getElementsByTagName("transmissioncolour")[0].firstChild.nodeValue.split(","),a.getElementsByTagName("exposure").length&&(this.exposure=a.getElementsByTagName("exposure")[0].firstChild.nodeValue.split(",")),a.getElementsByTagName("glowbias").length&&(this.glowbias=a.getElementsByTagName("glowbias")[0].firstChild.nodeValue.split(",")),
a.getElementsByTagName("_2ndref").length&&(this._2ndref=a.getElementsByTagName("_2ndref")[0].firstChild.nodeValue.split(","));else if("Indirect"==this.type)this._strMaterialPtr=[a.getElementsByTagName("materialptr")[0].firstChild.nodeValue],a.getElementsByTagName("materialptr1").length&&this._strMaterialPtr.push(a.getElementsByTagName("materialptr1")[0].firstChild.nodeValue),a.getElementsByTagName("materialptrsel").length&&(this._MaterialPtrSel=parseInt(a.getElementsByTagName("materialptrsel")[0].firstChild.nodeValue));
else if("Modular"==this.type)for(a.getElementsByTagName("shader").length?this._optimisedshader=a.getElementsByTagName("shader")[0].firstChild.nodeValue:(this._fragheaderinsert=a.getElementsByTagName("fragheaderinsert")[0].firstChild.nodeValue,this._fraginsert=a.getElementsByTagName("fraginsert")[0].firstChild.nodeValue),this._fragsamplinginsert=2==this.scene._glVersionNum?"FragColor = RT_RootPixel();":"gl_FragColor = RT_RootPixel();",this._transparent="0"!=a.getElementsByTagName("transparent")[0].firstChild.nodeValue,
this._unis=[],b=a.getElementsByTagName("uniform"),c=0;c<b.length;c++)d=b[c],this._unis.push({name:d.getElementsByTagName("name")[0].firstChild.nodeValue,type:d.getElementsByTagName("type")[0].firstChild.nodeValue,val:d.getElementsByTagName("val")[0].firstChild.nodeValue});else console.log("Material "+this.name+" of Type "+this.type+" is not supported");a.getElementsByTagName("mipmapbias").length&&(this.mipmapbias=parseFloat(a.getElementsByTagName("mipmapbias")[0].firstChild.nodeValue));a.getElementsByTagName("hdribias").length&&
(this.hdribias=parseInt(a.getElementsByTagName("hdribias")[0].firstChild.nodeValue));a.getElementsByTagName("defer").length&&(this.defer=parseInt(a.getElementsByTagName("defer")[0].firstChild.nodeValue));a.getElementsByTagName("highlightcompression").length&&(this.scene.highlightcompression=parseFloat(a.getElementsByTagName("highlightcompression")[0].firstChild.nodeValue));a.getElementsByTagName("vignetting").length&&(this.scene.vignetting=parseFloat(a.getElementsByTagName("vignetting")[0].firstChild.nodeValue));
a.getElementsByTagName("gamma").length&&(this.scene.gamma=parseFloat(a.getElementsByTagName("gamma")[0].firstChild.nodeValue));a=a.getElementsByTagName("deriv");if(0<a.length)for(this.derivs={},b=this.textures[TEXTURE_MAP_SPECULARENV].name.substring(0,this.textures[TEXTURE_MAP_SPECULARENV].name.length-9).replace(/\./g,"_"),d=this.derivs.__base__=this.derivs[b]={},c=0;c<a.length;c++)for(e=a[c],f={numreflectionplanes:0,_rpInst:[]},b=0;b<e.childNodes.length;b++){var g=e.childNodes[b];if("env"==g.tagName)this.derivs[g.childNodes[0].nodeValue]=
f;else if("undefined"!=typeof g.tagName){var h="undefined"!=typeof g.attributes.t?g.attributes.t.value:"",k=this.PropNameMapping("undefined"!=typeof g.attributes.p?g.attributes.p.value:"");"t"==h?("undefined"==typeof f.textures&&(f.textures={}),"undefined"==typeof d.textures&&(d.textures={}),k=this.TextureNameMapping(k),-1!=k&&(g=g.childNodes[0].nodeValue,"undefined"!=typeof this.scene._Texture_ref[g]&&(f.textures[k]=this.scene._Texture_ref[g],d.textures[k]=this.textures[k]))):(f[k]=this.PropValueMapping(g.childNodes[0].nodeValue,
h),d[k]=this[k],"uvt"==h&&1<this.scene._glVersionNum&&(g=f[k],f[k+"_3x4"]=new Float32Array([g[0],g[1],g[2],0,g[3],g[4],g[5],0,g[6],g[7],g[8],0]),d[k+"_3x4"]=this[k+"_3x4"]),"reflectionplane"==k&&(this._rpInstName=[f[k]],f.numreflectionplanes=1,f._rpInst[0]=this.scene.getInstanceByNameIncEnv(this._rpInstName[0],this.scene)))}}};infinityrt_material.prototype.ParseInstanceName=function(a,b){return b.ref?b.ref+":"+a:a};
infinityrt_material.prototype.TextureNameMapping=function(a){if("physical1"==a)return TEXTURE_MAP_PHYSICAL1;if("physical2"==a)return TEXTURE_MAP_PHYSICAL2;if("physical3"==a)return TEXTURE_MAP_PHYSICAL3;if("bumptexture"==a)return TEXTURE_MAP_BUMPTEX;if("intensitytexture"==a)return TEXTURE_MAP_GLOSSYTEX;if("diffusetexture"==a)return TEXTURE_MAP_DIFFUSETEX;if("speculartexture"==a)return TEXTURE_MAP_SPECULARTEX;if("alphatexture"==a)return TEXTURE_MAP_ALPHATEX;if("roughnesstexture"==a)return TEXTURE_MAP_ROUGHNESSTEX;
if("additionaltexture"==a)return TEXTURE_MAP_ADDITIONALTEX;if("ambocctexture"==a)return TEXTURE_MAP_AMBOCCTEX;if("reflectionplanetexture"==a)return TEXTURE_MAP_REFLECTIONTEX;if("reflectionplanetexture2"==a)return TEXTURE_MAP_REFLECTIONTEX2;console.log("***ERROR: Unsupported texture deriv '"+a+"'");return-1};
infinityrt_material.prototype.PropNameMapping=function(a){var b={diffusecolour:"diffusecolor",intensitycolor:"glossycolor",specularcolour:"specularcolor",additionalcolour:"additionalcolor",amboccboost:"ambOccBoost",ior_R0Intensity:"ior_R0Intensity",reflectionplane:"reflectionplane",reflectionplanescale:"reflectionplanescale",reflectionplanealternativemix:"reflectionplanealternativemix",reflectionplanescalealpha:"reflectionplanescalealpha",reflectionplanescalespecular:"reflectionplanescalespecular",
reflectionplaneroughness:"reflectionplanerougness"};return"undefined"!=typeof b[a]?b[a]:a};infinityrt_material.prototype.PropValueMapping=function(a,b){return"uvt"==b?a.split(" "):"vf"==b?a.split(","):"f"==b?parseFloat(a):"i"==b?parseInt(a):a};infinityrt_material.prototype.ApplyDerivValues=function(a){for(var b in a)if("textures"==b)for(var c in a.textures)this.setTexture(a.textures[c],c);else this[b]=a[b]};
infinityrt_material.prototype.ApplyDeriv=function(a){var b=this.derivs.__base__;this.ApplyDerivValues(b);a=a.replace(/\./g,"_");b=this.derivs[a];"undefined"!=typeof b&&(this.ApplyDerivValues(b),1<=b.numreflectionplanes?this._rpInst[0]=this.scene.getInstanceByNameIncEnv(this._rpInstName[0],this.scene):b.numreflectionplanes=0,this._needsAttribsAndUniforms=!0);this.uniBlockAmbientDirty=this.uniBlockUnlitDirty=this.uniBlockDirty=!0};
infinityrt_material.prototype.SwapTexForEnv=function(a,b,c){(b=this.scene._Texture_ref[this.textures[a].name.replace(b,c)])&&this.setTexture(b,a)};infinityrt_material.prototype.SwapTexForEnvDeriv=function(a,b,c,d){void 0!=a.textures[b]&&(c=this.scene._Texture_ref[a.textures[b].name.replace(c,d)])&&(a.textures[b]=c)};
infinityrt_material.prototype.ChangeEnvmaps=function(a,b){if("Match"==this.type||"Reflective"==this.type){if(this.SwapTexForEnv(TEXTURE_MAP_SPECULARENV,a,b),void 0!=this.textures[TEXTURE_MAP_DIFFUSEENV]&&this.SwapTexForEnv(TEXTURE_MAP_DIFFUSEENV,a,b),void 0!=this.textures[TEXTURE_MAP_SPECULARBLURENV]&&this.SwapTexForEnv(TEXTURE_MAP_SPECULARBLURENV,a,b),this.SwapTexForEnv(TEXTURE_MAP_PHYSICAL1,a,b),this.SwapTexForEnv(TEXTURE_MAP_PHYSICAL2,a,b),this.SwapTexForEnv(TEXTURE_MAP_PHYSICAL3,a,b),"undefined"!=
typeof this.derivs)for(var c in this.derivs){var d=this.derivs[c];void 0!=d.textures&&(this.SwapTexForEnvDeriv(d,TEXTURE_MAP_PHYSICAL1,a,b),this.SwapTexForEnvDeriv(d,TEXTURE_MAP_PHYSICAL2,a,b),this.SwapTexForEnvDeriv(d,TEXTURE_MAP_PHYSICAL3,a,b))}}else"Glass"==this.type&&this.SwapTexForEnv(TEXTURE_MAP_SPECULARENV,a,b)};
infinityrt_material.prototype.getHDRIName=function(){return this.textures[TEXTURE_MAP_SPECULARENV]?this.textures[TEXTURE_MAP_SPECULARENV].name.substring(0,this.textures[TEXTURE_MAP_SPECULARENV].name.length-9):null};var g_strInfinityRTVersion="InfinityRT Version 2.0.547.0",infinityrt_codeprefix="";function loadJavaScriptFile(a,b){var c=document.getElementsByTagName("head")[0],d=document.createElement("script");d.type="text/javascript";d.src=a;null!==b&&(d.onload=b);c.appendChild(d)}
var decoderModule=null,dracoDecoderType={};function createDecoderModule(){try{decoderModule=DracoDecoderModule(dracoDecoderType)}catch(a){}}
function loadWebAssemblyDecoder(){dracoDecoderType.wasmBinaryFile="draco_decoder.wasm";var a=new XMLHttpRequest;a.open("GET",infinityrt_codeprefix+"draco_decoder.wasm",!0);a.responseType="arraybuffer";window.infinityrt_options&&!0===window.infinityrt_options.withCredentials&&(a.withCredentials=!0);a.onload=function(){dracoDecoderType.wasmBinary=a.response;createDecoderModule()};a.send(null)}
function loadDracoDecoder(){if("object"!==typeof WebAssembly)return null;decoderModule={};loadJavaScriptFile(infinityrt_codeprefix+"draco_wasm_wrapper.js",loadWebAssemblyDecoder)}
function infinityrt_webgl2avail(){if(-1!==navigator.userAgent.indexOf("MSIE")||0<navigator.appVersion.indexOf("Trident/"))return!1;/iPhone|iPad|iPod/i.test(navigator.userAgent);/iPhone|iPod/i.test(navigator.userAgent);var a=document.createElement("canvas");a.width=a.height=0;var b=a.getContext("webgl");a=GetUnmaskedRenderer(b);b=b.getParameter(b.MAX_FRAGMENT_UNIFORM_VECTORS);return!(-1!=a.indexOf("Adreno")&&512>b)}
function GetUnmaskedRenderer(a){var b="",c=a.getExtension("WEBGL_debug_renderer_info");c?b=a.getParameter(c.UNMASKED_RENDERER_WEBGL):a.RENDERER&&(b=a.getParameter(a.RENDERER));return b}
function infinityrt_getwebglcontext(a,b){var c=null,d=["webgl","experimental-webgl"];infinityrt_webgl2avail()&&d.unshift("webgl2");var e=/iPhone|iPad|iPod/i.test(navigator.userAgent),f=/iPhone|iPad|iPod|Android/i.test(navigator.userAgent),g="MacIntel"===navigator.platform&&1<navigator.maxTouchPoints,h=-1!==navigator.userAgent.indexOf("Macintosh")&&-1!==navigator.appVersion.indexOf("Safari/")&&-1!==navigator.appVersion.indexOf("Version/"),k=h;h&&(k=parseInt(navigator.userAgent.split("Version/")[1].split(".")[0]),
h=parseInt(navigator.userAgent.split("Version/")[1].split(".")[1]),k=15==k&&4<=h);for(h=0;h<d.length;h++){if(void 0==b)b=f||e||g||k?{antialias:!1,depth:!0}:{antialias:!0,depth:!0};else if(f||e||g||k)b.antialias=!1;if(c=a.getContext(d[h],b))break}return c}
var infinityrt_scene=function(a,b,c,d,e,f,g,h,k){var l=!0,m=!1,n=!1,p=null,q=null;this.bestPractice=[];this.shared=this.fnDraw0=this.uijson=null;this.activeGlow=this.loadProgressiveTextures=!0;this._fnOnInitialState=h?h:null;this._fnOnAllDecoded=k?k:null;this.manageTexs=null!==this._fnOnInitialState;this.forcewebp=null;this.ClearCoatEdgeAA=this.ComplexGlossyRead=1;this.hideHotspots=!0;this.xrOnly=this.avoidConditionalUniforms=this.fastMatch=!1;this.hasDeformation=0;this.debug=this.smartDeferral=!1;
this.smartDeferVisibilityArray=[];this.smartDeferTextures=[];this.pendingGroupStates={};this.blend=this.renderOrdered=this.logStates=this.WaitForAllGroupStates=!1;this.opaqueObjectsArrayOrdered=[];this._enableEnvMipmap=!1;this._enableRefPlaneMipmap=!0;this._lstSecondaryMatObjs=[];this._lstSecondaryMatQueue=[];this.matAnim=new infinityrt_matanim(this);this.matAnim.setReverseMode(!1);this._projectionOffset={x:0,y:0};this.sync;this.syncCircularArray=new CircularArray(2);this.frameNumber=0;this.isiOS=
this.fenceMode=!1;h=/iPhone|iPad|iPod/i.test(navigator.userAgent);k="MacIntel"===navigator.platform&&1<navigator.maxTouchPoints;this.isMACNoAA=this.isMAC=-1!==navigator.userAgent.indexOf("Macintosh")&&-1!==navigator.appVersion.indexOf("Safari/")&&-1!==navigator.appVersion.indexOf("Version/");this.curveMax=.015;this.curveMin=.0075;this.specularBlurLevel=".008";this.selfcheckText="";this.selfcheckCSV="Name ,Filename ,Format,Downloaded Filesize (Bytes),ResolutionX,ResolutionY,2nd Load\n";this._DoFTargetRangeObjects=
[];this._DoFTargetObject=null;if(this.isMAC){var t=parseInt(navigator.userAgent.split("Version/")[1].split(".")[0]),u=parseInt(navigator.userAgent.split("Version/")[1].split(".")[1]);this.isMACNoAA=15==t&&4<=u}if(h||k)this.isiOS=!0;this.isiOSNoAA=this.isiOS;this.FXAA=!1;"undefined"!=typeof a.rtgl||"undefined"!=typeof a.precache?(h=a.rtgl,"undefined"!=typeof a.useDraco&&(l=a.useDraco),"undefined"!=typeof a.forcewebp&&(this.forcewebp=a.forcewebp),"undefined"!=typeof a.requireRequestContentType&&(m=
a.requireRequestContentType),"undefined"!=typeof a.canvas&&(p=a.canvas),"undefined"!=typeof a.precache&&(n=a.precache)&&(p=document.createElement("canvas"),p.width=p.height=c=d=0,h=p.getContext("webgl")),"undefined"!=typeof a.uijson&&(this.uijson=a.uijson),"undefined"!=typeof a.loaderjson&&(q=a.loaderjson),"undefined"!=typeof a.onfirstdraw&&(this.fnDraw0=a.onfirstdraw),"undefined"!=typeof a.loadProgressiveTextures&&(this.loadProgressiveTextures=a.loadProgressiveTextures),"undefined"!=typeof a.shared&&
(this.shared=a.shared),"undefined"!=typeof a.activeGlow&&(this.activeGlow=a.activeGlow),"undefined"!=typeof a.manageTexs&&(this.manageTexs=a.manageTexs),"undefined"!=typeof a.complexGlossyRead&&(this.ComplexGlossyRead=a.complexGlossyRead),"undefined"!=typeof a.clearCoatEdgeAA&&(this.ClearCoatEdgeAA=a.clearCoatEdgeAA),"undefined"!=typeof a.hideHotspots&&(this.hideHotspots=a.hideHotspots),"undefined"!=typeof a.fastMatch&&(this.fastMatch=a.fastMatch),"undefined"!=typeof a.urlPostfix&&(this.urlPostfix=
a.urlPostfix),"undefined"!=typeof a.onfatalerror&&(this.fnFatalError=a.onfatalerror),"undefined"!=typeof a.avoidConditionalUniforms&&(this.avoidConditionalUniforms=a.avoidConditionalUniforms),"undefined"!=typeof a.xrOnly&&(this.xrOnly=a.xrOnly),"undefined"!=typeof a.hasDeformation&&(this.hasDeformation=a.hasDeformation?1:0),"undefined"!=typeof a.smartDeferral&&(this.smartDeferral=a.smartDeferral),"undefined"!=typeof a.debug&&(this.debug=a.debug),"undefined"!=typeof a.rtDoF&&(this.RTDoFQuick=this.RTDoF=
a.rtDoF?!0:!1),this.RTDoFQuick=!0):h=a;this.DetermineBrowser();this.DeterminePlatform();l&&!this.isIE&&loadDracoDecoder();this.canvas=p;null!=p&&(c=p.width,d=p.height);this.precache=n;var r=this.gl=h;this.enableFenceSync(!0);this.performSelfCheck();this.draw1=this.draw0=!0;this.inStateApply=this._started=this._projectparsed=this.xrframe=!1;this.prepareTexIncludesProcedurals=this._bAllowDirectRender=!0;this._usingwkwebview=void 0!==g?g:!1;this.requireRequestContentType=m;this.urlRoot=b;if(this.fnFatalError){var y=
this;r.canvas.addEventListener("webglcontextlost",function(x){y.fnFatalError("WebGLContextLost","")},!1)}this._inlineGPULoading=void 0!==f?f:-1;this.MaxTextureSize=r.getParameter(r.MAX_TEXTURE_SIZE);this.MaxTextureUnits=r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS);this.MaxFragUniVecs=r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS);this._glVersion=this.gl.getParameter(r.VERSION);this._glVersionNum=-1!=this._glVersion.indexOf("WebGL 2.")&&16<=this.MaxTextureUnits?2:1;1==this._glVersionNum&&(r.getExtension("OES_element_index_uint")||
console.log("***ERROR: Extension 'OES_element_index_uint' not available"),(this.extOESSD=r.getExtension("OES_standard_derivatives"))||console.log("***ERROR: Extension 'OES_standard_derivatives' not available"),this.extDepTex=r.getExtension("WEBGL_depth_texture"));this.extParallelCompile=r.getExtension("KHR_parallel_shader_compile");a=GetUnmaskedRenderer(this.gl);console.info(g_strInfinityRTVersion+" - "+this._glVersion+" {"+this._glVersionNum+"} - "+a);this.smartDeferral&&console.log("smartD enabled");
null!=this.extParallelCompile&&console.log("KHR_parallel_shader_compile - AVAILABLE");this.selfcheck&&1==this._glVersionNum&&infinityrt_webgl2avail()&&console.log("***Warning: RT is currently configured for WebGL1, however device is capable of WebGL2 (higher performance)");a=GetUnmaskedRenderer(r);this.fnFatalError&&-1!=a.indexOf("SwiftShader")&&this.fnFatalError("HardwareFailure",a);this.fpsstats?this.backoff=0:-1!=a.indexOf("NVIDIA")?this.backoff=5:this.backoff=40;this.isFirefox&&(this.backoff=
0);1<this._glVersionNum&&(this.msaaLvl=r.getParameter(r.MAX_SAMPLES));r.enable(r.DEPTH_TEST);r.depthFunc(r.LEQUAL);r.enable(r.CULL_FACE);r.cullFace(r.BACK);r.frontFace(r.CCW);r.blendFuncSeparate(r.SRC_ALPHA,r.ONE_MINUS_SRC_ALPHA,r.ZERO,r.ONE);r.viewport(0,0,c,d);this.verScene={major:0,minor:0,build:0};this.camPos=[0,0,0];this.tmFrame=now();this._backgroundColor=[0,0,0];this.setBackgroundTransparent(!1);this._mipmapenvmap=this._extrabrightenvmap=this._encodeenvmapsinmono=this.prepareTexId=0;this._totaljobs=
this._outstandingjobs=1;this._jitter=[];this._dofRequiresClear=this._animRequiresClear=this._prepared=!1;this._animActive=0;this._bAnimUseFrames=!1;this._nAnimFrameRate=24;this._bNoCompressedTexs=!1;this._cc_brightness=this.hasBrightReflections=0;this._cc_saturation=this._cc_contrast=1;this._cc_tint=[1,1,1];this.resetCounts();this._localfiles=void 0!==e?e:!1;this._bSupportsWebP=!1;this.autoDLAllDeferredGrps=!0;this.viewwidth=Math.floor(c);this.viewheight=Math.floor(d);this.ensureViewSizeIsValid();
this.fovy=this.fovyOriginal=30;this._zNearMin=.5;this._SceneScale=1;this._nav=null;this._jitx=[-.158,.474,.158,-.474,.288,.2726,-.3452,.0142,-.2662,.2856,.0474,-.1864,.269,-.4118,-.0242,.465,.1062,.1878,.4154,-.1586,-.1632,.167,-.3764,.1262,-.4848,-.2954,.0754,-.0934,.4202,.3356,-.0412,-.1342,-.143,.1898,-.0022,.317,.141,-.0678,-.247,-.2828,-.4078,-.255,.3836,.1706,.3054,-.3808,-.027,.0632,.1186,-.3512,-.2856,.2026,.3746,.0104,.1048,-.1902,-.405,-.4704,.2658,-.1878,.1958,.0788,-.1592];this._jity=
[.474,.158,-.474,-.158,.408,-.4032,-.349,.2998,.1178,.0962,-.2556,-.1684,-.1744,.2644,.4994,.1824,-.4816,.252,-.2752,.259,-.3416,-.0332,-.182,.423,.1166,-.0384,.148,.1172,.038,.2626,-.1398,.3972,-.0322,-.2896,-.3874,-.0382,-.1612,-.2716,-.4302,.2764,.0216,-.2644,-.166,.0866,-.279,.1624,.2072,-.0874,-.3736,.3542,-.1396,.3532,.1418,.398,.33,.0662,-.0896,-.1604,.1986,.171,-.4568,.052,-.4574];this._nRandomIdx=0;this._jitRadius=1.5;this._slowinoutfac=1;this._renderingPickPass=this._renderpickenabled=!1;
this._lstInstances=[];this._flipFoVonAspectSwap=!0;this._bOrderBasedTransparency=!1;this._fSharpenScale=0;this._bAccurateDoF=!1;this._nDoFMissMode=DOF_MISS_MODE_NOCHANGE;this._nDoFApertureMode=DOF_APERTURE_MODE_DISTANCE;this.customGetDoFDepth=null;this._fPlanarReflectDirX=this._fPlanarReflectDirY=0;this._nPlanarReflectMap=2;this._nPlanarReflectPassActive=0;this._renderingPlanarReflectPass=!1;this._lstSeparableBlurShaders=[];this._lights=[];this.texDummy={};this.eScale=0;this._ShaderCache={};this._activeapply=
!1;this.mipmapbiasEnv=-1;this.linearworkflow=0;this.renderEnvLayer=this.visibilityChanged=!1;this.geomgenfile=this.geomgen=0;this.uvch=1;this.rtexsAvail=[];this.maxFocusRate=999999.9;this.maxAllowedDoFDepth=999999;this.skipFocusRateChanges=1;this.instanceLookup={};this.clipPlanes=[];this.texDependencyTracking=!0;this.reqDoFDepthCalc=this.xrActive=this.visibilityRecurses=this.foundPlanarReflectMaterial=this.bspecjson=!1;this.nonProgressiveDeferredTex=null;this.arFBScale=.5;this.refRoots={};this.importcompletefunc=
{};this._vecCameraLimitMin=[-1E6,-1E6,-1E6];this._vecCameraLimitMax=[1E6,1E6,1E6];this._bbmax=[-1E6,-1E6,-1E6];this._bbmin=[1E6,1E6,1E6];this._AABBmax=[-1E6,-1E6,-1E6];this._AABBmin=[1E6,1E6,1E6];this._initialViewMatrix=infinityrt_identity.slice(0);this._initialNavMatrix=infinityrt_identity.slice(0);this._Textures=[];this._Texture_ref=[];this._Images=[];this._TextureObjs=[];this._Materials=[];this._Material_ref=[];this._lstNonDepthObjects=[];this._lstDeferredGrps=null;this._AllDeferredSent=!1;this.lstRefractionNodes=
[];this._lstPlanarReflectNodes=[];this.lstGlowNodes=[];this._prog_highpass=this._fboPlanarReflect=this._fboGlow=this.rttRefractRenderBuffer=this.rttRefractTexture=this.rttRefractFramebuffer=null;this._glow_strength=1.5;this._glow_power=1;this._glow_threshold=.85;this._glow_incbackground=!1;this._glow_applytobackground=!0;this._bDoF=!1;this._fboDoF=null;this._fDoFFocusWidth=.8;this._nDoFPixelScaling=1;this._posDoFLastCam=[0,0,0];this._fDoFFocusSphereDist=0;this._shader_prog_bokeh=this._shader_mesh_depth=
null;this._renderingDoFDepthValues=this._renderingDoFDepth=!1;this._fboUnscramble=this.fnPostDraw=this.fnPreDraw=null;this._bbminObjz=-1;this._bbmaxObjz=1;this._fastAnims=!0;this._backdroptexturename="";this._backdropvisiblerefract=0;this._GeomToLvl0=this._TextureToLvl0=null;this.compPlanarRefl=this.camresponse=0;this.NormDerivThreshold=.1;this.upvector=1;this._grps={};this._cfgs={};this.stateTracker=[];this.importQueue=[];this.activeImportrefs={};this.importbusy=!1;this.matrixDirty=this._hierarchyDirty=
!0;this._bNoAA=!1;this._rootEnv=null;this.vignetting=this.highlightcompression=0;this.gamma=2.2;this.meshq={requests:0,launchedthisframe:0,line:[]};this.curMat=this.drawFBO=null;this.uniBlockLightsDirty=!0;this.fadedReflectionsScale=-1;this.fadedReflectionsOffset=0;this.fadedReflectionsPow=1;this._fadedReflectionsActive=0;this.fadedReflectionsColor=[.98,.98,.98];this._AABBEnvironmentMapActive=0;this._renderingZPrePass=!1;this.zprepassoffsetfactor=this.zprepassoffset=1;this.zprepass=!0;this.TexFilterAnisotropicMax=
(this.extTextureFilterAnisotropic=r.getExtension("EXT_texture_filter_anisotropic")||r.getExtension("MOZ_EXT_texture_filter_anisotropic")||r.getExtension("WEBKIT_EXT_texture_filter_anisotropic"))?r.getParameter(this.extTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT):1;if(null!=this.canvas){var v=this;v._nav=new infinityrt_navigation(v,v.canvas.width,v.canvas.height);window.addEventListener("resize",function(){v.onResize()},!1);v.onResize()}this.compileRefinementShader(this.gl);if(null!=q){var w=
new XMLHttpRequest;w._scene=this;w.open("GET",this.BuildURL(q),!0);window.infinityrt_options&&!0===window.infinityrt_options.withCredentials&&(w.withCredentials=!0);w.onload=function(x){x=w._scene;x.loader=JSON.parse(w.response);x._backgroundColor=x.loader.background;x.fovy=x.loader.fovy;for(var B=0;B<x.loader.images.length;B++){var z=x.loader.images[B];z.img=new Image;(function(A){A.img.onload=function(){A.tex=r.createTexture();r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,!0);r.bindTexture(r.TEXTURE_2D,A.tex);
r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,A.img);r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE);r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE);r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.LINEAR)}})(z);z.img.src=x.BuildURL(x.loaderjsonpath+z.file)}x.LoadHierarchy()};w.onerror=function(){v.LoadHierarchy()};c=q.lastIndexOf("/");this.loaderjsonpath=-1!=c?q.substring(0,c+1):q;w.send("")}else this.LoadHierarchy();return this};
infinityrt_scene.prototype.BuildURL=function(a){a=a.startsWith("http")||a.startsWith("HTTP")?a:this.urlRoot+a;this.urlPostfix&&(a+=this.urlPostfix);"undefined"!==typeof versionInfo&&versionInfo.version&&versionInfo.queryString&&(a+=versionInfo.queryString+versionInfo.version);return a};infinityrt_scene.prototype.CheckContentEncoding=function(a){return a.getResponseHeader("Content-Encoding")};
infinityrt_scene.prototype.ProcessInitialMaterials=function(a){a._batchMaterialIdx=0;var b=a._InitialMaterials;a._InitialMaterials=[];for(var c in b)a._InitialMaterials.push(this._Materials[c]),this._outstandingjobs++;this._outstandingjobs++;var d=this,e=function(){for(;;){if(a._batchMaterialIdx>=a._InitialMaterials.length){d._outstandingjobs--;a._InitialMaterials=null;break}var f=a._InitialMaterials[a._batchMaterialIdx].CheckShaderCompilation();d._outstandingjobs--;a._batchMaterialIdx++;if(f){setTimeout(e,
0);break}}};setTimeout(e,0)};infinityrt_scene.prototype.WalkForInitialDeferStatus=function(a,b,c){var d=0!=a.visible&&b;"undefined"!=typeof a.mesh&&null!=a.mesh&&("undefined"==typeof c[a.mesh._meshURL]?c[a.mesh._meshURL]={mesh:a.mesh,visible:d}:c[a.mesh._meshURL].visible|=d);for(b=0;b<a.children.length;b++)this.WalkForInitialDeferStatus(a.children[b],d,c);if("undefined"!=typeof a.childrenNonDepth)for(b=0;b<a.childrenNonDepth.length;b++)this.WalkForInitialDeferStatus(a.childrenNonDepth[b],d,c)};
infinityrt_scene.prototype.ApplySmartDeferral=function(){var a=this,b=[];if(this._lstDeferredGrps&&this._lstDeferredGrps._auto_||this.smartDeferTextures.length){this.smartDeferVisibilityArray.length&&this.debug&&console.log("** smartDefer still busy.");for(var c in this._lstDeferredGrps._auto_.lstGeoms)if(this._lstDeferredGrps._auto_.lstGeoms[c].smartDefer&&-1==this.smartDeferVisibilityArray.findIndex(function(h){return h==a._lstDeferredGrps._auto_.lstGeoms[c]})){this._lstDeferredGrps._auto_.lstGeoms[c].visible=
0;this.smartDeferVisibilityArray.push(this._lstDeferredGrps._auto_.lstGeoms[c]);var d=this._lstDeferredGrps._auto_.lstGeoms[c].usematerial.split(",");d=parseInt(d[0].split("|")[1]);d=this._Materials[d];for(var e=0;e<d.textures.length;e++){var f=d.textures[e];!f||!f.defer||f.smartDefer||f.downloadStarted||f.loaded||-1!=this.smartDeferTextures.findIndex(function(h){return h==f})||(f.smartDefer=1,this.smartDeferTextures.push(f))}}for(var g=0;g<this.smartDeferTextures.length;g++)-1==this.smartDeferVisibilityArray.findIndex(function(h){return h==
a.smartDeferTextures[g]})&&this.smartDeferVisibilityArray.push(this.smartDeferTextures[g]);for(e=0;e<this.smartDeferVisibilityArray.length;e++)0<=this.smartDeferVisibilityArray[e].tex_id&&!this.smartDeferVisibilityArray[e].downloadStarted&&this.smartDeferVisibilityArray[e].startFileDownloads();for(c in this._lstDeferredGrps._auto_.lstGeoms)this._lstDeferredGrps._auto_.lstGeoms[c].smartDefer&&(this.MeshQueue(this._lstDeferredGrps._auto_.lstGeoms[c]),b.push(c));for(c=b.length-1;0<=c;c--)this._lstDeferredGrps._auto_.lstGeoms.splice(b[c],
1)}};
infinityrt_scene.prototype.AutoDeferTextures=function(){var a={},b={},c={};this.fillInstanceLookup();for(var d in this.instanceLookup){var e=this.instanceLookup[d];if(null!=e.mesh){for(var f=e.parent,g=e.visible;void 0!=f;){if(0==f.visible){g=0;break}f=f.parent}if(1==g){e=e.mesh.usematerial.split(",");var h=parseInt(e[0].split("|")[1]);g=this._Materials[h];b[h]=!0;for(e=0;e<g.textures.length;e++)(f=g.textures[e])&&(a[f.name]=f)}else this.smartDeferral&&(e=e.mesh.usematerial.split(","),h=parseInt(e[0].split("|")[1]),c[h]=
!0)}}d=[];for(h in this.stX._InitialMaterials)if(g=this._Materials[h],!c[h]||b[h])for(e=0;e<g.textures.length;e++)(f=g.textures[e])&&(a[f.name]=f);else this.smartDeferral&&d.push(h);if(this.smartDeferral)for(h in d)delete this.stX._InitialMaterials[d[h]];for(e=0;e<this._TextureObjs.length;e++)if(f=this._TextureObjs[e],"Procedural"==f.type)for(a[f.name]=f,b=0;b<f._unis.length;b++)c=f._unis[b],"sampler"==c.type&&(c=this._Texture_ref[c.val])&&(a[c.name]=c);0<this._backdroptexturename.length&&(f=a[this._backdroptexturename]=
this._Texture_ref[this._backdroptexturename],this.manageTexs&&f.addRef());b=null;for(e=0;e<this._TextureObjs.length;e++)(f=this._TextureObjs[e],this.manageTexs&&1>f.refs||1==f.defer||void 0!=a[f.name]||"File"!=f.type&&"FileCube3x2"!=f.type||(null==b&&(null==this._lstDeferredGrps&&(this._lstDeferredGrps=[]),b=this._lstDeferredGrps._auto_,null==b&&(b=this._lstDeferredGrps._auto_={name:"_auto_",lstGeoms:[],_outstandingdeferred:0})),b._outstandingdeferred++,f.defer=1,!(1>f._lvlfilenames.length)&&this.loadProgressiveTextures))||
(null==this.nonProgressiveDeferredTex&&(this.nonProgressiveDeferredTex=[]),this.nonProgressiveDeferredTex.push(f))};infinityrt_scene.prototype.AutoDeferTextureDecoded=function(a){null!=this._lstDeferredGrps&&(a=this._lstDeferredGrps._auto_,a._outstandingdeferred--,this.CheckForFinalAutoDeferral(a))};
infinityrt_scene.prototype.CallInitialState=function(){this._fnOnInitialState(this);this._fnOnInitialStateAfter&&this._fnOnInitialStateAfter(this);this.AutoDeferTextures();for(var a=0;a<this._TextureObjs.length;a++){var b=this._TextureObjs[a];1!=b.defer&&b.startFileDownloads()}b={};this.WalkForInitialDeferStatus(this,!0,b);for(a in b){var c=b[a];c.visible?(c.mesh.defer=!1,this._outstandingjobs++,this._totaljobs++,this.MeshQueue(c.mesh)):(c.mesh.defer="_auto_",this.addObjToDeferred(c.mesh))}};
var g_currentInput=0;function __mix(a,b,c,d){if("undefined"!=typeof a){0<a.shader.length&&a.shader.use(a.scene);if(Array.isArray(c)){a[b]=[];for(var e=0;e<c.length;e++)a[b].push((1-g_currentInput)*c[e]+g_currentInput*d[e]);0<a.shader.length&&a.shader.setVector(b,a[b])}else a[b]=(1-g_currentInput)*c+g_currentInput*d,0<a.shader.length&&a.shader.setFloat(b,a[b]);a.uniBlockDirty=!0;a.uniBlockUnlitDirty=!0;a.uniBlockReflectiveDirty=!0;a.uniBlockAmbientDirty=!0;a.uniBlockGlassDirty=!0}}
infinityrt_scene.prototype.evaluateGrpCmds=function(a,b){g_currentInput=b;return function(){return eval(a.commands)}.call(this)};
infinityrt_scene.prototype.DetermineBrowser=function(){this.isFirefox="undefined"!==typeof InstallTrigger;this.isSafari=0<Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor")||"[object SafariRemoteNotification]"===(!window.safari||safari.pushNotification).toString();this.isIE=-1!==navigator.userAgent.indexOf("MSIE")||0<navigator.appVersion.indexOf("Trident/");this.isEdge=!this.isIE&&!!window.StyleMedia;this.isChrome=!!window.chrome};
infinityrt_scene.prototype.DeterminePlatform=function(){this.platform={iPhone:-1!=navigator.userAgent.indexOf("iPhone"),Android:-1!=navigator.userAgent.indexOf("Android"),iOS:-1!=navigator.userAgent.indexOf("iPhone")||-1!=navigator.userAgent.indexOf("iPad")||-1!=navigator.userAgent.indexOf("iPod")}};infinityrt_scene.prototype.getExtension=function(a){var b=["","WEBKIT_","MOZ_"],c=null,d;for(d in b)if(c=this.gl.getExtension(b[d]+a))break;return c};
infinityrt_scene.prototype.resetCounts=function(){this._refineCount=-1};
infinityrt_scene.prototype.recalcSceneRadius=function(a){this._bbmax=[-1E6,-1E6,-1E6];this._bbmin=[1E6,1E6,1E6];this.recurseCalcMidPtAndSceneExtents(this,infinityrt_identity.slice(0),a);null!=this._rootEnv&&this.recurseCalcMidPtAndSceneExtents(this._rootEnv,infinityrt_identity.slice(0),a);a=[];for(var b=0;3>b;b++)a[b]=Math.abs(this._bbmax[b])>Math.abs(this._bbmin[b])?this._bbmax[b]:this._bbmin[b];this.sceneRadius=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2])};
infinityrt_scene.prototype.calcSceneRadiusNonDepth=function(){for(var a=[-1E6,-1E6,-1E6],b=[1E6,1E6,1E6],c=0;c<this._lstNonDepthObjects.length;c++){var d=this._lstNonDepthObjects[c];d.mesh.loadToCard(this);var e=new infinityrt_transform,f=e.multiply1_3by4_4(d.mesh._localbbmax,d.ltog_matrix);d=e.multiply1_3by4_4(d.mesh._localbbmin,d.ltog_matrix);for(e=0;3>e;e++)f[e]>a[e]&&(a[e]=f[e]),d[e]<b[e]&&(b[e]=d[e])}a=Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);b=Math.sqrt(b[0]*b[0]+b[1]*b[1]+b[2]*b[2]);this.sceneRadiusNonDepth=
a>b?a:b};infinityrt_scene.prototype.start=function(){var a=this;if(!a._started)if(0<a._outstandingjobs)setTimeout(function(){a.start()},200);else{a.resetCounts();a.initTextureFramebuffer();if(a._localfiles||a.userStop)for(var b=0;b<a._TextureObjs.length;b++){var c=a._TextureObjs[b],d=c.defer;1!=d&&c.startFileDownloads();a.userStop&&1<c._lvlfilenames.length&&(null==a._TextureToLvl0&&(a._TextureToLvl0=[]),1!=d&&a._TextureToLvl0.push(c))}a.recalcSceneRadius();a._started=!0}};
infinityrt_scene.prototype.stop=function(){for(var a=0;a<this._TextureObjs.length;a++)"Procedural"!=this._TextureObjs[a].type&&this._TextureObjs[a].unload();this._TexDummy3D=this._TexDummy=void 0;this.texDummy={};this._Texture_ref.__rtblanktexture__&&this._Texture_ref.__rtblanktexture__.destroy();this._Texture_ref.__rtblanktexture3d__&&this._Texture_ref.__rtblanktexture3d__.destroy();this._Images=[];this.CheckForGeomUnloads(!0);this._fboGlow&&(this._fboGlow=this.DeleteFBOTarget(this._fboGlow));this._fboTargetBright&&
(this._fboTargetBright=this.DeleteFBOTarget(this._fboTargetBright));this._fboPlanarReflect&&(this._fboPlanarReflect=this.DeleteFBOTarget(this._fboPlanarReflect));if(this.renderTargetsHorizontal){for(a=0;a<this.renderTargetsHorizontal.length;a++)this.DeleteFBOTarget(this.renderTargetsHorizontal[a]);for(a=0;a<this.renderTargetsVertical.length;a++)this.DeleteFBOTarget(this.renderTargetsVertical[a]);this.renderTargetsHorizontal=[];this.renderTargetsVertical=[]}this._fboDoF&&(this._fboDoF=this.DeleteFBOTarget(this._fboDoF));
this._fboDoFDepth&&(this._fboDoFDepth=this.DeleteFBOTarget(this._fboDoFDepth));this.unloadTextureFramebuffer();this._started=!1;this.userStop=!0};
infinityrt_scene.prototype.recurseCalcMidPtAndSceneExtents=function(a,b,c){if(!c||!c.onlyVisible||0!=a.visible&&!a._bIncludeInPlanarReflect){"undefined"!=typeof a.matrix&&(b=MatrixMultiply(a.matrix,b),"undefined"!=typeof a.usermatrix&&(b=MatrixMultiply(a.usermatrix,b)));if(void 0!=c&&c.skipInstances)for(var d=a.name.toLowerCase(),e=0;e<c.skipInstances.length;e++)if(d==c.skipInstances[e].toLowerCase())return;e=a.mesh;if(null!=e){var f=new infinityrt_transform;"undefined"!=typeof a.joints_global_bbmin?
(f=a.joints_global_bbmin,d=a.joints_global_bbmax):(d=f.multiply1_3by4_4(e._localbbmax,b),f=f.multiply1_3by4_4(e._localbbmin,b));for(e=0;3>e;e++)d[e]>this._bbmax[e]&&(this._bbmax[e]=d[e]),f[e]<this._bbmin[e]&&(this._bbmin[e]=f[e])}if("undefined"!=typeof a.children)for(d=0;d<a.children.length;d++)this.recurseCalcMidPtAndSceneExtents(a.children[d],b,c)}};
infinityrt_scene.prototype.recurseCalcExtents=function(a,b){if(0!=a.visible&&!a._bIncludeInPlanarReflect){var c=a.mesh;if(null!=c){if(this.CanRender(this._Materials[c.currentMaterial],!0))return;var d=infinityrt_transform.prototype.multiply1_3by4_4(c._localbbmax,a.ltog_matrix);c=infinityrt_transform.prototype.multiply1_3by4_4(c._localbbmin,a.ltog_matrix);for(var e=0;3>e;e++)d[e]>b.bbmax[e]&&(b.bbmax[e]=d[e]),c[e]<b.bbmin[e]&&(b.bbmin[e]=c[e])}if("undefined"!=typeof a.children)for(d=0;d<a.children.length;d++)this.recurseCalcExtents(a.children[d],
b)}};infinityrt_scene.prototype.getCombinedExtents=function(a){a=this.getInstanceByNameIncEnv(a);if(null==a)return null;var b={inst:a,bbmax:[-1E6,-1E6,-1E6],bbmin:[1E6,1E6,1E6]};this.recurseCalcExtents(a,b);return b};infinityrt_scene.prototype.recurseIsVisible=function(a){return"undefined"==typeof a||"undefined"==typeof a.visible?1:a.visible?a.visible*this.recurseIsVisible(a.parent):0};
infinityrt_scene.prototype.recurseSetVisible=function(a,b){a.visible=b;if(this.visibilityRecurses&&"undefined"!=typeof a.children)for(var c=0;c<a.children.length;c++)this.recurseSetVisible(a.children[c],b)};
infinityrt_scene.prototype.recurseSetMeshSmartDefer=function(a,b){if("undefined"!=typeof a.children)for(var c=0;c<a.children.length;c++)this.recurseSetMeshSmartDefer(a.children[c],b);if(a.mesh&&a.mesh.defer&&!a.mesh.meshloaded&&(a.mesh.smartDefer=!0,b&&-1==b.findIndex(function(f){return f==a.mesh}))){b.push(a.mesh);c=a.mesh.usematerial.split(",");c=parseInt(c[0].split("|")[1]);c=this._Materials[c];for(var d=0;d<c.textures.length;d++){var e=c.textures[d];!e||!e.defer||e.smartDefer||e.downloadStarted||
e.loaded||-1==b.findIndex(function(f){return f==e})&&b.push(e)}}};infinityrt_scene.prototype.recurseGetPendingMeshObjects=function(a,b){if("undefined"!=typeof a.children)for(var c=0;c<a.children.length;c++)this.recurseGetPendingMeshObjects(a.children[c],b);a.mesh&&a.mesh.defer&&!a.mesh.meshloaded&&b&&-1==b.findIndex(function(d){return d==a.mesh})&&b.push(a.mesh)};
infinityrt_scene.prototype.CheckForGeomUnloads=function(a){var b,c={};for(b=0;b<this.children.length;b++)this.children[b].zeroInstance(c);for(b=0;b<this._lstNonDepthObjects.length;b++)this._lstNonDepthObjects[b].zeroInstance(c);null!=this._rootEnv&&this._rootEnv.zeroInstance(c);if(!a){for(b=0;b<this.children.length;b++)this.children[b].markInstance(!0);for(b=0;b<this._lstNonDepthObjects.length;b++)this._lstNonDepthObjects[b].markInstance(!0);null!=this._rootEnv&&this._rootEnv.markInstance(!0)}for(b in c)a=
c[b],0==a.numinstances&&a.unload(this)};infinityrt_scene.prototype.DecodeAttributeToFloatArray=function(a,b,c,d,e){e=c.GetAttributeId(b,e);if(-1==e)return null;var f=c.GetAttribute(b,e);e=new a.DracoFloat32Array;c.GetAttributeFloatForAllPoints(b,f,e);b=d*f.num_components();c=new Float32Array(b);for(d=0;d<b;d++)c[d]=e.GetValue(d);a.destroy(e);return c};var infinityrt_stream=function(a){this.data=a;this.offset=0};infinityrt_stream.prototype.readByte=function(){return this.data[this.offset++]&255};
infinityrt_stream.prototype.readInt32=function(){var a=this.readByte();a|=this.readByte()<<8;a|=this.readByte()<<16;return a|this.readByte()<<24};
infinityrt_scene.prototype.decodeGeometry=function(a){if(null!=a.compresseddata){if(a._meshURL.endsWith(".dat2")){this.selfcheck&&!this.selfcheck.geomformat&&(this.selfcheck.geomformat=!0,console.log("***Warning: Using .dat2 geometry compression (recommended raw16c .dat)"));0==this.geomgen&&(this.geomgen=2);if("undefined"==typeof decoderModule.asm||"undefined"==typeof decoderModule.asm._emscripten_bind_DecoderBuffer_DecoderBuffer_0){setTimeout(function(){a._scene.decodeGeometry(a)},100);return}var b=
new decoderModule.DecoderBuffer;b.Init(a.compresseddata,a.compresseddata.length);var c=new decoderModule.Decoder;c.GetEncodedGeometryType(b);var d=new decoderModule.Mesh;c.DecodeBufferToMesh(b,d).ok()||console.log("Decode Error: '"+a._meshURL+"' ");var e=d.num_points(),f=d.num_faces();d.num_attributes();var g=this.DecodeAttributeToFloatArray(decoderModule,d,c,e,decoderModule.POSITION);a.addPoints(g);g=this.DecodeAttributeToFloatArray(decoderModule,d,c,e,decoderModule.NORMAL);a.addNormals(g);g=this.DecodeAttributeToFloatArray(decoderModule,
d,c,e,decoderModule.TEX_COORD);null!=g&&a.addUVs(g);e=this.DecodeAttributeToFloatArray(decoderModule,d,c,e,decoderModule.GENERIC);null!=e&&a.addColors(e);g=new Uint32Array(3*f);var h=new decoderModule.DracoInt32Array;for(e=0;e<f;++e){c.GetFaceFromMesh(d,e,h);var k=3*e;g[k]=h.GetValue(0);g[k+1]=h.GetValue(1);g[k+2]=h.GetValue(2)}decoderModule.destroy(h);a.addIndices(g);decoderModule.destroy(d);decoderModule.destroy(c);decoderModule.destroy(b)}else if(a._meshURL.endsWith(".raw"))this.selfcheck&&!this.selfcheck.geomformat&&
(this.selfcheck.geomformat=!0,console.log("***Warning: Using .raw geometry compression (recommended raw16c .dat)")),0==this.geomgen&&(this.geomgen=3),b=new infinityrt_stream(a.compresseddata),d=b.readInt32(),a.addPoints(new Float32Array(a.compresseddataresponse,b.offset,d)),b.offset+=4*d,h=b.readInt32(),a.addNormals(new Float32Array(a.compresseddataresponse,b.offset,h)),b.offset+=4*h,f=b.readInt32(),a.addUVs(new Float32Array(a.compresseddataresponse,b.offset,f)),b.offset+=4*f,c=b.readInt32(),a.addIndices(new Uint32Array(a.compresseddataresponse,
b.offset,c)),b.offset+=4*c,e=b.readInt32(),0<e&&(a.tanus=new Float32Array(a.compresseddataresponse,b.offset,e),b.offset+=4*e);else if(4==this.geomgenfile||a._meshURL.endsWith(".raw16"))if(this.selfcheck&&!this.selfcheck.geomformat&&(this.selfcheck.geomformat=!0,console.log("***Warning: Using .raw16 geometry compression (recommended raw16c .dat)")),0==this.geomgen&&(this.geomgen=4),b=new infinityrt_stream(a.compresseddata),d=b.readInt32(),h=b.readInt32(),f=b.readInt32(),c=b.readInt32(),this.platform.iOS){k=
new Float32Array(d);g=new Uint16Array(a.compresseddataresponse,b.offset,d);for(e=0;e<g.length;e+=3)k[e]=g[e]/65535*(a._localbbmax[0]-a._localbbmin[0])+a._localbbmin[0],k[e+1]=g[e+1]/65535*(a._localbbmax[1]-a._localbbmin[1])+a._localbbmin[1],k[e+2]=g[e+2]/65535*(a._localbbmax[2]-a._localbbmin[2])+a._localbbmin[2];a.addPoints(k);b.offset+=2*d;k=new Float32Array(h);g=new Int16Array(a.compresseddataresponse,b.offset,h);for(e=0;e<g.length;e++)k[e]=g[e]/32757;a.addNormals(k);b.offset+=2*h;h=new Float32Array(f);
g=new Uint16Array(a.compresseddataresponse,b.offset,f);for(e=0;e<g.length;e+=2)h[e]=g[e]/65535*(a._texbbmax[0]-a._texbbmin[0])+a._texbbmin[0],h[e+1]=g[e+1]/65535*(a._texbbmax[1]-a._texbbmin[1])+a._texbbmin[1];a.addUVs(h);b.offset+=2*f;if(65535<d/3)a.addIndices(new Uint32Array(a.compresseddataresponse,b.offset,c)),b.offset+=4*c;else{h=new Uint32Array(c);d=new Uint16Array(a.compresseddataresponse,b.offset,c);for(e=0;e<d.length;e++)h[e]=d[e];a.addIndices(h);b.offset+=2*c}}else a.addPoints(new Uint16Array(a.compresseddataresponse,
b.offset,d)),b.offset+=2*d,a.addNormals(new Int16Array(a.compresseddataresponse,b.offset,h)),b.offset+=2*h,a.addUVs(new Uint16Array(a.compresseddataresponse,b.offset,f)),b.offset+=2*f,65535<d/3?(a.addIndices(new Uint32Array(a.compresseddataresponse,b.offset,c)),b.offset+=4*c):(a.addIndices(new Uint16Array(a.compresseddataresponse,b.offset,c)),b.offset+=2*c);else if(5==this.geomgenfile){b=new infinityrt_stream(a.compresseddata);e=b.readInt32();if(-2==e){b.readInt32();g=b.readInt32();for(e=0;5>e;e++)b.readInt32();
d=b.readInt32()}else d=e;h=b.readInt32();f=b.readInt32();c=b.readInt32();if(this.platform.iOS){k=new Float32Array(d);var l=new Uint16Array(a.compresseddataresponse,b.offset,d);for(e=0;e<l.length;e++)l[e]=(l[e]&65535)+(3<=e?l[e-3]:0);for(e=0;e<l.length;e+=3)k[e]=l[e]/16383*(a._localbbmax[0]-a._localbbmin[0])+a._localbbmin[0],k[e+1]=l[e+1]/16383*(a._localbbmax[1]-a._localbbmin[1])+a._localbbmin[1],k[e+2]=l[e+2]/16383*(a._localbbmax[2]-a._localbbmin[2])+a._localbbmin[2];a.addPoints(k);b.offset+=2*d;
k=new Float32Array(h);l=new Int16Array(a.compresseddataresponse,b.offset,h);for(e=0;e<l.length;e++)k[e]=l[e]/8191;a.addNormals(k);b.offset+=2*h;h=new Float32Array(f);k=new Uint16Array(a.compresseddataresponse,b.offset,f);for(e=0;e<k.length;e+=2)h[e]=k[e]/16383*(a._texbbmax[0]-a._texbbmin[0])+a._texbbmin[0],h[e+1]=k[e+1]/16383*(a._texbbmax[1]-a._texbbmin[1])+a._texbbmin[1];a.addUVs(h);b.offset+=2*f;if(k=65535<d/3)h=new Uint32Array(a.compresseddataresponse,b.offset,c);else for(h=new Uint32Array(c),
l=new Uint16Array(a.compresseddataresponse,b.offset,c),e=0;e<l.length;e++)h[e]=l[e];for(e=0;e<h.length/3;e++)1<=e&&(h[3*e]+=h[3*(e-1)]),h[3*e+2]+=h[3*e],h[3*e+1]=1<=e&&h[3*e]==h[3*(e-1)]?h[3*e+1]+h[3*(e-1)+1]:h[3*e+1]+h[3*e];a.addIndices(h);b.offset+=c*(k?4:2);if(1<this.uvch){h=new Float32Array(f);k=new Uint16Array(a.compresseddataresponse,b.offset,f);for(e=0;e<k.length;e+=2)h[e]=k[e]/16383*(a._tex2bbmax[0]-a._tex2bbmin[0])+a._tex2bbmin[0],h[e+1]=k[e+1]/16383*(a._tex2bbmax[1]-a._tex2bbmin[1])+a._tex2bbmin[1];
a.addUVs2(h);b.offset+=2*f}if(0!=(g&2)){e=d/3*4;c=new Float32Array(e);b=new Uint16Array(a.compresseddataresponse,b.offset,e);for(e=0;e<b.length;e++)c[e]=b[e]/16383;a.addSkinWeights(c)}}else a.addPoints(new Uint16Array(a.compresseddataresponse,b.offset,d)),b.offset+=2*d,a.addNormals(new Int16Array(a.compresseddataresponse,b.offset,h)),b.offset+=2*h,a.addUVs(new Uint16Array(a.compresseddataresponse,b.offset,f)),b.offset+=2*f,65535<d/3?(a.addIndices(new Uint32Array(a.compresseddataresponse,b.offset,
c)),b.offset+=4*c):(a.addIndices(new Uint16Array(a.compresseddataresponse,b.offset,c)),b.offset+=2*c),1<this.uvch&&(a.addUVs2(new Uint16Array(a.compresseddataresponse,b.offset,f)),b.offset+=2*f),0!=(g&2)&&(e=d/3*4,a.addSkinWeights(new Uint16Array(a.compresseddataresponse,b.offset,e)),b.offset+=2*e)}else{this.selfcheck&&!this.selfcheck.geomformat&&(this.selfcheck.geomformat=!0,console.log("***Warning: Using CTM geometry compression (recommended raw16c .dat)"));0==this.geomgen&&(this.geomgen=1);b=new CTM.File(new CTM.Stream(a.compresseddata));
if(1!=this._SceneScale)for(e=0;e<b.body.vertices.length;e++)b.body.vertices[e]*=this._SceneScale;a.addPoints(b.body.vertices);a.addNormals(b.body.normals);void 0!==b.body.uvMaps&&0<b.body.uvMaps.length&&a.addUVs(b.body.uvMaps[0].uv);if(void 0!==b.body.attrMaps)for(e=0;e<b.body.attrMaps.length;e++)"color"==b.body.attrMaps[e].name&&a.addColors(b.body.attrMaps[e].attr);g=b.body.indices;a.addIndices(g)}e=a.usematerial.split(",");e=parseInt(e[0].split("|")[1]);a.refEnv&&a._scene.mapMaterialsEnv&&(e=a._scene.mapMaterialsEnv[e]);
a.setFaceMaterial(e);a.proggeom?(a.unload(a._scene),a.loadToCard(a._scene),a._scene.clearRefine()):!a.defer||a.smartDefer?(a._scene._outstandingjobs--,-1!=a._scene._inlineGPULoading?function(m){setTimeout(function(){m.loadToCard(m._scene)},m._scene._inlineGPULoading)}(a):null!=a._scene._fnOnInitialState&&a.loadToCard(a._scene)):a._scene._started&&(a.deferObj._outstandingdeferred--,0==a.deferObj._outstandingdeferred&&"_auto_"==a.deferObj.name&&a._scene.CheckForFinalAutoDeferral(a.deferObj));a.compresseddata=
null;a.compresseddataresponse=null;a.meshloaded=!0;this.MeshQueueComplete();this.smartDeferral&&this.CheckForFinalSmartDeferral(a)}};
infinityrt_scene.prototype.CheckForFinalSmartDeferral=function(a){if(a.smartDefer){a.smartDefer=!1;var b=!0;if(a._scene.smartDeferVisibilityArray.length){for(var c=0;c<a._scene.smartDeferVisibilityArray.length;c++)if(0<=a._scene.smartDeferVisibilityArray[c].tex_id){if(a._scene.smartDeferVisibilityArray[c].smartDefer){b=!1;break}}else if(!a._scene.smartDeferVisibilityArray[c].meshloaded){b=!1;break}if(b){for(c=0;c<a._scene.smartDeferVisibilityArray.length;c++)a._scene.smartDeferVisibilityArray[c].meshloaded?
a._scene.smartDeferVisibilityArray[c].visible=!0:0<=a._scene.smartDeferVisibilityArray[c].tex_id&&(a._scene.smartDeferVisibilityArray[c].smartDefer=!1);a._scene.clearRefine();a._scene.smartDeferVisibilityArray=[];a._scene.smartDeferTextures=[]}}}else if(0<=a.tex_id)a.smartToLvl0||(null==a._scene._TextureToLvl0&&(a._scene._TextureToLvl0=[]),-1==a._scene._TextureToLvl0.findIndex(function(e){return e==a})&&0<a.lvl&&a._scene._TextureToLvl0.push(a));else for(c=a.usematerial.split(","),c=parseInt(c[0].split("|")[1]),
b=this._Materials[c],c=0;c<b.textures.length;c++){var d=b.textures[c];d&&!d.smartToLvl0&&(null==a._scene._TextureToLvl0&&(a._scene._TextureToLvl0=[]),-1==a._scene._TextureToLvl0.findIndex(function(e){return e==d})&&0<d.lvl&&a._scene._TextureToLvl0.push(d))}};
infinityrt_scene.prototype.CheckForFinalAutoDeferral=function(a){0==a._outstandingdeferred&&(this.selfcheck&&console.log("All Geometry : "+(this.selfcheck.geom[1]/1048576).toFixed(1)+"MB ("+this.selfcheck.geom[0]+" files, "+(this.selfcheck.geom[2]/1E6).toFixed(2)+" MTris)"),this._fnOnAllDecodedFirst&&this._fnOnAllDecodedFirst(this),this._fnOnAllDecoded&&this._fnOnAllDecoded(this))};
infinityrt_scene.prototype.loadMesh=function(a,b,c,d,e,f,g,h){f=new infinityrt_object(this);f.usematerial=c;f.defer=d;f.retries=0;f.blksd=e;f._meshURL=b;f._meshURLFull=this.BuildURL(f._meshURL);f._fileOffset=g;f._fileSize=h;if(2==a.type||3==a.type)f.refEnv=a.ref;if(2==a.type||3==a.type||null==this._fnOnInitialState||f._fileSize)f.defer?this.addObjToDeferred(f):(this._outstandingjobs++,this._totaljobs++,this.MeshQueue(f));return f};
infinityrt_scene.prototype.addObjToDeferred=function(a){null==this._lstDeferredGrps&&(this._lstDeferredGrps=[]);a.deferObj=null==this._lstDeferredGrps[a.defer]?this._lstDeferredGrps[a.defer]={name:a.defer,lstGeoms:[],_outstandingdeferred:0}:this._lstDeferredGrps[a.defer];a.deferObj.lstGeoms.push(a);a.deferObj._outstandingdeferred++};infinityrt_scene.prototype.forceNoAA=function(a){this._bNoAA=a};infinityrt_scene.prototype.forceAA=function(a){this._bAllowDirectRender=!a};
infinityrt_scene.prototype.forceNoCompressedTexs=function(a){this._bNoCompressedTexs=a};infinityrt_scene.prototype.prepare=function(){if(this._prepared)return!0;do{var a=this._TextureObjs[--this.prepareTexId].refresh();if(0==this.prepareTexId)return this._prepared=!0}while(!a);return!1};var now=function(){var a=window.performance||{};a.now=function(){return a.now||a.webkitNow||a.msNow||a.oNow||a.mozNow||function(){return(new Date).getTime()}}();return a.now()};
infinityrt_scene.prototype.ensureViewSizeIsValid=function(){this.viewwidth>this.MaxTextureSize?this.viewwidth=this.MaxTextureSize:8>this.viewwidth&&(this.viewwidth=8);this.viewheight>this.MaxTextureSize?this.viewheight=this.MaxTextureSize:8>this.viewheight&&(this.viewheight=8)};
infinityrt_scene.prototype.resize=function(a,b){this.viewwidth=Math.floor(a);this.viewheight=Math.floor(b);this.ensureViewSizeIsValid();this.unloadTextureFramebuffer();this.buffProgressRefineCoords=this.buffProgressRefineScaledCoords=void 0;this.initTextureFramebuffer();this.clearRefine()};
infinityrt_scene.prototype.onResize=function(){var a=2<window.devicePixelRatio?2:window.devicePixelRatio,b=this.canvas,c=Math.floor(b.clientWidth*a),d=Math.floor(b.clientHeight*a);if(c!=this.viewwidth||d!=this.viewheight)this._nav&&(this._nav._navMX=this._nav._midx=c/2,this._nav._navMY=this._nav._midy=d/2),this.resize(c,d),1!=a&&(a=1/a,b.style.transform="scale("+a+")",b.style["transform-origin"]="0% 0%",b.style["-webkit-transform"]="scale("+a+")",b.style["-webkit-transform-origin"]="0% 0%",b.style["-moz-transform"]=
"scale("+a+")",b.style["-moz-transform-origin"]="0% 0%",b.style["-o-transform"]="scale("+a+")",b.style["-o-transform-origin"]="0% 0%",b.style["-ms-transform"]="scale("+a+")",b.style["-ms-transform-origin"]="0% 0%")};infinityrt_scene.prototype.getAdjFoV=function(){var a=this.fovy,b=null!=this.drawFBO?this.drawFBO._nFBOWidth:this.viewwidth,c=null!=this.drawFBO?this.drawFBO._nFBOHeight:this.viewheight;this._flipFoVonAspectSwap&&c>b&&(a=2*Math.atan(c/b*Math.tan(this.fovy/180*M_PI*.5))/M_PI*180);return a};
infinityrt_scene.prototype.getProjectionMatrix=function(a){var b=infinityrt_length(this.camPos),c=b-1.1*a;c<this._zNearMin&&(c=this._zNearMin);a=b+1.1*a;this.projDepths={zNear:c,zFar:a};b=null!=this.drawFBO?this.drawFBO._nFBOWidth/this.drawFBO._nFBOHeight:this.viewwidth/this.viewheight;return this.xrActive?infinityrt_perspective(Math.abs(360*Math.atan(1/this.xrprojmatrix[5])/M_PI),b,c,a):infinityrt_perspective(this.getAdjFoV(),b,c,a)};
infinityrt_scene.prototype.initCamera=function(){this.camPosGlobal=this.camPos=[parseFloat(this.matView[12])*this._SceneScale,parseFloat(this.matView[13])*this._SceneScale,parseFloat(this.matView[14])*this._SceneScale];this.camPosGlobal=infinityrt_vertex_scladd(this.camPosGlobal,[this.matView[0],this.matView[1],this.matView[2]],this._nav._navPan[0]*this._SceneScale);this.camPosGlobal=infinityrt_vertex_scladd(this.camPosGlobal,[this.matView[4],this.matView[5],this.matView[6]],this._nav._navPan[1]*
this._SceneScale);this.camPosGlobal=this.RestrictViewSpace(this.camPosGlobal);if(2==this.upvector){var a=[this.matView[12]*this._SceneScale+this.matView[0],this.matView[13]*this._SceneScale+this.matView[1],this.matView[14]*this._SceneScale+this.matView[2]];var b=[this.matView[8],this.matView[9],this.matView[10]]}else a=[this.matView[12]*this._SceneScale-this.matView[8],this.matView[13]*this._SceneScale-this.matView[9],this.matView[14]*this._SceneScale-this.matView[10]],b=[this.matView[4],this.matView[5],
this.matView[6]];this.mv_matrix=infinityrt_lookat(this.camPos,a,b,this._nav._navPan,this._SceneScale,this);this.p_matrix=this.getProjectionMatrix(this.sceneRadius);this._dofRequiresClear=this._animRequiresClear=!1;this.mvp_matrix=MatrixMultiply(this.mv_matrix,this.p_matrix);this.CalcFrustumClip();this.FrameDirty()};infinityrt_scene.prototype.downloadDeferredGeometry=function(a){if(!a._DeferredSent){a._DeferredSent=!0;for(var b=0;b<a.lstGeoms.length;b++)this.MeshQueue(a.lstGeoms[b])}};
infinityrt_scene.prototype.decodeDeferredGeometry=function(a){if(!this._AllDeferredSent)return!1;a=this._lstDeferredGrps[a];if(null==a||!a._DeferredSent||0==a._outstandingdeferred)return!1;for(var b=0;b<a.lstGeoms.length;b++)null!=a.lstGeoms[b]._obj.compresseddata&&this.decodeGeometry(a.lstGeoms[b]);return!0};infinityrt_scene.prototype.setViewMatrix=function(a){this.matView=a};infinityrt_scene.prototype.setModelMatrix=function(a){this.mHierModel=a};
infinityrt_scene.prototype.HMXRandom=function(a){var b=a[this._nRandomIdx];this._nRandomIdx>a.length-1&&(this._nRandomIdx=0);return b};infinityrt_scene.prototype.getViewMatrix=function(){return this.matView};infinityrt_scene.prototype.fillInstanceLookupRecurse=function(a){this.instanceLookup[a.name]=a;if("undefined"!=typeof a.children)for(var b=0;b<a.children.length;b++)this.fillInstanceLookupRecurse(a.children[b])};
infinityrt_scene.prototype.fillInstanceLookup=function(){for(var a=0;a<this._lstNonDepthObjects.length;a++)this.fillInstanceLookupRecurse(this._lstNonDepthObjects[a]);void 0!=this._rootEnv&&this.fillInstanceLookupRecurse(this._rootEnv);this.fillInstanceLookupRecurse(this)};
infinityrt_scene.prototype.getInstanceByNameIncEnv=function(a,b){b=this.instanceLookup[a];if(void 0!=b)return b;for(var c=0;c<this._lstNonDepthObjects.length;c++)if(b=this.getInstanceByName(a,this._lstNonDepthObjects[c]),null!=b)return this.instanceLookup[a]=b;if(void 0!=this._rootEnv&&(b=this.getInstanceByName(a,this._rootEnv),null!=b))return b;b=this.getInstanceByName(a,this);null!=b&&(this.instanceLookup[a]=b);return b};
infinityrt_scene.prototype.getInstanceByName=function(a,b){var c=this.instanceLookup[a];if(void 0!=c)return c;if(b.name==a)return b;if("undefined"!=typeof b.children)for(var d=0;d<b.children.length;d++)if(c=this.getInstanceByName(a,b.children[d]),null!=c)return this.instanceLookup[a]=c;return null};
infinityrt_scene.prototype.replaceMaterial=function(a,b,c){var d=0,e=a.mesh;null!=e&&e.currentMaterial==b.material_id&&(e.currentMaterial=c.material_id,d++);for(e=0;e<a.children.length;e++)d+=this.replaceMaterial(a.children[e],b,c);return d};infinityrt_scene.prototype.onClick=function(a,b){return!1};infinityrt_scene.prototype.createImage=function(a,b){a=new infinityrt_texture(a,"File",this.BuildURL(b),this);a.refs=1;a.startFileDownloads();return a};
infinityrt_scene.prototype.getObjectLocation=function(a,b){a=this.getInstanceByNameIncEnv(a,this);if(null==a)return null;if(b&&(null==a.mesh&&1==a.children.length&&null!=a.children[0].mesh&&(a=a.children[0]),a&&a.mesh&&a.mesh._localbbmax)){var c=[a.mesh._localbbmin[0],a.mesh._localbbmin[1],a.mesh._localbbmin[2],1];b=PointTransform([a.mesh._localbbmax[0],a.mesh._localbbmax[1],a.mesh._localbbmax[2],1],a.ltog_matrix);a=PointTransform(c,a.ltog_matrix);return[.5*(b[0]+a[0]),.5*(b[1]+a[1]),.5*(b[2]+a[2])]}return[a.ltog_matrix[12],
a.ltog_matrix[13],a.ltog_matrix[14]]};infinityrt_scene.prototype.getObjectNormal=function(a){var b=this.getInstanceByNameIncEnv(a,this);if(null==b)return null;null==b.mesh&&1==b.children.length&&null!=b.children[0].mesh&&(b=b.children[0]);if(null==b.mesh||0==b.mesh.point_normals.length||void 0==b.ltog_matrix)return this.prepareObject(a),null;a=b.mesh.GetNormal(0);return PointTransform(a,b.ltog_matrix)};
infinityrt_scene.prototype.projectPoint=function(a){if("undefined"==typeof this.mvp_matrix)return null;a=PointTransform([a[0],a[1],a[2],1],this.mvp_matrix);a[0]/=a[3];a[1]/=a[3];a[2]/=a[3];a[3]=1;return a};infinityrt_scene.prototype.pixelToScreen=function(a,b){return null};
infinityrt_scene.prototype.materialSet=function(a,b,c){a=this._Material_ref[a];if(null==a)return!1;a[b]=c;null!=a.shader&&(a.uniBlockDirty=!0,a.uniBlockUnlitDirty=!0,a.uniBlockReflectiveDirty=!0,a.uniBlockAmbientDirty=!0,a.uniBlockGlassDirty=!0,a.UpdateUniforms(0));return!0};
infinityrt_scene.prototype.enableMaterialReflectionPlanes=function(a,b){a=this._Material_ref[a];if(null==a)return!1;a.enablereflectionplanes=b?1:0;null!=a.shader&&(a.uniBlockDirty=!0,a.uniBlockUnlitDirty=!0,a.uniBlockReflectiveDirty=!0,a.uniBlockAmbientDirty=!0,a.uniBlockGlassDirty=!0,a.UpdateUniforms(0));return!0};
infinityrt_scene.prototype.updateAllMaterials=function(){if(1<this._glVersionNum)for(var a in this._Material_ref){var b=this._Material_ref[a];void 0!=b&&(b.uniBlockDirty=!0,b.uniBlockUnlitDirty=!0,b.uniBlockReflectiveDirty=!0,b.uniBlockAmbientDirty=!0,b.uniBlockGlassDirty=!0)}};
infinityrt_scene.prototype.instanceSet=function(a,b,c){a=this.getInstanceByNameIncEnv(a,this);if(null==a)return!1;if(a[b]!=c){a[b]=c;if("visible"==b)this.visibilityChanged=!0,this.recurseSetVisible(a,c);else if("visibleGlow"==b)for(var d=0;d<a.children.length;d++)a.children[d][b]=c;this._hierarchyDirty=!0}return!0};
infinityrt_scene.prototype.groupSet=function(a,b,c){var d=this._grps[a.toLowerCase()];if("undefined"==typeof d)return!1;if("State"==d.type&&0<d.parent.length)return this.groupSet(d.parent,b,c);for(var e=0;e<d.members.length;e++)this.instanceSet(d.members[e],b,c);if("Display"==d.type&&-1!=a.indexOf("#")){d=a.split("#");c=1==c?0:1;for(var f in this._grps)if(-1!=f.indexOf("#"+d[1])&&f!=a){var g=this._grps[f];for(e=0;e<g.members.length;e++)this.instanceSet(g.members[e],b,c)}}return!0};
infinityrt_scene.prototype.groupPromiseStateFinish=function(a){this.pendingGroupStates[a].meshArray=[];for(var b=0;b<this.pendingGroupStates[a].invisibleArray.length;b++)this.recurseSetVisible(this.pendingGroupStates[a].invisibleArray[b],0);this.pendingGroupStates[a].invisibleArray=[];for(b=0;b<this.pendingGroupStates[a].visibleArray.length;b++)this.recurseSetVisible(this.pendingGroupStates[a].visibleArray[b],1);this.pendingGroupStates[a].visibleArray=[];for(b=0;b<this.pendingGroupStates[a].matAssignArray.length;b++)this.pendingGroupStates[a].matAssignArray[b].inst&&
this.pendingGroupStates[a].matAssignArray[b].inst.matAssign(this.pendingGroupStates[a].matAssignArray[b].matid);this.pendingGroupStates[a].matAssignArray=[]};
infinityrt_scene.prototype.groupPromiseStateDownloaded=function(a){var b=!0,c=!0;if(this.pendingGroupStates[a].temporal)return!1;if(!this.pendingGroupStates[a].error)for(var d=0;d<this.pendingGroupStates[a].meshArray.length;d++)0<=this.pendingGroupStates[a].meshArray[d].tex_id?!this.pendingGroupStates[a].meshArray[d].loaded&&this.pendingGroupStates[a].meshArray[d].smartDefer&&(c=!1):this.pendingGroupStates[a].meshArray[d].meshloaded||(b=!1);return b&&c?!0:!1};
var queuePromiseStates=[],doNextPromise=function(a,b){a.WaitForAllGroupStates=!0;a.groupPromiseApplyState(queuePromiseStates[0].name,queuePromiseStates[0].opts).then(function(c){c=queuePromiseStates[0].name;var d=queuePromiseStates[0].cb;queuePromiseStates.shift();d&&(a.debug&&console.log("Executing cb for:",c),d(a,c));queuePromiseStates.length&&doNextPromise(a,b)})};
infinityrt_scene.prototype.groupPromiseApplyStatesSequentially=function(a,b,c){if(Array.isArray(a)&&0!=a.length){this.debug&&console.log("groupPromiseApplyStatesSequentially:",a);c=Date.now();var d=!0;queuePromiseStates.length&&(d=!1);for(var e=0;e<a.length;e++){this.pendingGroupStates[a[e]]||(this.pendingGroupStates[a[e]]={},this.pendingGroupStates[a[e]].temporal=!0,this.pendingGroupStates[a[e]].processed=!1,this.pendingGroupStates[a[e]].meshArray=[],this.pendingGroupStates[a[e]].invisibleArray=
[],this.pendingGroupStates[a[e]].visibleArray=[]);var f={};f.name=a[e];e==a.length-1&&(f.cb=b);queuePromiseStates.push(f)}d&&doNextPromise(this,c)}};
function nonDeferredGroupApplyStateElems(a,b,c,d){if(b.props.sg){for(var e=b.props.sg.split("|"),f=1;f<e.length;f+=2){var g=e[f],h=e[f+1];if("gam"==g)a.gamma=parseFloat(h);else if("hcp"==g)a.highlightcompression=parseFloat(h);else if("vig"==g)a.vignetting=parseFloat(h);else if("ccb"==g)a._cc_brightness=parseFloat(h);else if("ccc"==g)a._cc_contrast=parseFloat(h);else if("ccs"==g)a._cc_saturation=parseFloat(h);else if("cct"==g)a._cc_tint=h.split(",");else if("lut"==g)for(var k in a._Material_ref);else"fsc"==
g?a.fadedReflectionsScale=parseFloat(h):"fof"==g?a.fadedReflectionsOffset=parseFloat(h):"fpo"==g?a.fadedReflectionsPow=parseFloat(h):"fco"==g&&(a.fadedReflectionsColor=h.split(","))}a.updateAllMaterials()}b.props.ev&&a.ChangeAllEnvmapsTo(b.props.ev);if(b.props.lg)for(e=0;e<b.props.lg.length;e++)if(g=b.props.lg[e],0<=g.idx&&g.idx<=a._lights.length&&(f=g.v.split("|"),g=a._lights[g.idx]))g.data=[f[0],f[1],f[2],f[3],f[4],f[5],f[6],f[7],f[8],f[9],f[10],f[11],f[12],f[13],f[14],f[15]],g.roughdelta=f[16],
a.uniBlockLightsDirty=!0;b.props.cam&&"(none)"!=b.props.cam&&(a.skin&&a.skin.ui&&a.skin.ui.positions&&a.skin.ui.positions[b.props.cam]?(c=void 0,b=a.skin.ui.positions[b.props.cam],b.fovy&&a.fovy!=b.fovy&&(c={fovy:b.fovy}),5<b.pos.length&&(c||(c={}),c.zang=b.pos[5]),a.gotoPosInTime(b.pos[0],b.pos[1],b.pos[2],b.pos[3],b.pos[4],d,void 0,void 0,c)):console.warn("***Warning: Unable to apply linked camera '"+b.props.cam+"' to state '"+c+"' as scene.skin property is undefined"))}
infinityrt_scene.prototype.groupPromiseApplyState=function(a,b){var c=this,d=new Promise(function(e,f){var g=[],h=[],k=[],l=[],m=c._grps[a.toLowerCase()];c.debug&&console.log("FuturegroupPromiseApplyState (DEFER) "+a);var n=a.split(":");var p=!1;var q=void 0!=b&&void 0!=b.preload?!0:!1;"undefined"==typeof m&&q&&(m=a.substring(0,a.indexOf("_preload")),m=c._grps[m.toLowerCase()]);c.activeImportrefs[n[0]]&&(c.debug&&console.log("Saving state for future use "+a),c.stateTracker.push({name:a,opts:b}),c.pendingGroupStates[a]||
(c.pendingGroupStates[a]={}),c.pendingGroupStates[a].processed=!0,c.pendingGroupStates[a].promise=d,c.pendingGroupStates[a].resolve=e,c.pendingGroupStates[a].reject=f,c.pendingGroupStates[a].meshArray=g,c.pendingGroupStates[a].invisibleArray=h,c.pendingGroupStates[a].visibleArray=k,c.pendingGroupStates[a].matAssignArray=l,c.pendingGroupStates[a].error=!0,c.pendingGroupStates[a].temporal=!1,c.inStateApply=!1,e(!0),c.visibilityChanged=!0,p=c._hierarchyDirty=!0);"undefined"==typeof m&&(c.debug&&console.log("WARNING. UNDEFINED groupPromiseApplyState "+
a),c.WaitForAllGroupStates&&(c.pendingGroupStates[a]||(c.pendingGroupStates[a]={}),c.pendingGroupStates[a].processed=!0,c.pendingGroupStates[a].promise=d,c.pendingGroupStates[a].resolve=e,c.pendingGroupStates[a].reject=f,c.pendingGroupStates[a].meshArray=g,c.pendingGroupStates[a].invisibleArray=h,c.pendingGroupStates[a].visibleArray=k,c.pendingGroupStates[a].matAssignArray=l,c.pendingGroupStates[a].error=!0,c.pendingGroupStates[a].temporal=!1,c.inStateApply=!1,e(!0),c.visibilityChanged=!0,c._hierarchyDirty=
!0),p=!0);if(!p){c.inStateApply=!0;for(n=0;n<m.props.vs.length;n++){p=m.props.vs[n];var t=p.n;m.refEnv&&(t=m.refEnv+":"+t);if(t=c.getInstanceByNameIncEnv(t,c))p.v&&c.smartDeferral?(k.push(t),c.recurseSetMeshSmartDefer(t,g)):p.v||(p=[],c.recurseGetPendingMeshObjects(t,p),p.length||h.push(t))}p=void 0!=b&&void 0!=b.time?b.time:0;for(n=0;n<m.props.an.length;n++){t=m.props.an[n];var u=t.n;m.refEnv&&(u=m.refEnv+":"+u);void 0!=b&&"cascade"==b.animmode?c.animPlayAllChildrenInTime(u,t.v,p):c.animPlayInTime(u,
t.v,p)}for(n=0;n<m.props.ma.length;n++){var r=m.props.ma[n];t=r.n;u=r.v;var y=t.indexOf("~");-1!=y&&(t=t.slice(0,y));if(void 0==b||void 0==b.skipma||-1==b.skipma.indexOf(r.n)){m.refEnv&&(t=m.refEnv+":"+t,u=m.refEnv+":"+u);r=0==k.length&&m.props.vs.length;u&&c.getInstanceByNameIncEnv(u,c);var v=c.materialAssignInstanceDefer(t,u,r?void 0:g,r?void 0:!0,!0);"object"!=typeof v||q||-1==l.findIndex(function(w){return w.inst.name==v.inst.name&&w.matid==v.matid})&&l.push(v)}}nonDeferredGroupApplyStateElems(c,
m,a,p);q&&(k=[],h=[],l=[]);c.pendingGroupStates[a]={};c.pendingGroupStates[a].processed=!1;c.pendingGroupStates[a].promise=d;c.pendingGroupStates[a].resolve=e;c.pendingGroupStates[a].reject=f;c.pendingGroupStates[a].meshArray=g;c.pendingGroupStates[a].invisibleArray=h;c.pendingGroupStates[a].visibleArray=k;c.pendingGroupStates[a].matAssignArray=l;c.pendingGroupStates[a].temporal=!1;c.inStateApply=!1;c.visibilityChanged=!0;c._hierarchyDirty=!0}});c.clearRefine();return d};
infinityrt_scene.prototype.stateHasDeferredObjects=function(a,b){var c=this._grps[a.toLowerCase()];a=a.split(":");if(!this.activeImportrefs[a[0]]&&"undefined"!=typeof c&&this.smartDeferral){var d=!1;a=[];var e=!1;for(d=0;d<c.props.vs.length;d++){var f=c.props.vs[d];var g=f.n;c.refEnv&&(g=c.refEnv+":"+g);if((g=this.getInstanceByNameIncEnv(g,this))&&f.v&&this.smartDeferral&&(e=!0,this.recurseGetPendingMeshObjects(g,a),a.length))break}if(!a.length&&e)for(d=0;d<c.props.ma.length;d++){g=c.props.ma[d];
f=g.n;e=g.v;var h=f.indexOf("~");-1!=h&&(f=f.slice(0,h));if(void 0==b||void 0==b.skipma||-1==b.skipma.indexOf(g.n))if(c.refEnv&&(f=c.refEnv+":"+f,e=c.refEnv+":"+e),g=this.getInstanceByNameIncEnv(e,this),null!=g&&(f=this._Material_ref[f],null!=f)){for(g=0;g<f.textures.length;g++){var k=f.textures[g];if(k&&k.defer&&!k.smartDefer&&!k.downloadStarted&&!k.loaded&&-1==this.smartDeferTextures.findIndex(function(l){return l==k})){a.push(k);break}}if(a.length)break}}d=0<a.length;a=[];return d}return!1};
infinityrt_scene.prototype.setMaterialTransition=function(a,b,c){this.EndMaterialAnim();this.resetSecondaryMatList();this.animateSecondaryMats=a;this._animateSecondaryMatsActive=!1;"undefined"!=typeof b?this.matAnim.setReverseMode(b):this.matAnim.setReverseMode(!1);"undefined"!=typeof c&&this.matAnim.setDuration(c)};infinityrt_scene.prototype.resetSecondaryMatList=function(){this._lstSecondaryMatObjs=[];this._lstSecondaryMatQueue=[];this.matAnim.reset()};
infinityrt_scene.prototype.prepareSecondaryMat=function(a,b){this._Materials[b]&&(this._Materials[b].secondaryalphacolor=0);if(a=this.getInstanceByNameIncEnv(a,!0))a.secondaryMatAssign(b),this._lstSecondaryMatQueue.push(a);return!0};infinityrt_scene.prototype.animateSecondaryMatList=function(){for(var a=0;a<this._lstSecondaryMatQueue.length;a++)this._lstSecondaryMatObjs.push(this._lstSecondaryMatQueue[a]);this._lstSecondaryMatQueue=[];this._animateSecondaryMatsActive=!0;this.matAnim.play();this.clearRefine()};
infinityrt_scene.prototype.groupApplyState=function(a,b,c){var d=this._grps[a.toLowerCase()];this.logStates&&console.info("** FuturegroupApplyState "+a);var e=a.split(":");if(this.activeImportrefs[e[0]])return this.debug&&console.log("Saving state for future use "+a),this.stateTracker.push({name:a,opts:b}),c&&(this.debug&&console.log("Executing immediate cb for:",a),c(this,a)),!1;if("undefined"==typeof d)return c&&(this.debug&&console.log("Executing immediate cb for:",a),c(this,a)),!1;if(this.smartDeferral){e=
!1;var f=[],g=!1;for(e=0;e<d.props.vs.length;e++){var h=d.props.vs[e];var k=h.n;d.refEnv&&(k=d.refEnv+":"+k);if((k=this.getInstanceByNameIncEnv(k,this))&&h.v&&this.smartDeferral&&(g=!0,this.recurseGetPendingMeshObjects(k,f),f.length))break}if(!f.length&&g)for(e=0;e<d.props.ma.length;e++){k=d.props.ma[e];h=k.n;g=k.v;var l=h.indexOf("~");-1!=l&&(h=h.slice(0,l));if(void 0==b||void 0==b.skipma||-1==b.skipma.indexOf(k.n))if(d.refEnv&&(h=d.refEnv+":"+h,g=d.refEnv+":"+g),k=this.getInstanceByNameIncEnv(g,
this),null!=k&&(h=this._Material_ref[h],null!=h)){for(k=0;k<h.textures.length;k++){var m=h.textures[k];if(m&&m.defer&&!m.smartDefer&&!m.downloadStarted&&!m.loaded&&-1==this.smartDeferTextures.findIndex(function(n){return n==m})){f.push(m);break}}if(f.length)break}}e=0<f.length;f=[];if(e){d=Date.now();e=!0;queuePromiseStates.length&&(e=!1);this.WaitForAllGroupStates=!0;void 0!=b&&void 0!=b.preload&&(a+="_preload");this.pendingGroupStates[a]||(this.pendingGroupStates[a]={},this.pendingGroupStates[a].temporal=
!0,this.pendingGroupStates[a].processed=!1,this.pendingGroupStates[a].meshArray=[],this.pendingGroupStates[a].invisibleArray=[],this.pendingGroupStates[a].visibleArray=[],this.pendingGroupStates[a].matAssignArray=[]);f={};f.name=a;f.opts=b;c&&(f.cb=c);queuePromiseStates.push(f);e&&doNextPromise(this,d);return}}this.inStateApply=!0;for(e=0;e<d.props.vs.length;e++)if(h=d.props.vs[e],k=h.n,d.refEnv&&(k=d.refEnv+":"+k),k=this.getInstanceByNameIncEnv(k,this))this.recurseSetVisible(k,h.v),h.v&&this.smartDeferral&&
this.recurseSetMeshSmartDefer(k);f=void 0!=b&&void 0!=b.time?b.time:0;for(e=0;e<d.props.an.length;e++)h=d.props.an[e],k=h.n,d.refEnv&&(k=d.refEnv+":"+k),void 0!=b&&"cascade"==b.animmode?this.animPlayAllChildrenInTime(k,h.v,f):this.animPlayInTime(k,h.v,f);for(e=0;e<d.props.ma.length;e++)if(k=d.props.ma[e],h=k.n,g=k.v,l=h.indexOf("~"),-1!=l&&(h=h.slice(0,l)),void 0==b||void 0==b.skipma||-1==b.skipma.indexOf(k.n))d.refEnv&&(h=d.refEnv+":"+h,g=d.refEnv+":"+g),this.animateSecondaryMats?this.secondaryMaterialAssignInstance(h,
g):this.materialAssignInstance(h,g);nonDeferredGroupApplyStateElems(this,d,a,f);this.animateSecondaryMats&&this.animateSecondaryMatList();this.inStateApply=!1;this._hierarchyDirty=this.visibilityChanged=!0;this.clearRefine();c&&(this.debug&&console.log("Executing immediate cb for:",a),c(this,a));return!0};
infinityrt_scene.prototype.groupApplyStateVisibilities=function(a){this.logStates&&console.info("groupApplyStateVisibilities "+a);var b,c=this._grps[a.toLowerCase()];if("undefined"==typeof c)return!1;for(a=0;a<c.props.vs.length;a++){var d=c.props.vs[a];0!=d.v&&(b=this.getInstanceByNameIncEnv(d.n,this))&&this.recurseSetVisible(b,d.v)}return!0};
infinityrt_scene.prototype.materialAssignInstance=function(a,b,c,d){this.logStates&&console.info("     materialAssignInstance mName: "+a+", iName:"+b);b=this.getInstanceByNameIncEnv(b,this);if(null==b)return!1;a=this._Material_ref[a];if(null==a)return!1;for(var e=this._Materials.indexOf(a),f=0;f<a.textures.length;f++){var g=a.textures[f];d&&g&&g.defer&&!g.smartDefer&&!g.downloadStarted&&!g.loaded&&-1==this.smartDeferTextures.findIndex(function(h){return h==g})&&(g.smartDefer=1,this.smartDeferTextures.push(g),
c&&c.push(g))}return b.matAssign(e)};
infinityrt_scene.prototype.secondaryMaterialAssignInstance=function(a,b,c,d){this.logStates&&console.info("     materialAssignInstance mName: "+a+", iName:"+b);if(null==this.getInstanceByNameIncEnv(b,this))return!1;a=this._Material_ref[a];if(null==a)return!1;for(var e=this._Materials.indexOf(a),f=0;f<a.textures.length;f++){var g=a.textures[f];d&&g&&g.defer&&!g.smartDefer&&!g.downloadStarted&&!g.loaded&&-1==this.smartDeferTextures.findIndex(function(h){return h==g})&&(g.smartDefer=1,this.smartDeferTextures.push(g),
c&&c.push(g))}if(this.CanRender(a,!1))return this.prepareSecondaryMat(b,e)};
infinityrt_scene.prototype.materialAssignInstanceDefer=function(a,b,c,d,e){b=this.getInstanceByNameIncEnv(b,this);if(null==b)return!1;var f=this._Material_ref[a];if(null==f)return!1;a=this._Materials.indexOf(f);for(var g=0;g<f.textures.length;g++){var h=f.textures[g];d&&h&&h.defer&&!h.smartDefer&&!h.downloadStarted&&!h.loaded&&-1==this.smartDeferTextures.findIndex(function(k){return k==h})&&(h.smartDefer=1,this.smartDeferTextures.push(h),c&&c.push(h))}c={};c.inst=b;c.matid=a;return e?c:b.matAssign(a)};
infinityrt_scene.prototype.materialAssignGeometry=function(a,b){b=this.mapMeshFiles[b];if(null==b)return!1;a=this._Material_ref[a];if(null==a)return!1;b.currentMaterial=this._Materials.indexOf(a);return!0};
infinityrt_scene.prototype.applyConfiguration=function(a,b){if("string"!=typeof a)return!1;var c=a.toLowerCase();c=this._cfgs[c];if("undefined"==typeof c)return console.log("Unknown configuration: ",a),!1;a=c.members?c.members.length:0;for(var d=0;d<a;d++)this.groupApplyState(c.members[d],{},d==a-1?b:void 0);return!0};
infinityrt_scene.prototype.prepareObject=function(a){a=this.getInstanceByNameIncEnv(a,this);if(null!=a&&this.smartDeferral){if(!a.smartDefer){var b=[];this.recurseGetPendingMeshObjects(a,b);b.length&&(this.recurseSetMeshSmartDefer(a),this.visibilityChanged=!0)}return!0}return!1};infinityrt_scene.prototype.instanceGet=function(a,b){a=this.getInstanceByNameIncEnv(a,this);return null==a?null:a[b]};
infinityrt_scene.prototype.setParam=function(a,b){return"nav.enable"==a?(this._nav._navEnabled=b,!0):"nav.mode"==a?(this._nav._navMode=b,!0):"nav.decay"==a?(this._nav._navDecay=b,!0):"nav.speed"==a?(this._nav._navSpeed=b,!0):"nav.mindist"==a?(this._nav._navMinDolly=b,!0):"nav.maxdist"==a?(this._nav._navMaxDolly=b,!0):"nav.znearmin"==a?(this._zNearMin=b,!0):!1};
infinityrt_scene.prototype.getParam=function(a,b){if("screen.width"==a)return this.viewwidth;if("screen.height"==a)return this.viewheight;if("platform"==a)return"webgl"};infinityrt_scene.prototype.materialReplace=function(a,b){a=this._Material_ref[a];if(null==a)return 0;b=this._Material_ref[b];if(null==b)return 0;var c=this._Materials.indexOf(a);if(-1==c)return 0;var d=this._Materials.indexOf(b);if(-1==d)return 0;this.isChrome||(a.compile(),b.compile());this._Materials[c]=b;this._Materials[d]=a;return 1};
infinityrt_scene.prototype.getOutstandingJobs=function(){return this._outstandingjobs+this.prepareTexId};infinityrt_scene.prototype.getTotalJobs=function(){return this._totaljobs};infinityrt_scene.prototype.isAllLoadingComplete=function(a){var b=this._outstandingjobs+this.prepareTexId;null!=a&&null!=this._lstDeferredGrps&&(b+=this._lstDeferredGrps[a]._outstandingdeferred);return 0==b};
infinityrt_scene.prototype.ReverseOutGotoPosValues=function(a){var b={xang:0,yang:0,xpan:0,ypan:0,dolly:0},c=[a[8],0,a[10]];c=infinityrt_normalize(c);b.xang=Math.atan2(c[0],c[2]);c=[a[8],a[9],a[10]];c=infinityrt_normalize(c);b.yang=-(Math.acos(c[1])-M_HALF_PI);var d=[a[0],a[1],a[2]],e=[a[4],a[5],a[6]];c=[a[8],a[9],a[10]];a=[a[12],a[13],a[14]];b.dolly=infinityrt_dp(c,a);b.xpan=infinityrt_dp(d,a);b.ypan=infinityrt_dp(e,a);return b};
infinityrt_scene.prototype.RestrictViewSpace=function(a){a[0]<this._vecCameraLimitMin[0]?a[0]=this._vecCameraLimitMin[0]:a[0]>this._vecCameraLimitMax[0]&&(a[0]=this._vecCameraLimitMax[0]);a[1]<this._vecCameraLimitMin[1]?a[1]=this._vecCameraLimitMin[1]:a[1]>this._vecCameraLimitMax[1]&&(a[1]=this._vecCameraLimitMax[1]);a[2]<this._vecCameraLimitMin[2]?a[2]=this._vecCameraLimitMin[2]:a[2]>this._vecCameraLimitMax[2]&&(a[2]=this._vecCameraLimitMax[2]);return a};
infinityrt_scene.prototype.CheckParseComplete=function(){var a=this;0<this._outstandingjobs?setTimeout(function(){a.CheckParseComplete()},200):((null!=this._rootEnv||this._activeapply)&&this.recalcSceneRadius(),this.visibilityChanged=!0,this.mapMaterialsEnv=void 0,this._activeapply=!1,void 0!==a.fnParseComplete&&null!==a.fnParseComplete&&a.fnParseComplete(),a.clearRefine())};infinityrt_scene.prototype.CheckTextureDownloads=function(){if(this.manageTexs)for(var a=0;a<this._TextureObjs.length;a++)this._TextureObjs[a].startFileDownloads()};
infinityrt_scene.prototype.getPrevHDRIName=function(){var a=this._Materials[0];return a.textures[TEXTURE_MAP_SPECULARENV].name.substring(0,a.textures[TEXTURE_MAP_SPECULARENV].name.length-9)};
infinityrt_scene.prototype.ChangeAllEnvmapsTo=function(a,b){var c=this.getPrevHDRIName();if(c!=a){for(var d=0;d<this._Materials.length;d++){var e=this._Materials[d];if(b){var f=e.getHDRIName();if(null==f||f!=b)continue}e.name.startsWith(c+"_")&&(delete this._Material_ref[e.name],e.name=e.name.replace(c+"_",a+"_"),this._Material_ref[e.name]=e);"undefined"!=typeof e.derivs&&e.ApplyDeriv(a);e.ChangeEnvmaps(c,a)}this.storedtextures&&(this.storedtextures.curHDRIName=a);this.CheckTextureDownloads()}};
infinityrt_scene.prototype.FrameDirty=function(){this.uniBlockFrameDirty=!0;if(1==this._glVersionNum)for(var a in this._ShaderCache)this._ShaderCache[a].frameDirty=!0;this._prog_black&&(this._prog_black.frameDirty=!0);this._shader_mesh_depth&&(this._shader_mesh_depth.frameDirty=!0);this._shader_mesh_depthvalues&&(this._shader_mesh_depthvalues.frameDirty=!0)};
infinityrt_scene.prototype.MeshQueue=function(a){500<this.meshq.requests||10<this.meshq.launchedthisframe?this.meshq.line.push(a):(a._fileSize||(this.meshq.requests++,this.meshq.launchedthisframe++),this.downloadMesh(a))};infinityrt_scene.prototype.MeshQueueComplete=function(){if(!(10<this.meshq.launchedthisframe))if(0<this.meshq.line.length){var a=this.meshq.line.shift();this.meshq.launchedthisframe++;this.downloadMesh(a)}else this.meshq.requests--};
infinityrt_scene.prototype.MeshQueueCycle=function(){for(var a=this.meshq.launchedthisframe=0;10>a&&0<this.meshq.line.length;a++){var b=this.meshq.line.shift();this.meshq.requests++;this.meshq.launchedthisframe++;this.downloadMesh(b)}};
infinityrt_scene.prototype.downloadMesh=function(a,b){if(a._fileSize)if("undefined"==typeof this.mapBundleMeshFiles[a._meshURL])this.mapBundleMeshFiles[a._meshURL]={},this.mapBundleMeshFiles[a._meshURL]._scene=this,this.mapBundleMeshFiles[a._meshURL].meshDownloadStarted=!0;else{if(this.mapBundleMeshFiles[a._meshURL].meshDownloaded)return a.compresseddataresponse=this.mapBundleMeshFiles[a._meshURL].compresseddataresponse.slice(a._fileOffset,a._fileOffset+a._fileSize),a.compresseddata=new Uint8Array(a.compresseddataresponse),
this.decodeGeometry(a),!0;if(this.mapBundleMeshFiles[a._meshURL].error)return!1;setTimeout(function(){a._scene.mapBundleMeshFiles[a._meshURL]._scene.downloadMesh(a,!0)},10);return!0}var c=new XMLHttpRequest;c._meshURL=a._meshURLFull;c._strippedMeshURL=a._meshURL;c._fileOffset=a._fileOffset;c._fileSize=a._fileSize;a.meshDownloadStarted=!0;c._mesh=a;c.open("GET",c._meshURL,!0);c.responseType="arraybuffer";c.blksd=a.blksd;window.infinityrt_options&&!0===window.infinityrt_options.withCredentials&&(c.withCredentials=
!0);c.onerror=function(){if(3>c._mesh.retries)return c._mesh.retries++,setTimeout(function(){c._mesh._scene.downloadMesh(c._mesh,!0)},500),!0;var d="Error: "+c._meshURL+" failed to load after retries";console.error(d);c._mesh._scene.fnFatalError&&c._mesh._scene.fnFatalError("LoadFailure",d);"undefined"!=typeof c._mesh._scene.mapBundleMeshFiles[c._strippedMeshURL]&&(c._mesh._scene.mapBundleMeshFiles[c._strippedMeshURL].error=!0);return!1};c.onload=function(d){if(c._mesh._scene._usingwkwebview||200<=
c.status&&299>=c.status){if(!c._mesh._scene.precache){!c._mesh._scene.selfcheck||c._mesh._scene.selfcheck.gzip||c._mesh._scene.CheckContentEncoding(c)||(console.log("***Warning: Content has no encoding, recommended min is 'gzip'"),c._mesh._scene.selfcheck.gzip=!0);if("undefined"!=typeof c._mesh._scene.mapBundleMeshFiles[c._strippedMeshURL]){c._mesh._scene.mapBundleMeshFiles[c._strippedMeshURL].compresseddataresponse=c.response;c._mesh._scene.mapBundleMeshFiles[c._strippedMeshURL].compresseddata=new Uint8Array(c.response);
if(0!=c.blksd){d=new ScrRand(c.blksd);for(var e=c.response.byteLength-c.response.byteLength%4,f,g=4,h=0;h<e;h++)3<g&&(f=d.uint32(),g=0),c._mesh._scene.mapBundleMeshFiles[c._strippedMeshURL].compresseddata[h]^=f>>>8*g++&255}c._mesh.compresseddataresponse=c.response.slice(c._mesh._fileOffset,c._mesh._fileOffset+c._mesh._fileSize);c._mesh.compresseddata=new Uint8Array(c._mesh.compresseddataresponse)}else if(c._mesh.compresseddataresponse=c.response,c._mesh.compresseddata=new Uint8Array(c.response),0!=
c.blksd)for(d=new ScrRand(c.blksd),e=c.response.byteLength-c.response.byteLength%4,g=4,h=0;h<e;h++)3<g&&(f=d.uint32(),g=0),c._mesh.compresseddata[h]^=f>>>8*g++&255;c._mesh._scene.selfcheck&&(c._mesh._scene.selfcheck.geom[0]++,c._mesh._scene.selfcheck.geom[1]+=parseInt(c.getResponseHeader("Content-Length")));"undefined"!=typeof c._mesh._scene.mapBundleMeshFiles[c._strippedMeshURL]?(c._mesh._scene.mapBundleMeshFiles[c._strippedMeshURL].meshDownloaded=!0,c._mesh._scene.decodeGeometry(c._mesh)):c._mesh.defer&&
"_auto_"!=c._mesh.defer||setTimeout(function(){c._mesh._scene.decodeGeometry(c._mesh)},300)}}else{if(3>c._mesh.retries)return c._mesh.retries++,setTimeout(function(){c._mesh._scene.downloadMesh(c._mesh)},500),!0;f="Error: "+c._meshURL+" failed to load after retries";console.error(f);c._mesh._scene.fnFatalError&&c._mesh._scene.fnFatalError("LoadFailure",f);return!1}};c.send("")};infinityrt_scene.prototype.OverrideProgTex=function(a,b){(a=this._Texture_ref[a])&&a.overridertex(b)};
infinityrt_scene.prototype.getAdjFoV2=function(){var a=null!=this.drawFBO?this.drawFBO._nFBOWidth:this.viewwidth+(this._projectionOffset.x?Math.abs(2*this._projectionOffset.x):0),b=null!=this.drawFBO?this.drawFBO._nFBOHeight:this.viewheight+(this._projectionOffset.y?Math.abs(2*this._projectionOffset.y):0);if(this._flipFoVonAspectSwap&&b>a){var c=this.fovy/180*M_PI;a=2*Math.atan(b/a*Math.tan(.5*c))}else c=this.fovy/180*M_PI,a=2*Math.atan(a/b*Math.tan(.5*c));return a/M_PI*180};
infinityrt_scene.prototype.CalcFrustumClip=function(){this.clipPlanes.length=0;var a=[this.matView[0],this.matView[1],this.matView[2]],b=[this.matView[4],this.matView[5],this.matView[6]],c=[-this.matView[8],-this.matView[9],-this.matView[10]],d=this.camPosGlobal,e=this.getAdjFoV2();this.xrframe&&(e=MatrixInvert(this.children[0].matrix),a=infinityrt_normalize(PointTransform([a[0],a[1],a[2],0],e)),b=infinityrt_normalize(PointTransform([b[0],b[1],b[2],0],e)),c=infinityrt_normalize(PointTransform([c[0],
c[1],c[2],0],e)),d=PointTransform([d[0],d[1],d[2],1],e),e=360*Math.atan(1/this.xrprojmatrix[5])/M_PI);var f=c;this.clipPlanes.push({norm:f,absnorm:[Math.abs(f[0]),Math.abs(f[1]),Math.abs(f[2])],pos:infinityrt_dp(d,f)});f=Math.tan(.5*e/180*M_PI);e=(null!=this.drawFBO?this.drawFBO._nFBOWidth:this.viewwidth+(this._projectionOffset.x?Math.abs(2*this._projectionOffset.x):0))/(null!=this.drawFBO?this.drawFBO._nFBOHeight:this.viewheight+(this._projectionOffset.y?Math.abs(2*this._projectionOffset.y):0))*
f;f=infinityrt_vertex_scladd([0,0,0],b,f);var g=infinityrt_vertex_scladd([0,0,0],a,e);b=infinityrt_vertex_add(c,f);b=infinityrt_vertex_sub(b,g);a=infinityrt_vertex_sub(c,f);a=infinityrt_vertex_sub(a,g);e=infinityrt_vertex_add(c,f);e=infinityrt_vertex_add(e,g);c=infinityrt_vertex_sub(c,f);c=infinityrt_vertex_add(c,g);f=infinityrt_crossProduct(a,b);this.clipPlanes.push({norm:f,absnorm:[Math.abs(f[0]),Math.abs(f[1]),Math.abs(f[2])],pos:infinityrt_dp(d,f)});f=infinityrt_crossProduct(e,c);this.clipPlanes.push({norm:f,
absnorm:[Math.abs(f[0]),Math.abs(f[1]),Math.abs(f[2])],pos:infinityrt_dp(d,f)});b=infinityrt_crossProduct(b,e);this.clipPlanes.push({norm:b,absnorm:[Math.abs(b[0]),Math.abs(b[1]),Math.abs(b[2])],pos:infinityrt_dp(d,b)});c=infinityrt_crossProduct(c,a);this.clipPlanes.push({norm:c,absnorm:[Math.abs(c[0]),Math.abs(c[1]),Math.abs(c[2])],pos:infinityrt_dp(d,c)})};
infinityrt_scene.prototype.b64toBlob=function(a,b,c){b=b||"";c=c||512;a=atob(a);for(var d=[],e=0;e<a.length;e+=c){for(var f=a.slice(e,e+c),g=Array(f.length),h=0;h<f.length;h++)g[h]=f.charCodeAt(h);f=new Uint8Array(g);d.push(f)}return new Blob(d,{type:b})};infinityrt_scene.prototype.SnapshotCanvas=function(a,b,c){a=a.toDataURL(b,c).split(";");return this.b64toBlob(a[1].split(",")[1],a[0].split(":")[1])};
infinityrt_scene.prototype.textureSkipProgressive=function(a){a=this._Texture_ref[a];if("undefined"==typeof a)return!1;a._img_path=a._lvlfilenames[0];for(var b=0;b<this._TextureToLvl0.length;b++)if(this._TextureToLvl0[b]==a){this._TextureToLvl0.splice(b,1);break}return!0};function ElemtoString(a){return a instanceof Error?a.message:"string"===typeof a?a:JSON.stringify(a)}
infinityrt_scene.prototype.printToSCDiv=function(){var a=Array.prototype.slice.call(arguments,0).map(ElemtoString).join(" "),b=window.SClogTo.textContent;window.SClogTo.textContent=b+a+"\n";this.selfcheckText=b+a+"\n"};infinityrt_scene.prototype.downloadSelfCheck=function(a){var b=document.createElement("a");b.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(this.selfcheckText));b.setAttribute("download",a);b.style.display="none";document.body.appendChild(b);b.click();document.body.removeChild(b)};
infinityrt_scene.prototype.downloadSelfCheckCSV=function(a){var b=document.createElement("a");b.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(this.selfcheckCSV));b.setAttribute("download",a);b.style.display="none";document.body.appendChild(b);b.click();document.body.removeChild(b)};
infinityrt_scene.prototype.printSelfCheckBestPractices=function(){this.bestPractice.get3DCanvasSize||console.warn("Best Practices. This project doesn't use get3DCanvasSize function!");this.zprepass||console.warn("Best Practices. This project doesn't use Z PrePass!");this.fenceMode||console.warn("Best Practices. This project doesn't use FenceSync! Check if the device is compatible and/or it has been intentionally disabled.")};
infinityrt_scene.prototype.performSelfCheck=function(){try{this.selfcheck=null;var a=new URL(window.location.href),b=a.searchParams.get("selfcheck");if(b){performance&&"function"==typeof performance.setResourceTimingBufferSize?performance.setResourceTimingBufferSize(2048):console.log("Warning: No comprehensive resource data available for self check");var c=console.log.bind(console),d=console.error.bind(console),e=console.warn.bind(console);window.SClogTo=function(){var g=document.getElementById("console-log-div");
g||(g=document.createElement("fieldset"),g.id="console-log-div",document.body.appendChild(g));g.classList.add("console-log-div");var h=g.style;h.width="96%";h.fontFamily="monospace";h.whiteSpace="pre-line";h.border="1px solid black";h.borderRadius="5px";h.padding="5px 10px";h.zIndex="999";h.position="absolute";h.left=h.top="0px";h.backgroundColor="white";h.color="black";h.maxWidth="100%";h=document.createTextNode("Self Check");var k=document.createElement("legend");k.appendChild(h);g.appendChild(k);
h=document.createElement("div");h.id="console-log-div-text";h.style.overflow="auto";h.style.overflowWrap="break-all";g.appendChild(h);return h}();this.selfcheck={geomformat:!1,http2:!1,gzip:!1,param:b,geom:[0,0,0],tex:[0,0],texreqs:0,alltex:!0};var f=this;"erroronly"!=this.selfcheck.param&&(console.log=function(){c.apply(null,arguments);f.printToSCDiv.apply(f,arguments)});console.error=function(){d.apply(null,arguments);var g=Array.prototype.slice.call(arguments,0);g.unshift("ERROR:");f.printToSCDiv.apply(f,
g)};console.warn=function(){e.apply(null,arguments);var g=Array.prototype.slice.call(arguments,0);g.unshift("WARNING:");f.printToSCDiv.apply(f,g)};window.addEventListener("error",function(g){f.printToSCDiv("EXCEPTION:",g.message+"\n  "+g.filename,g.lineno+":"+g.colno)})}a.searchParams.get("fps")&&(this.fpsstats=new Stats,this.fpsstats.showPanel(0),document.body.appendChild(this.fpsstats.dom))}catch(g){}};
infinityrt_scene.prototype.DisplayFPS=function(){this.fpsstats||(this.fpsstats=new Stats,this.fpsstats.showPanel(0),document.body.appendChild(this.fpsstats.dom))};infinityrt_scene.prototype.AddCallback=function(a,b){try{switch(a){case "ALL_GEOMETRY_DECODED":this._fnOnAllDecodedFirst=b?b:NULL;break;case "POST_INITIAL_STATE":this._fnOnInitialStateAfter=b?b:NULL;break;default:console.log("WARNING. AddCallback: Unrecognized callbackType parameter:",a)}}catch(c){console.log(c)}};
infinityrt_scene.prototype.getPendingDeferJobs=function(){var a=0;if(this.smartDeferVisibilityArray.length)for(var b=0;b<this.smartDeferVisibilityArray.length;b++)0<=this.smartDeferVisibilityArray[b].tex_id?this.smartDeferVisibilityArray[b].smartDefer&&a++:this.smartDeferVisibilityArray[b].meshloaded||a++;return a};
infinityrt_scene.prototype.get3DCanvasSize=function(a,b,c){this.bestPractice.get3DCanvasSize=!0;var d={},e=window.devicePixelRatio,f=1/e;d.width=b?b*e:window.innerWidth*e;d.height=c?c*e:window.innerHeight*e;if(3840<d.width||2160<d.height)b=Math.min(3840/d.width,2160/d.height),d.width*=b,d.height*=b,f/=b;$(a?"#"+a:"#infinityrt-canvas").css({transform:"scale("+f+")","transform-origin":"0% 0%","-webkit-transform":"scale("+f+")","-webkit-transform-origin":"0% 0%","-moz-transform":"scale("+f+")","-moz-transform-origin":"0% 0%",
"-o-transform":"scale("+f+")","-o-transform-origin":"0% 0%","-ms-transform":"scale("+f+")","-ms-transform-origin":"0% 0%"});return d};var infinityrt_anim=function(a,b){this._scene=a;this.obj=b;this.transforms=[];this.curves=[];this.currentinput=this.framesleft=0;this.positionjump=!1;this.numloops=this.numframes=this.delta=0;this.onComplete=function(){};this._tmNow=this.primeMemberOfGrp=this.onSample=this.onChange=null;this.active=!1};
infinityrt_anim.prototype.isPlaying=function(){if("undefined"!=typeof this._TimeSt){var a=(this._scene.tmFrame-this._TimeSt)/this._TimeDur;return 0<=a&&1>=a}return 0<this.framesleft};infinityrt_anim.prototype.position=function(){return this.currentinput};
infinityrt_anim.prototype.play=function(a,b,c,d,e){this.active=!0;this._scene._animActive++;0==b?(this.currentinput=a,this.positionjump=!0):(this.positionjump=!1,this.delta=(a-this.currentinput)/b,this.startinput=this.currentinput,this.endinput=a,this.framesleft=b,this._TimeSt=void 0,void 0!==c&&(this.onComplete=c),void 0!=e&&this.ParseOnSample(e),void 0!==d&&(this.initialposition=this.currentinput,this.numloops=d,this.numframes=b))};
infinityrt_anim.prototype.playInTime=function(a,b,c,d,e,f,g,h){this.active&&this._scene._animActive--;this.jump=this.from=void 0;this.bypass=!1;this.active=!0;this._scene._animActive++;0==b?(this.currentinput=a,this.positionjump=!0):(void 0!==g&&(this.from=this.currentinput=g),this.positionjump=!1,this.startinput=this.currentinput,this.endinput=a,this.framesleft=1,this._TimeSt=null!=this._tmNow?this._tmNow:now(),this._TimeDur=void 0!==b?b:1E3*Math.abs(a-this.currentinput),this._Change={t0:this.currentinput,
td:a-this.currentinput},void 0!==f&&(this.bypass=f),void 0!==h&&(this.jump=h),void 0!==c&&(this.onComplete=c),void 0!=e&&this.ParseOnSample(e),void 0!==d&&(this.initialposition=this.currentinput,this.numloops=d))};
infinityrt_anim.prototype.step=function(){if(this.positionjump)return this.positionjump=!1,this.active&&(this.active=!1,this._scene._animActive--),!0;var a=!1;if("undefined"!=typeof this._TimeSt){var b=(this._scene.tmFrame-this._TimeSt)/this._TimeDur;1<=b&&(b=1,0==this.framesleft&&(a=!0),this.framesleft=0)}else a=0==this.framesleft;if(a){b=this.onComplete;this.onComplete=function(){};b();if(0<this.numloops)return this.numloops--,this.currentinput=this.initialposition,"undefined"!=typeof this._TimeSt?
this._TimeSt=this._scene.tmFrame:this.framesleft=this.numframes,!0;this.active&&(this.active=!1,this._scene._animActive--);return!1}"undefined"!=typeof this._TimeSt?this.currentinput=this._Change.t0+b*this._Change.td:(this.currentinput+=this.delta,this.framesleft--);if(null!=this.onChange)this.onChange(this);return!0};infinityrt_anim.prototype.stop=function(){this.numloops=this.delta=this.framesleft=0;this._TimeSt=this._scene.tmFrame-this._TimeDur};
infinityrt_anim.prototype.ParseOnSample=function(a){void 0==this._curveSIO&&(this._curveSIO={_preInfinity:FANIM_INFINITY_CONSTANT,_postInfinity:FANIM_INFINITY_CONSTANT,_is2DCurveEvaluation:1,_keys:[{_input:0,_output:0,_interpolation:FANIM_INTERPOLATION_BEZIER,_inTangent:[.5,.5],_outTangent:[.5,.5]},{_input:1,_output:1,_interpolation:FANIM_INTERPOLATION_BEZIER,_inTangent:[.5,.5],_outTangent:[.5,.5]}]});if(void 0!=a)if("object"==typeof a){this.onSample=this.EvalCurve;var b=this._curveSIO._keys;"undefined"!=
typeof a.preset?"linear"==a.preset?(b[0]._outTangent=[.5,.5],b[1]._inTangent=[.5,.5]):"slowinout"==a.preset?(b[0]._outTangent=[.5,0],b[1]._inTangent=[.5,1]):"slowout"==a.preset&&(b[0]._outTangent=[.25,.5],b[1]._inTangent=[.5,1]):"undefined"!=typeof a.tangents&&(b[0]._outTangent=a.tangents[0],b[1]._inTangent=a.tangents[1])}else this.onSample=a;else this.onSample=null};infinityrt_anim.prototype.EvalCurve=function(a){return evaluateAnimationCurve(this._curveSIO,a)};
var infinityrt_sceneObject=function(a){this.position=[0,0,0];this.rotation=[0,0,0];this.scale=[0,0,0];this.lposition=[0,0,0];this.lrotation=[0,0,0];this.lscale=[0,0,0];this.trans=new infinityrt_transform;this.tMatrix=this.trans.getResult();this.dirty=!0;this.obj="undefined"!=typeof a?a:null};
infinityrt_sceneObject.prototype.doTransform=function(){if(!infinityrt_vtx_eq(this.lposition,this.position)||!infinityrt_vtx_eq(this.lrotation,this.rotation)||!infinityrt_vtx_eq(this.lscale,this.scale)){this.trans.clearStack();if(0!=this.rotation[0]||0!=this.rotation[1]||0!=this.rotation[2])this.trans.rotate(this.rotation),this.trans.pushMatrix();this.trans.translate(this.position);this.tMatrix=this.trans.getResult();this.lposition=this.position;this.lrotation=this.rotation;this.lscale=this.scale;
this.dirty=!0}};infinityrt_scene.prototype.gotoPos=function(a,b,c,d,e,f,g,h,k){this._nav.NavStartGotoPos(a,b,c,d,e,f,g,h,k);this.clearRefine()};infinityrt_scene.prototype.gotoNamedPos=function(a,b,c,d,e){this.gotoPos(a.xang,a.yang,a.xpan,a.ypan,a.dolly,b,c,d,e)};infinityrt_scene.prototype.gotoPosInTime=function(a,b,c,d,e,f,g,h,k){this.reqDoFDepthCalc=!0;this._nav.NavStartGotoPosInTime(a,b,c,d,e,f,g,h,k);this.clearRefine()};
infinityrt_scene.prototype.gotoPosAtSpeed=function(a,b,c,d,e,f,g,h,k){for(this.reqDoFDepthCalc=!0;a<-M_PI;)a+=2*M_PI;for(;a>M_PI;)a-=2*M_PI;var l=b-this._nav._navXAng,m=a-this._nav._navYAng,n=2*M_PI+a-this._nav._navYAng;Math.abs(n)<Math.abs(m)&&(m=n);n=-2*M_PI+a-this._nav._navYAng;Math.abs(n)<Math.abs(m)&&(m=n);this._nav.NavStartGotoPosInTime(a,b,c,d,e,Math.sqrt(l*l+m*m)*this.factor/f,g,h,k);this.clearRefine()};
infinityrt_scene.prototype.gotoUINamedPosInTime=function(a,b,c,d,e){this.skin&&this.skin.ui&&(a=this.skin.ui.positions[a],b||(b=a.time),a.fovy&&this.fovy!=a.fovy&&(e||(e={}),e.fovy=a.fovy),5<a.pos.length&&(e||(e={}),e.zang=a.pos[5]),a.doffocusdist&&(this._fDoFFocusPos=a.doffocusdist),this.gotoPosInTime(a.pos[0],a.pos[1],a.pos[2],a.pos[3],a.pos[4],b,c,d,e))};infinityrt_scene.prototype.gotoNamedPosInTime=function(a,b,c,d,e){this.gotoPosInTime(a.xang,a.yang,a.xpan,a.ypan,a.dolly,b,c,d,e)};
infinityrt_scene.prototype.getAnim=function(a){a=this.getInstanceByName(a,this);return null==a?null:a.anim};infinityrt_scene.prototype.getAllAnimChildren=function(a,b){a.anim&&b.list.push(a.anim);for(var c=0;c<a.children.length;c++)this.getAllAnimChildren(a.children[c],b)};infinityrt_scene.prototype.animIsPlaying=function(a){a=this.getAnim(a);return null==a?!1:a.isPlaying()};infinityrt_scene.prototype.animPosition=function(a){a=this.getAnim(a);return null==a?0:a.position()};
infinityrt_scene.prototype.setAnimUseFrames=function(a){this._bAnimUseFrames=a};infinityrt_scene.prototype.getTimeFromTimeOrFrame=function(a){return this._bAnimUseFrames?a/this._nAnimFrameRate:a};
infinityrt_scene.prototype.animPlay=function(a,b,c,d,e,f){var g=!0,h=this._grps[a.toLowerCase()];b=this.getTimeFromTimeOrFrame(b);if("undefined"!=typeof h)for(var k=0;k<h.members.length;k++)a=this.getAnim(h.members[k]),null!=a&&(0==k?(g&=a.play(b,c,d,e,f),a.primeMemberOfGrp=h):g&=a.play(b,c));else{a=this.getAnim(a);if(null==a)return!1;g=a.play(b,c,d,e,f)}this._animRequiresClear=!0;return g};
infinityrt_scene.prototype.animPlayAllChildren=function(a,b,c,d,e,f){var g={list:[]};a=this.getInstanceByName(a,this);if(null==a)return!1;this.getAllAnimChildren(a,g);if(0==g.list.length)return!1;b=this.getTimeFromTimeOrFrame(b);for(a=0;a<g.list.length;a++)var h=g.list[a].play(b,c,0==a?d:null,e,f);this._animRequiresClear=!0;return h};
infinityrt_scene.prototype.animPlayInTime=function(a,b,c,d,e,f,g,h,k){var l=!0,m=this._grps[a.toLowerCase()],n=now();b=this.getTimeFromTimeOrFrame(b);if(this.inStateApply||"undefined"==typeof m){a=this.getAnim(a);if(null==a)return!1;a._tmNow=n;l=a.playInTime(b,c,d,e,f,g,h,k)}else for(var p=0;p<m.members.length;p++)a=this.getAnim(m.members[p]),null!=a&&(a._tmNow=n,0==p?(l&=a.playInTime(b,c,d,e,f,g,h,k),a.primeMemberOfGrp=m):l&=a.playInTime(b,c));this._animRequiresClear=!0;return l};
infinityrt_scene.prototype.animPlayAllChildrenInTime=function(a,b,c,d,e,f,g,h,k){var l={list:[]},m=this.getInstanceByName(a,this);a=now();if(null==m)return!1;b=this.getTimeFromTimeOrFrame(b);this.getAllAnimChildren(m,l);if(0==l.list.length)return!1;for(m=0;m<l.list.length;m++){l.list[m]._tmNow=a;var n=0==m?l.list[m].playInTime(b,c,0==m?d:void 0,e,f,g,h,k):l.list[m].playInTime(b,c,0==m?d:void 0,e,f,g,h,0)}this._animRequiresClear=!0;return n};
function slowinout(a,b){var c=2*Math.abs(a-.5);c=Math.pow(c,b);c=.5*c+.5;.5>a&&(c=1-c);return c}
infinityrt_scene.prototype.evaluateSceneNode=function(a,b){var c=0;if(null!=b.onSample){var d=b.endinput-b.startinput;0==d&&(d=1);var e=b.onSample((b.currentinput-b.startinput)/d);e=e*d+b.startinput}else e=slowinout(b.currentinput,this._slowinoutfac);if(b.useBaseSRT){var f=b.initialTranslate,g=b.initialRotate,h=b.initialScale;for(d=0;d<b.transforms.length;d++)for(var k=b.transforms[d],l=0;l<b.curves.length;l++){var m=b.curves[l];if(d==m._transformidx){if(void 0!==b.from){var n=evaluateAnimationCurve(m,
b.startinput);var p=evaluateAnimationCurve(m,b.endinput),q=(e-b.startinput)/(b.endinput-b.startinput);n=!1===b.bypass?evaluateAnimationCurve(m,e):q*p+(1-q)*n;void 0!==b.jump&&(c=(-4*Math.pow(q,2)+4*q)*b.jump)}else n=evaluateAnimationCurve(m,e);"translation"==k._type?".X"==m._qualifier?f[0]=n:".Y"==m._qualifier?f[1]=n+c:".Z"==m._qualifier&&(f[2]=n):"rotation"==k._type?".X"==m._qualifier?g[0]=n/180*M_PI:".Y"==m._qualifier?g[1]=n/180*M_PI:".Z"==m._qualifier&&(g[2]=n/180*M_PI):"scale"==k._type&&(".X"==
m._qualifier?h[0]=n:".Y"==m._qualifier?h[1]=n:".Z"==m._qualifier&&(h[2]=n))}}b.overrideRotation&&(g=b.initialRotate);a.matrix=MatrixRecompose(h,g,f)}else{a.matrix=infinityrt_identity.slice(0);"undefined"!=typeof b.rotationpivot&&(f=MatrixTranslation(b.rotationpivot[0],b.rotationpivot[1],b.rotationpivot[2]),a.matrix=MatrixMultiply(f,a.matrix));for(d=0;d<b.transforms.length;d++){k=b.transforms[d];h=!1;g=infinityrt_identity.slice(0);for(l=0;l<b.curves.length;l++)m=b.curves[l],d==m._transformidx&&(h=
!0,f=infinityrt_identity,void 0!==b.from?(n=evaluateAnimationCurve(m,b.startinput),p=evaluateAnimationCurve(m,b.endinput),q=(e-b.startinput)/(b.endinput-b.startinput),n=!1===b.bypass?evaluateAnimationCurve(m,e):q*p+(1-q)*n,void 0!==b.jump&&(c=(-4*Math.pow(q,2)+4*q)*b.jump)):n=evaluateAnimationCurve(m,e),"translation"==k._type?".X"==m._qualifier?f=MatrixTranslation(n,c,0):".Y"==m._qualifier?f=MatrixTranslation(0,n,0):".Z"==m._qualifier&&(f=MatrixTranslation(0,c,n)):"rotation"==k._type?f=MatrixRotationAxis(n/
180*M_PI,k.x,k.y,k.z):"scale"==k._type&&(".X"==m._qualifier?f=MatrixScaling(n,1,1):".Y"==m._qualifier?f=MatrixScaling(1,n,1):".Z"==m._qualifier&&(f=MatrixScaling(1,1,n))),g=MatrixMultiply(f,g));h||("translation"==k._type?g=MatrixTranslation(k.x,k.y,k.z):"rotation"==k._type?g=MatrixRotationAxis(k._angle/180*M_PI,k.x,k.y,k.z):"scale"==k._type&&(g=MatrixScaling(k.x,k.y,k.z)));a.matrix=MatrixMultiply(g,a.matrix)}"undefined"!=typeof b.rotationpivot&&(f=MatrixTranslation(-b.rotationpivot[0],-b.rotationpivot[1],
-b.rotationpivot[2]),a.matrix=MatrixMultiply(f,a.matrix))}null!=b.primeMemberOfGrp&&this.evaluateGrpCmds(b.primeMemberOfGrp,e)};function FindT(a,b,c,d,e,f){var g=1,h=0;f=.1>=f?.1:.9<=f?.9:f;for(var k=!0;1E-5<g-h;){k?k=!1:f=(g-h)/2+h;var l=1-f;l=a*l*l*l+3*b*f*l*l+3*c*f*f*l+d*f*f*f;if(1E-5>=Math.abs(l-e))break;l>e?g=f:h=f}return f}
function evaluateAnimationCurve(a,b){if(0==a._keys.length)return 0;if(1==a._keys.length)return a._keys[0]._output;var c=a._keys[0]._input,d=a._keys[a._keys.length-1]._input,e=d-c,f=a._keys[0]._output,g=a._keys[a._keys.length-1]._output,h=g-f,k=0;if(b<c){var l=c-b;switch(a._preInfinity){case FANIM_INFINITY_CONSTANT:return f;case FANIM_INFINITY_LINEAR:return f+l*(a._keys[1]._output-f)/(a._keys[1]._input-c);case FANIM_INFINITY_CYCLE:g=Math.ceil(l/e);b+=g*e;break;case FANIM_INFINITY_CYCLE_RELATIVE:g=
Math.ceil(l/e);b+=g*e;k-=g*h;break;case FANIM_INFINITY_OSCILLATE:g=Math.ceil(l/(2*e));b=d-Math.abs(b+2*g*e-d);break;default:return f}}else if(b>=d)switch(l=b-d,a._postInfinity){case FANIM_INFINITY_CONSTANT:return g;case FANIM_INFINITY_LINEAR:return g+l*(a._keys[a._keys.length-2]._output-g)/(a._keys[a._keys.length-2]._input-d);case FANIM_INFINITY_CYCLE:g=Math.ceil(l/e);b-=g*e;break;case FANIM_INFINITY_CYCLE_RELATIVE:g=Math.ceil(l/e);b-=g*e;k+=g*h;break;case FANIM_INFINITY_OSCILLATE:g=Math.ceil(l/(2*
e));b=c+Math.abs(b-2*g*e-c);break;default:return g}for(h=0;h<a._keys.length&&!(a._keys[h]._input>=b);h++);if(0==h)return k+f;f=a._keys[h-1];d=a._keys[h];e=d._input-f._input;g=d._output-f._output;switch(f._interpolation){case FANIM_INTERPOLATION_LINEAR:a=f._output+(b-f._input)/e*g;break;case FANIM_INTERPOLATION_BEZIER:if(d._interpolation==FANIM_INTERPOLATION_LINEAR){a=f._output+(b-f._input)/e*g;break}if(d._interpolation==FANIM_INTERPOLATION_STEP){a=f._output;break}g=[0,0];if(d._interpolation==FANIM_INTERPOLATION_BEZIER)g[0]=
d._inTangent[0],g[1]=d._inTangent[1];else if(d._interpolation==FANIM_INTERPOLATION_TCB){l=d;var m=[0,0];h=h+1<a._keys.length?a._keys[h+1]:null;computeTCBTangent(f,d,h,l._tension,l._continuity,l._bias,g,m);g[0]=d._input+g[0];g[1]=d._output+g[1]}c=(b-f._input)/e;a._is2DCurveEvaluation&&(c=FindT(f._input,f._outTangent[0],g[0],d._input,b,c));h=f._outTangent[1];l=g[1];b=1-c;var n=m=3;a._is2DCurveEvaluation||(m=e/(f._outTangent[0]-f._input),n=e/(d._input-g[0]),.01>m?m=.01:100<m&&(m=100),.01>n?n=.01:100<
n&&(n=100));a=f._output*b*b*b+m*h*b*b*c+n*l*b*c*c+d._output*c*c*c;break;case FANIM_INTERPOLATION_TCB:if(d._interpolation==FANIM_INTERPOLATION_LINEAR){a=f._output+(b-f._input)/e*g;break}if(d._interpolation==FANIM_INTERPOLATION_STEP){a=f._output;break}g=[];m=[];var p=[];g[0]=g[1]=m[0]=m[1]=p[0]=p[1]=0;computeTCBTangent(0<h-1?a._keys[h-2]:null,f,d,f._tension,f._continuity,f._bias,m,g);n=l=0;d._interpolation==FANIM_INTERPOLATION_TCB?(l=d,h=h+1<a._keys.length?a._keys[h+1]:null,computeTCBTangent(f,d,h,
l._tension,l._continuity,l._bias,p,m),l=d._output+p[1],n=d._output+p[0]):d._interpolation==FANIM_INTERPOLATION_BEZIER&&(l=d,p[0]=l._inTangent[0],p[1]=l._inTangent[1],l=p[1],n=p[0]);c=(b-c)/e;e=f._output-g[1];h=f._input-g[0];a._is2DCurveEvaluation&&(c=FindT(f._input,h,n,d._input,b,c));b=1-c;a=f._output*b*b*b+3*e*c*b*b+3*l*c*c*b+d._output*c*c*c;break;default:a=f._output}return k+a}
function computeTCBTangent(a,b,c,d,e,f,g,h){if(null!=b){var k=[],l=[];a?(k[0]=a._input-b._input,k[1]=a._output-b._output):(k[0]=c?c._input-b._input:.5,k[1]=0);c?(l[0]=c._input-b._input,l[1]=c._output-b._output):(l[0]=a?b._input-a._input:.5,l[1]=0);a=(1-d)*(1-e)*(1+f)/2;b=(1-d)*(1+e)*(1-f)/2;c=(1-d)*(1+e)*(1+f)/2;d=(1-d)*(1-e)*(1-f)/2;g[0]=a*k[0]+b*l[0];g[1]=a*k[1]+b*l[1];h[0]=c*k[0]+d*l[0];h[1]=c*k[1]+d*l[1]}}
var infinityrt_matanim=function(a){this._scene=a;this.transforms=[];this.curves=[];this.framesleft=0;this.currentinput=(this.reverseMode=!1,0);this.positionjump=!1;this.numloops=this.numframes=this.delta=0;this.onComplete=function(){};this._tmNow=this.primeMemberOfGrp=this.onSample=this.onChange=null;this.active=!1;this._TimeDur=1E3};infinityrt_matanim.prototype.setReverseMode=function(a){this.currentinput=(this.reverseMode=a)?1:0};
infinityrt_matanim.prototype.reset=function(){this.transforms=[];this.curves=[];this.framesleft=0;this.currentinput=this.reverseMode?1:0;this.positionjump=!1;this.numloops=this.numframes=this.delta=0;this.onComplete=function(){};this._tmNow=this.primeMemberOfGrp=this.onSample=this.onChange=null;this.active=!1};infinityrt_matanim.prototype.setDuration=function(a){this._TimeDur=a};infinityrt_matanim.prototype.value=function(){return this.currentinput};
infinityrt_matanim.prototype.play=function(){if(!this.active){var a=this.reverseMode?0:1;this.jump=this.from=void 0;this.bypass=!1;this.active=!0;0==this._TimeDur?(this.currentinput=this.reverseMode?0:1,this.positionjump=!0):(this.positionjump=!1,this.startinput=this.currentinput,this.endinput=a,this.framesleft=1,this._TimeSt=null!=this._tmNow?this._tmNow:now(),this._Change={t0:this.currentinput,td:a-this.currentinput})}};
infinityrt_matanim.prototype.step=function(){if(this.positionjump)return this.positionjump=!1,this.active&&(this.active=!1),!0;var a=!1;if("undefined"!=typeof this._TimeSt){var b=(this._scene.tmFrame-this._TimeSt)/this._TimeDur;1<=b&&(b=1,0==this.framesleft&&(a=!0),this.framesleft=0)}else a=0==this.framesleft;if(a)return b=this.onComplete,this.onComplete=function(){},b(),this.active&&(this.active=!1),!1;"undefined"!=typeof this._TimeSt?this.currentinput=this._Change.t0+b*this._Change.td:(this.currentinput+=
this.delta,this.framesleft--);if(null!=this.onChange)this.onChange(this);return!0};
infinityrt_scene.prototype.LoadHierarchy=function(){if(null!=this.uijson){var a=new XMLHttpRequest;a._scene=this;a.open("GET",this.BuildURL(this.uijson),!0);window.infinityrt_options&&!0===window.infinityrt_options.withCredentials&&(a.withCredentials=!0);a.onload=function(d){d=a._scene;d.ui=JSON.parse(a.response);d._outstandingjobs--};this._outstandingjobs++;a.send("")}var b=new XMLHttpRequest;b.s=this;var c=this.BuildURL("hierarchy.xml");b.open("GET",c,!0);this.requireRequestContentType&&b.setRequestHeader("Content-Type",
"text/xml");window.infinityrt_options&&!0===window.infinityrt_options.withCredentials&&(b.withCredentials=!0);b.onload=function(d){var e=b.s;e.selfcheck&&!e.CheckContentEncoding(b)&&(console.log("***Warning: Content has no encoding, recommended min is 'gzip'"),e.selfcheck.gzip=!0);b.type=1;b._InitialMaterials={};b.incEnvObjs=!0;e._usingwkwebview||200==b.status?setTimeout(function(){e.LoadHierarchyA(b);setTimeout(function(){e.LoadHierarchyB(b);setTimeout(function(){e.LoadHierarchyC(b)},0)},0)},0):
console.log("***Error "+b.status+" readystate "+b.readyState)};null!=this.forcewebp?(this._bSupportsWebP=this.forcewebp,b.send("")):-1==navigator.appVersion.indexOf("Edge")?check_webp_feature("lossy",function(d,e){b.s._bSupportsWebP=e;b.send("")},this):b.send("")};
infinityrt_scene.prototype.LoadHierarchyA=function(a){var b=a.responseXML.getElementsByTagName("scene");b.length&&(b=b[0].getAttribute("v"))&&(b=b.split("."),this.verScene={major:b[0],minor:b[1],build:b[2]},453>this.verScene.build&&(this.visibilityRecurses=!0));a=a.responseXML.getElementsByTagName("texture");for(b=0;b<a.length;b++){var c=a[b],d=c.getElementsByTagName("name")[0].firstChild.nodeValue,e=c.getElementsByTagName("type")[0].firstChild.nodeValue;this.ParseTexture(c,d,e)}};
infinityrt_scene.prototype.LoadHierarchyB=function(a){var b=a.responseXML.getElementsByTagName("viewcamera");0<b.length&&this.ParseViewCamera(b,!0);this._lstStoredCameras=[];for(var c=a.responseXML.getElementsByTagName("camera"),d=0;d<c.length;d++){var e=c[d],f=e.getElementsByTagName("name").length?e.getElementsByTagName("name")[0].firstChild.nodeValue:null,g=null;e.getElementsByTagName("matrix").length&&(g=e.getElementsByTagName("matrix")[0].firstChild.nodeValue.split(" "));this._lstStoredCameras.push({name:f,
matrix:g})}c=a.responseXML.getElementsByTagName("material");for(d=0;d<c.length;d++)e=c[d],f=e.getElementsByTagName("name").length?e.getElementsByTagName("name")[0].firstChild.nodeValue:null,f=new infinityrt_material(f,this),f.type=e.getElementsByTagName("type")[0].firstChild.nodeValue,f.ParseMaterial(e,b,a);for(d=0;d<this._Materials.length;d++)f=this._Materials[d],"Indirect"==f.type&&f.ResolveIndirections();if(!this._localfiles&&null==this._fnOnInitialState)for(d=0;d<this._TextureObjs.length;d++)a=
this._TextureObjs[d],1!=a.defer&&a.startFileDownloads();for(d=0;d<this._TextureObjs.length;d++)a=this._TextureObjs[d],"Procedural"!=a.type||a.pendingProceduralUniforms||a.performTexProceduralPreload()};
infinityrt_scene.prototype.LoadHierarchyC=function(a){if(this.selfcheck){var b=a.responseXML.getElementsByTagName("cs");if(0<b.length){var c=b[0].firstChild.nodeValue.split(",");for(b=0;b<c.length;b++)switch(c[b]){case "500":console.log("***Error: A texture is scaled that is not power-of-2");break;case "501":console.log("***Error: A material uses more than 8 textures");break;case "502":console.log("***Error: Texture mipmapped that is not power-of-2");break;case "503":console.log("***Tip: Try enabling 'Combine Geometry' publish option to reduce geometry");
break;case "504":this.bspecjson=!0;break;case "505":console.log("***Warning: Non-standard DoF input values")}}}this.name="root";this.children=[];b=a.responseXML.getElementsByTagName("root");this.recurseParseSceneNode(this,b[0],this,a);this.o_matrix=infinityrt_identity.slice(0);this.prepareTexId=this._TextureObjs.length;this._totaljobs+=this._TextureObjs.length;c=a.responseXML.getElementsByTagName("grp");for(b=0;b<c.length;b++)this.ParseGroup(a,c[b]);c=a.responseXML.getElementsByTagName("cfg");for(b=
0;b<c.length;b++)this.ParseConfiguration(a,c[b]);null!=this._fnOnInitialState&&(this.stX=a,this.CallInitialState(),delete this.stX);this.ProcessInitialMaterials(a);this._outstandingjobs--;this._projectparsed=!0};
infinityrt_scene.prototype.ParseGroup=function(a,b){var c=0<b.getElementsByTagName("name").length?b.getElementsByTagName("name")[0].firstChild.nodeValue:"grp"+i.toString();3==a.type&&(c=a.ref+":"+c);var d=0<b.getElementsByTagName("type").length?b.getElementsByTagName("type")[0].firstChild.nodeValue:"",e=0<b.getElementsByTagName("members").length&&null!=b.getElementsByTagName("members")[0].firstChild?b.getElementsByTagName("members")[0].firstChild.nodeValue:"",f=0<b.getElementsByTagName("cmds").length&&
null!=b.getElementsByTagName("cmds")[0].firstChild?b.getElementsByTagName("cmds")[0].firstChild.nodeValue:"",g=0<b.getElementsByTagName("props").length&&null!=b.getElementsByTagName("props")[0].firstChild?JSON.parse(b.getElementsByTagName("props")[0].firstChild.nodeValue):"";b=0<b.getElementsByTagName("parent").length?b.getElementsByTagName("parent")[0].firstChild.nodeValue:"";c=this._grps[c.toLowerCase()]={type:d,members:e.split(","),commands:f,props:g,parent:b};if(2==a.type||3==a.type)c.refEnv=
a.ref};infinityrt_scene.prototype.ParseConfiguration=function(a,b){a=0<b.getElementsByTagName("name").length?b.getElementsByTagName("name")[0].firstChild.nodeValue:"cfg"+i.toString();b=0<b.getElementsByTagName("members").length&&null!=b.getElementsByTagName("members")[0].firstChild?b.getElementsByTagName("members")[0].firstChild.nodeValue:"";this._cfgs[a.toLowerCase()]={members:b.split(",")}};
infinityrt_scene.prototype.ParseViewCamera=function(a,b){b&&(this._backgroundColor=infinityrt_intToFloatArray(a[0].getElementsByTagName("background")[0].firstChild.nodeValue),a[0].getElementsByTagName("transparent").length&&this.setBackgroundTransparent("0"!=a[0].getElementsByTagName("transparent")[0].firstChild.nodeValue),a[0].getElementsByTagName("fovy").length&&(this.fovy=this.fovyOriginal=parseFloat(a[0].getElementsByTagName("fovy")[0].firstChild.nodeValue),this._nav&&this._nav.SetFoVRange&&this._nav.SetFoVRange(this.fovy,
this.fovy)),a[0].getElementsByTagName("matrix").length&&(this._initialViewMatrix=a[0].getElementsByTagName("matrix")[0].firstChild.nodeValue.split(" "),this._initialNavMatrix=this._initialViewMatrix.slice(0),this.selfcheck&&console.log("***Warning: Using legacy publish camera, can lead to inaccuracies with goto positions")),a[0].getElementsByTagName("upvector").length&&(this.upvector=parseInt(a[0].getElementsByTagName("upvector")[0].firstChild.nodeValue)),a[0].getElementsByTagName("backdroptexture").length&&
(this._backdroptexturename=a[0].getElementsByTagName("backdroptexture")[0].firstChild.nodeValue));a[0].getElementsByTagName("encodeenvmapsinmono").length&&(this._encodeenvmapsinmono=parseInt(a[0].getElementsByTagName("encodeenvmapsinmono")[0].firstChild.nodeValue));a[0].getElementsByTagName("extrabrightenvmap").length&&(this._extrabrightenvmap=parseInt(a[0].getElementsByTagName("extrabrightenvmap")[0].firstChild.nodeValue));a[0].getElementsByTagName("mipmapenvmap").length&&(this._mipmapenvmap=parseInt(a[0].getElementsByTagName("mipmapenvmap")[0].firstChild.nodeValue));
a[0].getElementsByTagName("hasBrightReflections").length&&(this.hasBrightReflections=parseInt(a[0].getElementsByTagName("hasBrightReflections")[0].firstChild.nodeValue))&&this.gl.blendFuncSeparate(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA,this.gl.ZERO,this.gl.ONE);a[0].getElementsByTagName("cc_brightness").length&&(this._cc_brightness=parseFloat(a[0].getElementsByTagName("cc_brightness")[0].firstChild.nodeValue));a[0].getElementsByTagName("cc_contrast").length&&(this._cc_contrast=parseFloat(a[0].getElementsByTagName("cc_contrast")[0].firstChild.nodeValue));
a[0].getElementsByTagName("cc_saturation").length&&(this._cc_saturation=parseFloat(a[0].getElementsByTagName("cc_saturation")[0].firstChild.nodeValue));a[0].getElementsByTagName("cc_tint").length&&(this._cc_tint=a[0].getElementsByTagName("cc_tint")[0].firstChild.nodeValue.split(","));a[0].getElementsByTagName("camresponse").length&&(this.camresponse=parseInt(a[0].getElementsByTagName("camresponse")[0].firstChild.nodeValue));a[0].getElementsByTagName("highlightcompression").length&&(this.highlightcompression=
parseFloat(a[0].getElementsByTagName("highlightcompression")[0].firstChild.nodeValue));a[0].getElementsByTagName("vignetting").length&&(this.vignetting=parseFloat(a[0].getElementsByTagName("vignetting")[0].firstChild.nodeValue));a[0].getElementsByTagName("gamma").length&&(this.gamma=parseFloat(a[0].getElementsByTagName("gamma")[0].firstChild.nodeValue));a[0].getElementsByTagName("glow_strength").length&&(this._glow_strength=parseFloat(a[0].getElementsByTagName("glow_strength")[0].firstChild.nodeValue));
a[0].getElementsByTagName("glow_power").length&&(this._glow_power=parseFloat(a[0].getElementsByTagName("glow_power")[0].firstChild.nodeValue));a[0].getElementsByTagName("glow_threshold").length&&(this._glow_threshold=parseFloat(a[0].getElementsByTagName("glow_threshold")[0].firstChild.nodeValue));a[0].getElementsByTagName("glow_incbackground").length&&(this._glow_incbackground=parseInt(a[0].getElementsByTagName("glow_incbackground")[0].firstChild.nodeValue));a[0].getElementsByTagName("glow_applytobackground").length&&
(this._glow_applytobackground=parseInt(a[0].getElementsByTagName("glow_applytobackground")[0].firstChild.nodeValue));a[0].getElementsByTagName("compPlanarRefl").length&&(this.compPlanarRefl=parseInt(a[0].getElementsByTagName("compPlanarRefl")[0].firstChild.nodeValue));b&&(a[0].getElementsByTagName("bbminObjz").length&&(this._bbminObjz=parseFloat(a[0].getElementsByTagName("bbminObjz")[0].firstChild.nodeValue)),a[0].getElementsByTagName("bbmaxObjz").length&&(this._bbmaxObjz=parseFloat(a[0].getElementsByTagName("bbmaxObjz")[0].firstChild.nodeValue)));
b=a[0].getElementsByTagName("dof");if(0<b.length){this._bDoF=!0;var c=b[0].getElementsByTagName("focuspos");c.length&&(this._fDoFFocusPos=parseFloat(c[0].firstChild.nodeValue));c=b[0].getElementsByTagName("focuswidth");c.length&&(this._fDoFFocusWidth=parseFloat(c[0].firstChild.nodeValue));c=b[0].getElementsByTagName("applytonear");c.length&&(this._nDoFApplyToNear=parseInt(c[0].firstChild.nodeValue));c=b[0].getElementsByTagName("pixelscaling");c.length&&(this._nDoFPixelScaling=parseFloat(c[0].firstChild.nodeValue));
c=b[0].getElementsByTagName("dofnear");if(0<c.length){var d=c[0].getElementsByTagName("dofdist");d.length&&(this._fDoFNearDist=parseFloat(d[0].firstChild.nodeValue));d=c[0].getElementsByTagName("dofstrength");d.length&&(this._fDoFNearAperture=parseFloat(d[0].firstChild.nodeValue));c=c[0].getElementsByTagName("dofbias");c.length&&(this._DoFNearBias=parseFloat(c[0].firstChild.nodeValue))}b=b[0].getElementsByTagName("doffar");0<b.length&&(d=b[0].getElementsByTagName("dofdist"),d.length&&(this._fDoFFarDist=
parseFloat(d[0].firstChild.nodeValue)),d=b[0].getElementsByTagName("dofstrength"),d.length&&(this._fDoFFarAperture=parseFloat(d[0].firstChild.nodeValue)),c=b[0].getElementsByTagName("dofbias"),c.length&&(this._DoFFarBias=parseFloat(c[0].firstChild.nodeValue)))}else this._bDoF=!1;a[0].getElementsByTagName("backdropvisiblerefract").length&&(this._backdropvisiblerefract=parseInt(a[0].getElementsByTagName("backdropvisiblerefract")[0].firstChild.nodeValue));a[0].getElementsByTagName("orderbasedtransparency").length&&
(this._bOrderBasedTransparency=0!=parseInt(a[0].getElementsByTagName("orderbasedtransparency")[0].firstChild.nodeValue));a[0].getElementsByTagName("sharpenscale").length&&(this._fSharpenScale=parseFloat(a[0].getElementsByTagName("sharpenscale")[0].firstChild.nodeValue));0==this._nPlanarReflectPassActive&&a[0].getElementsByTagName("PlanarReflectPassActive").length&&(this._nPlanarReflectPassActive=parseInt(a[0].getElementsByTagName("PlanarReflectPassActive")[0].firstChild.nodeValue));1==this._nPlanarReflectPassActive&&
(a[0].getElementsByTagName("PlanarReflectDirX").length&&(this._fPlanarReflectDirX=parseFloat(a[0].getElementsByTagName("PlanarReflectDirX")[0].firstChild.nodeValue)),a[0].getElementsByTagName("PlanarReflectDirY").length&&(this._fPlanarReflectDirY=parseFloat(a[0].getElementsByTagName("PlanarReflectDirY")[0].firstChild.nodeValue)),a[0].getElementsByTagName("PlanarReflectMap").length&&(this._nPlanarReflectMap=parseInt(a[0].getElementsByTagName("PlanarReflectMap")[0].firstChild.nodeValue)));this._lights=
[];c=a[0].getElementsByTagName("lights");if(0<c.length){b=0;c=c[0];c.getElementsByTagName("count").length&&(b=parseInt(c.getElementsByTagName("count")[0].firstChild.nodeValue));for(d=0;d<b;d++){var e=0,f=c.getElementsByTagName("ldt_"+d).length?c.getElementsByTagName("ldt_"+d)[0].firstChild.nodeValue.split(" "):null;c.getElementsByTagName("rghd_"+d).length&&(e=parseFloat(c.getElementsByTagName("rghd_"+d)[0].firstChild.nodeValue));this._lights.push({data:f,roughdelta:e})}1==this._glVersionNum&&128>
this.MaxFragUniVecs&&2<b&&console.log("***Warning: Device is not capable of "+b+" lights, limiting to 2")}b=a[0].getElementsByTagName("eScale");0<b.length&&(this.eScale=parseFloat(b[0].firstChild.nodeValue));b=a[0].getElementsByTagName("linearworkflow");0<b.length&&(this.linearworkflow=parseInt(b[0].firstChild.nodeValue));b=a[0].getElementsByTagName("geomgen");0<b.length&&(this.geomgenfile=this.geomgen=parseInt(b[0].firstChild.nodeValue),this.platform.iOS&&(this.geomgen=3));b=a[0].getElementsByTagName("uvch");
0<b.length&&(this.uvch=parseInt(b[0].firstChild.nodeValue));0==this.hasDeformation&&(b=a[0].getElementsByTagName("skinned"),0<b.length&&(this.hasDeformation=parseInt(b[0].firstChild.nodeValue)));0==this._fadedReflectionsActive&&a[0].getElementsByTagName("FadedReflectionsActive").length&&(this._fadedReflectionsActive=parseInt(a[0].getElementsByTagName("FadedReflectionsActive")[0].firstChild.nodeValue));1==this._fadedReflectionsActive&&(a[0].getElementsByTagName("fadedReflections_Scale").length&&(this.fadedReflectionsScale=
parseFloat(a[0].getElementsByTagName("fadedReflections_Scale")[0].firstChild.nodeValue)),a[0].getElementsByTagName("fadedReflections_Offset").length&&(this.fadedReflectionsOffset=parseFloat(a[0].getElementsByTagName("fadedReflections_Offset")[0].firstChild.nodeValue)),a[0].getElementsByTagName("fadedReflections_Pow").length&&(this.fadedReflectionsPow=parseFloat(a[0].getElementsByTagName("fadedReflections_Pow")[0].firstChild.nodeValue)),a[0].getElementsByTagName("fadedReflections_Color").length&&(this.fadedReflectionsColor=
a[0].getElementsByTagName("fadedReflections_Color")[0].firstChild.nodeValue.split(",")));0==this._AABBEnvironmentMapActive&&a[0].getElementsByTagName("AABBEnvironmentMapActive").length&&(this._AABBEnvironmentMapActive=parseInt(a[0].getElementsByTagName("AABBEnvironmentMapActive")[0].firstChild.nodeValue));1==this._AABBEnvironmentMapActive&&(a[0].getElementsByTagName("AABBmin").length&&(b=a[0].getElementsByTagName("AABBmin")[0].firstChild.nodeValue.split(","),this._AABBmin=[parseFloat(b[0]),parseFloat(b[1]),
parseFloat(b[2])]),a[0].getElementsByTagName("AABBmax").length&&(b=a[0].getElementsByTagName("AABBmax")[0].firstChild.nodeValue.split(","),this._AABBmax=[parseFloat(b[0]),parseFloat(b[1]),parseFloat(b[2])]))};
infinityrt_scene.prototype.ParseTexture=function(a,b,c){var d=null;if("File"==c||"FileEnv"==c||"Parameterised"==c)for(var e=a.getElementsByTagName("filename"),f=0;f<e.length;f++){var g=null;var h=a.getElementsByTagName("filename")[f];h.hasAttribute("dim")&&parseInt(h.getAttribute("dim"));if(h.hasAttribute("cfmt")){if(this._bNoCompressedTexs)continue;g=h.getAttribute("cfmt");g=this.getExtension(g);if(null==g)continue}d=h.firstChild.nodeValue;!this._bSupportsWebP&&d.endsWith(".webp")&&(d=h.hasAttribute("orig")?
h.getAttribute("orig"):-1!=b.indexOf("_refplane.")?b:b.endsWith("_octahedron")?ReplaceAll(d,".webp",".png"):ReplaceAll(d,".webp",b.endsWith(".png")?".png":".jpg"));d=new infinityrt_texture(b,c,this.BuildURL(d),this);a.getElementsByTagName("wrap").length&&(d._wrap=a.getElementsByTagName("wrap")[0].firstChild.nodeValue);a.getElementsByTagName("coord").length&&(d._coord=parseInt(a.getElementsByTagName("coord")[0].firstChild.nodeValue));a.getElementsByTagName("fangvector").length&&(b=a.getElementsByTagName("fangvector")[0].firstChild.nodeValue.split(","),
d.fAngVector=[parseFloat(b[0]),parseFloat(b[1]),parseFloat(b[2])]);null!=g&&(d.cfmt=g,d.type="FileCompressed");break}else if("FileCube3x2"==c)d=a.getElementsByTagName("filename")[0].firstChild.nodeValue,this._bSupportsWebP||(d=ReplaceAll(d,".webp",".png")),d=new infinityrt_texture(b,c,this.BuildURL(d),this);else if("Noise"==c)d=new infinityrt_texture(b,c,"",this),d.width=a.getElementsByTagName("width")[0].firstChild.nodeValue,d.height=a.getElementsByTagName("height")[0].firstChild.nodeValue,d.noiseseed=
a.getElementsByTagName("noiseseed")[0].firstChild.nodeValue,d.noiserounds=a.getElementsByTagName("noiserounds")[0].firstChild.nodeValue,d.noisebrightness=parseFloat(a.getElementsByTagName("noisebrightness")[0].firstChild.nodeValue),d.noisecontrast=parseFloat(a.getElementsByTagName("noisecontrast")[0].firstChild.nodeValue),d.noisesaturation=parseFloat(a.getElementsByTagName("noisesaturation")[0].firstChild.nodeValue);else if("Operation"==c)d=new infinityrt_texture(b,c,"",this),d.width=a.getElementsByTagName("width")[0].firstChild.nodeValue,
d.height=a.getElementsByTagName("height")[0].firstChild.nodeValue,d.operation=a.getElementsByTagName("operation")[0].firstChild.nodeValue,a.getElementsByTagName("tex1").length&&(d.tex1name=a.getElementsByTagName("tex1")[0].firstChild.nodeValue),a.getElementsByTagName("tex2").length&&(d.tex2name=a.getElementsByTagName("tex2")[0].firstChild.nodeValue),a.getElementsByTagName("tex3").length&&(d.tex3name=a.getElementsByTagName("tex3")[0].firstChild.nodeValue);else if("Procedural"==c)for(d=new infinityrt_texture(b,
c,"",this),d.width=a.getElementsByTagName("width")[0].firstChild.nodeValue,d.height=a.getElementsByTagName("height")[0].firstChild.nodeValue,d._fragheaderinsert=a.getElementsByTagName("fragheaderinsert")[0].firstChild.nodeValue,d._fraginsert=a.getElementsByTagName("fraginsert")[0].firstChild.nodeValue,a.getElementsByTagName("fragsamplinginsert").length?d._fragsamplinginsert=a.getElementsByTagName("fragsamplinginsert")[0].firstChild.nodeValue:d._fragsamplinginsert="gl_FragColor = RT_RootPixel();",
d._fragsamplinginsert+="gl_FragColor.a = 1.0;\nreturn;\n",d._unis=[],b=a.getElementsByTagName("uniform"),c=0;c<b.length;c++)g=b[c],g={name:g.getElementsByTagName("name")[0].firstChild.nodeValue,type:g.getElementsByTagName("type")[0].firstChild.nodeValue,val:g.getElementsByTagName("val")[0].firstChild.nodeValue},d._unis.push(g),this.manageTexs&&"sampler"==g.type&&(g=this._Texture_ref[g.val])&&g.addRef();else"FromBrowser"==c?(d=new infinityrt_texture(b,c,"",this),this.prepareTexIncludesProcedurals=
!1,b=a.getElementsByTagName("directlist"),c=a.getElementsByTagName("indirectlist"),b.length&&(d.direct=b[0].firstChild.nodeValue.split(",")),c.length&&(d.indirect=c[0].firstChild.nodeValue.split(","))):"Video"==c?d=new infinityrt_texture(b,c,this.BuildURL(a.getElementsByTagName("filename")[0].firstChild.nodeValue),this):console.log("Image Type "+c+" unsupported for image "+b);null!=d&&(d.mipmap=0<a.getElementsByTagName("mipmap").length,a.getElementsByTagName("AnisotropicFiltering").length&&(d._bAnisotropicFiltering=
0!=parseInt(a.getElementsByTagName("AnisotropicFiltering")[0].firstChild.nodeValue)),a.getElementsByTagName("filename_lvl1").length&&(b=a.getElementsByTagName("filename_lvl1")[0],c=b.firstChild.nodeValue,!this._bSupportsWebP&&c.endsWith(".webp")&&(c=b.hasAttribute("orig")?b.getAttribute("orig"):ReplaceAll(c,".webp",".png")),d._lvlfilenames=[d._img_path,c],d._img_path=this.BuildURL(c),null==this._TextureToLvl0&&(this._TextureToLvl0=[]),this.smartDeferral||this._TextureToLvl0.push(d)),a.getElementsByTagName("blksd").length&&
(d.blksd=parseInt(a.getElementsByTagName("blksd")[0].firstChild.nodeValue)),a.getElementsByTagName("isNormalMap").length&&(d.isNormalMap=1==parseInt(a.getElementsByTagName("isNormalMap")[0].firstChild.nodeValue)),a.getElementsByTagName("defer").length&&(d.defer=parseInt(a.getElementsByTagName("defer")[0].firstChild.nodeValue)));return d};
infinityrt_scene.prototype.recurseParseSceneNode=function(a,b,c,d){for(var e="0|0",f=null,g=0;g<b.childNodes.length;g++){var h=b.childNodes[g];"defer"==h.tagName&&(a.defer=h.childNodes[0].nodeValue)}for(g=0;g<b.childNodes.length;g++)if(h=b.childNodes[g],"polygonoffset"==h.tagName)a._fPolygonOffset=parseFloat(h.childNodes[0].nodeValue);else if("alphaoffset"==h.tagName)a._fAlphaOffset=parseFloat(h.childNodes[0].nodeValue);else if("excludefromdepth"==h.tagName){if(2==d.type||3==d.type)if(a.refEnv=d.ref,
!d.incEnvObjs)continue;this._lstNonDepthObjects.push(a);c.children.pop();"undefined"==typeof c.childrenNonDepth&&(c.childrenNonDepth=[]);c.childrenNonDepth.push(a)}else if("usematerial"==h.tagName)e=XMLGetNodeText(h),h=e.split(","),h=parseInt(h[0].split("|")[1]),a.refEnv&&d.s.mapMaterialsEnv&&(h=d.s.mapMaterialsEnv[h]),d._InitialMaterials[h]=h;else if("localbbox"==h.tagName)"undefined"!=typeof h.childNodes[0]&&"undefined"!=typeof a.mesh&&(h=h.childNodes[0].nodeValue.split(","),a.mesh._localbbmin=
[parseFloat(h[0]),parseFloat(h[1]),parseFloat(h[2])],a.mesh._localbbmax=[parseFloat(h[3]),parseFloat(h[4]),parseFloat(h[5])],a.mesh.calcMidPt());else if("localtexbbox"==h.tagName)"undefined"!=typeof h.childNodes[0]&&"undefined"!=typeof a.mesh&&(h=h.childNodes[0].nodeValue.split(","),a.mesh._texbbmin=[parseFloat(h[0]),parseFloat(h[1])],a.mesh._texbbmax=[parseFloat(h[2]),parseFloat(h[3])]);else if("localtex2bbox"==h.tagName)"undefined"!=typeof h.childNodes[0]&&"undefined"!=typeof a.mesh&&(h=h.childNodes[0].nodeValue.split(","),
a.mesh._tex2bbmin=[parseFloat(h[0]),parseFloat(h[1])],a.mesh._tex2bbmax=[parseFloat(h[2]),parseFloat(h[3])]);else if("globalbbextent"==h.tagName)"undefined"!=typeof h.childNodes[0]&&"undefined"!=typeof a.mesh&&(h=h.childNodes[0].nodeValue.split(","),a.globalbbextent={centre:[parseFloat(h[0]),parseFloat(h[1]),parseFloat(h[2])],extent:[parseFloat(h[3]),parseFloat(h[4]),parseFloat(h[5])]});else if("amboccchannel"==h.tagName)a._nAmbOccChannel=parseInt(h.childNodes[0].nodeValue);else if("geometry_file_lvl1"==
h.tagName)f=h.childNodes[0].nodeValue,f.endsWith(".dat2")&&(this.isIE||null==decoderModule)&&(f=ReplaceAll(f,".dat2",".dat"));else if("geometry_file"==h.tagName){var k=0;h.hasAttribute("blksd")&&(k=h.getAttribute("blksd"));var l=h.childNodes[0].nodeValue,m=h.childNodes[0].nodeValue,n=l.split("("),p=void 0,q=void 0;if(3==n.length){p=parseInt(n[1].replace(")",""));var t=n[2].split(")");q=parseInt(t[0]);2==t.length&&(l=n[0]+t[1])}l.endsWith(".dat2")&&(this.isIE||null==decoderModule)&&(l=ReplaceAll(l,
".dat2",".dat"),h.hasAttribute("fbk_blksd")&&(k=h.getAttribute("fbk_blksd")));"undefined"==typeof this.mapMeshFiles&&(this.mapMeshFiles=[]);"undefined"==typeof this.mapBundleMeshFiles&&(this.mapBundleMeshFiles=[]);"undefined"==typeof this.mapMeshFiles[m]&&(null!=f&&(a._lvl0filename=m,null==this._GeomToLvl0&&(this._GeomToLvl0=[]),this._GeomToLvl0.push(a)),this.mapMeshFiles[m]=this.loadMesh(d,null!=f?f:l,e,a.defer,k,null!=f,p,q));a.mesh=this.mapMeshFiles[m]}else"object"==h.tagName?(k=new infinityrt_instance(a,
d),k.defer=a.defer,a.children.push(k),this.recurseParseSceneNode(k,h,a,d)):"name"==h.tagName?"undefined"!=typeof h.childNodes[0]&&(a.name=h.childNodes[0].nodeValue,d.ref&&(a.name=d.ref+":"+a.name),this.hideHotspots&&(h=a.name.toLowerCase(),h.startsWith("hotspot")||-1!=h.indexOf("_hotspot")))&&(a.visible=0):"matrix"==h.tagName?(a.matrix=h.childNodes[0].nodeValue.split(" "),a.matrix[12]*=this._SceneScale,a.matrix[13]*=this._SceneScale,a.matrix[14]*=this._SceneScale):"rpmatrix"==h.tagName?(a.rpmatrix=
h.childNodes[0].nodeValue.split(" "),a.ltog_rpmatrix=infinityrt_identity.slice(0)):"visible"==h.tagName?a.visible=parseInt(h.childNodes[0].nodeValue):"visibleRefract"==h.tagName?(a.visibleRefract=!0,this.lstRefractionNodes.push(a)):"visibleGlow"==h.tagName?(a.visibleGlow=parseInt(h.childNodes[0].nodeValue),1==a.visibleGlow&&this.lstGlowNodes.push(a)):"visibleplanarreflect"==h.tagName?(a._bIncludeInPlanarReflect=!0,this._lstPlanarReflectNodes.push(a)):"doublesided"==h.tagName?a.doublesided="1"==h.childNodes[0].nodeValue:
"includeindofcalc"==h.tagName?a._bIncludeInDoFCalc="1"==h.childNodes[0].nodeValue:"anim"==h.tagName?(a.anim=new infinityrt_anim(d.s,a),this.loadAnim(a,h)):"joints_json"==h.tagName?a.joints=eval(h.childNodes[0].nodeValue):"joints_global_bbmin"==h.tagName?a.joints_global_bbmin=h.childNodes[0].nodeValue.split(","):"joints_global_bbmax"==h.tagName&&(a.joints_global_bbmax=h.childNodes[0].nodeValue.split(","))};
infinityrt_scene.prototype.loadAnim=function(a,b){for(var c=0;c<b.childNodes.length;c++){var d=b.childNodes[c];if("translation"==d.tagName||"rotation"==d.tagName||"scale"==d.tagName){var e="translation"==d.tagName?this._SceneScale:1,f={_type:d.tagName,_angle:0};a.anim.transforms.push(f);for(var g=0;g<d.childNodes.length;g++){var h=d.childNodes[g];if("x"==h.tagName)f.x=parseFloat(h.childNodes[0].nodeValue*e);else if("y"==h.tagName)f.y=parseFloat(h.childNodes[0].nodeValue*e);else if("z"==h.tagName)f.z=
parseFloat(h.childNodes[0].nodeValue*e);else if("curve"==h.tagName){var k={_keys:[]};a.anim.curves.push(k);k._transformidx=a.anim.transforms.length-1;for(var l=0;l<h.childNodes.length;l++){var m=h.childNodes[l];if("name"==m.tagName)k._name=m.childNodes[0].nodeValue;else if("qualifier"==m.tagName)k._qualifier=m.childNodes[0].nodeValue;else if("preInfinity"==m.tagName)k._preInfinity=parseInt(m.childNodes[0].nodeValue);else if("postInfinity"==m.tagName)k._postInfinity=parseInt(m.childNodes[0].nodeValue);
else if("is2DCurveEvaluation"==m.tagName)k._is2DCurveEvaluation=parseInt(m.childNodes[0].nodeValue);else if("key"==m.tagName){var n={_inTangent:[],_outTangent:[]};k._keys.push(n);for(var p=0;p<m.childNodes.length;p++){var q=m.childNodes[p];"input"==q.tagName?n._input=parseFloat(q.childNodes[0].nodeValue):"output"==q.tagName?n._output=parseFloat(q.childNodes[0].nodeValue*e):"interpolation"==q.tagName?n._interpolation=parseInt(q.childNodes[0].nodeValue):"inTangentX"==q.tagName?n._inTangent[0]=parseFloat(q.childNodes[0].nodeValue):
"inTangentY"==q.tagName?n._inTangent[1]=parseFloat(q.childNodes[0].nodeValue):"outTangentX"==q.tagName?n._outTangent[0]=parseFloat(q.childNodes[0].nodeValue):"outTangentY"==q.tagName&&(n._outTangent[1]=parseFloat(q.childNodes[0].nodeValue))}}}}}}else"rotationpivot"==d.tagName?a.anim.rotationpivot=[parseFloat(d.getElementsByTagName("x")[0].firstChild.nodeValue),parseFloat(d.getElementsByTagName("y")[0].firstChild.nodeValue),parseFloat(d.getElementsByTagName("z")[0].firstChild.nodeValue)]:"useBaseSRT"==
d.tagName?a.anim.useBaseSRT=parseInt(d.firstChild.nodeValue):"overrideRotation"==d.tagName?a.anim.overrideRotation=parseInt(d.firstChild.nodeValue):"initialRotate"==d.tagName?a.anim.initialRotate=d.firstChild.nodeValue.split(","):"initialScale"==d.tagName?a.anim.initialScale=d.firstChild.nodeValue.split(","):"initialTranslate"==d.tagName&&(a.anim.initialTranslate=d.firstChild.nodeValue.split(","))}};
infinityrt_scene.prototype.ApplyMaterials=function(a,b){this._activeapply=!0;this.urlRoot=a;this.fnParseComplete=b;var c=new XMLHttpRequest;c._scene=this;a=this.BuildURL("hierarchy.xml");c.open("GET",a,!0);this.requireRequestContentType&&c.setRequestHeader("Content-Type","text/xml");window.infinityrt_options&&!0===window.infinityrt_options.withCredentials&&(c.withCredentials=!0);c.onload=function(d){var e=c.responseXML;d=c._scene;if(d._usingwkwebview||200==c.status){for(var f=e.getElementsByTagName("texture"),
g=0;g<f.length;g++){var h=f[g],k=h.getElementsByTagName("name")[0].firstChild.nodeValue,l=d._Texture_ref[k];"undefined"==typeof l&&(l=h.getElementsByTagName("type")[0].firstChild.nodeValue,l=d.ParseTexture(h,k,l),l.startFileDownloads())}f=e.getElementsByTagName("viewcamera");0<f.length&&d.ParseViewCamera(f,!1);e=e.getElementsByTagName("material");for(g=0;g<e.length;g++)h=e[g],k=h.getElementsByTagName("name").length?h.getElementsByTagName("name")[0].firstChild.nodeValue:null,k=d._Material_ref[k],"undefined"!=
typeof k&&(k.ParseMaterial(h,f),k._needsAttribsAndUniforms=!0);d._outstandingjobs--;d.CheckParseComplete()}else console.log("***Error "+c.status+" readystate "+c.readyState),d._activeapply=!1};this._outstandingjobs++;c.send("")};
infinityrt_scene.prototype.LoadEnvironment=function(a,b){var c,d=null,e=null;if(this._activeapply&&0<this._outstandingjobs)return!1;if(this._rootEnv){this._rootEnv=null;for(c=this.lstGlowNodes.length-1;0<=c;c--)this.lstGlowNodes[c].refEnv&&this.lstGlowNodes.splice(c,1);for(c=this._lstNonDepthObjects.length-1;0<=c;c--)this._lstNonDepthObjects[c].refEnv&&this._lstNonDepthObjects.splice(c,1);for(c=this._lstPlanarReflectNodes.length-1;0<=c;c--)this._lstPlanarReflectNodes[c].refEnv&&this._lstPlanarReflectNodes.splice(c,
1);for(var f in this.mapMeshFiles)c=this.mapMeshFiles[f],c.refEnv&&c.destroy(this);this.visibilityChanged=!0;for(c=this._TextureObjs.length-1;0<=c;c--)f=this._TextureObjs[c],f.refEnv&&f.destroy();if(this.storedtextures){d=this.storedtextures.curHDRIName;e=this.storedtextures.prevHDRIName;for(c=this._Materials.length-1;0<=c;c--)f=this._Materials[c],f.name.startsWith(d)?f.destroy():"Ambient"!=f.type&&f.textures[TEXTURE_MAP_SPECULARENV]!=this.storedtextures[TEXTURE_MAP_SPECULARENV]&&f.ChangeEnvmaps(d,
e);this.storedtextures=null;d&&this.CheckAOAssignments(d,e)}}if(0<a.length){this._activeapply=!0;this.clearRefine();this.urlRoot=a;this.fnParseComplete=b;var g=new XMLHttpRequest;g._scene=this;a=this.BuildURL("hierarchy.xml");g.open("GET",a,!0);this.requireRequestContentType&&g.setRequestHeader("Content-Type","text/xml");window.infinityrt_options&&!0===window.infinityrt_options.withCredentials&&(g.withCredentials=!0);g.onload=function(h){var k=g.responseXML;h=g._scene;var l={type:2,s:h,_InitialMaterials:{},
ref:!0,incEnvObjs:!0};if(h._usingwkwebview||200==g.status){for(var m=k.getElementsByTagName("texture"),n=0;n<m.length;n++){var p=m[n],q=p.getElementsByTagName("name")[0].firstChild.nodeValue;q.endsWith("_specular")&&(e=q.substring(0,q.length-9));var t=h._Texture_ref[q];"undefined"==typeof t?(t=h.ParseTexture(p,q,p.getElementsByTagName("type")[0].firstChild.nodeValue),h.manageTexs||t.startFileDownloads(),t.refEnv=l.ref):1==t.defer&&(t.defer=0,h.manageTexs||t.startFileDownloads())}p=k.getElementsByTagName("viewcamera");
0<p.length&&h.ParseViewCamera(p,!1);h.mapMaterialsEnv={};m=null;t=k.getElementsByTagName("material");for(n=0;n<t.length;n++){q=t[n];var u=q.getElementsByTagName("type")[0].firstChild.nodeValue;if("Match"==u||"Reflective"==u){q=q.getElementsByTagName("specularenv")[0].firstChild.nodeValue;q.endsWith("_specular")&&(e=q.substring(0,q.length-9));break}}for(n=0;n<t.length;n++){q=t[n];var r=q.getElementsByTagName("name").length?q.getElementsByTagName("name")[0].firstChild.nodeValue:"";r=e+"_"+r;l.newHDRIName=
e;u=h._Material_ref[r];"undefined"!=typeof u?(console.log("WARNING: Environment material '"+r+"' conflicts with a material in the object scene"),u.ParseMaterial(q,p,l),u._needsAttribsAndUniforms=!0,h.mapMaterialsEnv[n]=n):(u=new infinityrt_material(r,g._scene),u.type=q.getElementsByTagName("type")[0].firstChild.nodeValue,u.ParseMaterial(q,p,l),h.mapMaterialsEnv[n]=h._Materials.indexOf(u));if("Match"==u.type||"Reflective"==u.type)m=u}n=k.getElementsByTagName("root");0<n.length&&(h._rootEnv=new infinityrt_instance(h,
l),h.recurseParseSceneNode(h._rootEnv,n[0],h,l));h.ProcessInitialMaterials(l);if(m){for(n=0;n<h._Materials.length;n++)l=h._Materials[n],"undefined"!=typeof l.derivs&&l.ApplyDeriv(e),"Ambient"!=l.type&&(h.storedtextures||(k=h.storedtextures={},k[TEXTURE_MAP_SPECULARENV]=l.textures[TEXTURE_MAP_SPECULARENV],k.prevHDRIName=d=l.textures[TEXTURE_MAP_SPECULARENV].name.substring(0,l.textures[TEXTURE_MAP_SPECULARENV].name.length-9),k.curHDRIName=e=m.textures[TEXTURE_MAP_SPECULARENV].name.substring(0,m.textures[TEXTURE_MAP_SPECULARENV].name.length-
9)),l.textures[TEXTURE_MAP_SPECULARENV]!=m.textures[TEXTURE_MAP_SPECULARENV]&&l.ChangeEnvmaps(d,e));d&&h.CheckAOAssignments(d,e)}h.CheckTextureDownloads();h.matrixDirty=!0;h._hierarchyDirty=!0;h._outstandingjobs--;h.RelaxFocusRate();h.CheckParseComplete()}else console.log("***Error "+g.status+" readystate "+g.readyState),h._activeapply=!1};this._outstandingjobs++;g.send("")}else{this._hierarchyDirty=this.matrixDirty=!0;this.recalcSceneRadius();for(c=0;c<this._Materials.length;c++)f=this._Materials[c],
"undefined"!=typeof f.derivs&&f.ApplyDeriv(f.textures[TEXTURE_MAP_SPECULARENV].name.substring(0,f.textures[TEXTURE_MAP_SPECULARENV].name.length-9));void 0!==b&&b();this.RelaxFocusRate();this.clearRefine()}return!0};
infinityrt_scene.prototype.CheckAOAssignments=function(a,b){a=a.replace(/\./g,"_");for(var c=0;c<this._Materials.length;c++){var d=this._Materials[c],e=d.textures[TEXTURE_MAP_AMBOCCTEX];if(e&&e.name.endsWith(a)){var f=b.replace(/\./g,"_");e=e.name.replace(a,f);(e=this._Texture_ref[e])&&(d.textures[TEXTURE_MAP_AMBOCCTEX]=e)}}};
infinityrt_scene.prototype.ImportComplete=function(){this.importbusy=!1;if(0<this.importQueue.length)this.TakeFromImportQueue();else{for(var a in this.activeImportrefs){var b=a;delete this.activeImportrefs[b];this.AttachScene(b);if(null!=this.importcompletefunc[b])this.importcompletefunc[b]()}this.clearRefine()}};infinityrt_scene.prototype.ImportSceneQueued=function(a){this.activeImportrefs[a.ref]=!0;this.importQueue.push(a);this.TakeFromImportQueue()};
infinityrt_scene.prototype.TakeFromImportQueue=function(){if(0!=this.importQueue.length&&1!=this.importbusy){var a=this.importQueue.shift();this.importbusy=!0;this.ImportScene(a.url,a.ref,this.ImportComplete,{position:a.position})}};
infinityrt_scene.prototype.ImportScene=function(a,b,c,d){if(this._activeapply&&0<this._outstandingjobs)return console.log("Still Loading, skipping import '"+b+" "+a+"'"),!1;this.urlRoot=a;this.fnParseComplete=c;var e=new XMLHttpRequest;e._scene=this;a=this.BuildURL("hierarchy.xml");e.open("GET",a,!0);this.requireRequestContentType&&e.setRequestHeader("Content-Type","text/xml");window.infinityrt_options&&!0===window.infinityrt_options.withCredentials&&(e.withCredentials=!0);e.onload=function(f){var g=
e.responseXML;f=e._scene;var h={type:3,s:f,_InitialMaterials:{},ref:b,incEnvObjs:!1,newHDRIName:f.getPrevHDRIName()};if(f._usingwkwebview||200==e.status){var k=g.getElementsByTagName("viewcamera");if(0<k.length&&(k=k[0].getElementsByTagName("geomgen"),0<k.length&&(k=parseInt(k[0].firstChild.nodeValue),!(k==f.geomgen||f.platform.iOS&&3===f.geomgen&&5===k)))){console.log("***Error: Import Scene has different geometry format");return}var l=g.getElementsByTagName("texture");for(k=0;k<l.length;k++){var m=
l[k],n=m.getElementsByTagName("type")[0].firstChild.nodeValue;if("FileCube3x2"!=n){var p=m.getElementsByTagName("name")[0].firstChild.nodeValue;p=h.ref+":"+p;var q=f._Texture_ref[p];"undefined"==typeof q?(q=f.ParseTexture(m,p,n),f.manageTexs||q.startFileDownloads(),q.refEnv=h.ref):1==q.defer&&(q.defer=0,f.manageTexs||q.startFileDownloads())}}f.mapMaterialsEnv={};m=g.getElementsByTagName("material");for(k=0;k<m.length;k++)n=m[k],p=n.getElementsByTagName("name").length?n.getElementsByTagName("name")[0].firstChild.nodeValue:
"",p=h.ref+":"+p,l=f._Material_ref[p],"undefined"!=typeof l?(console.log("***Warning: Import material '"+p+"' conflicts with a material in the object scene"),l.ParseMaterial(n,null,h),l._needsAttribsAndUniforms=!0,f.mapMaterialsEnv[k]=k):(l=new infinityrt_material(p,e._scene),l.type=n.getElementsByTagName("type")[0].firstChild.nodeValue,l.ParseMaterial(n,null,h),f.mapMaterialsEnv[k]=f._Materials.indexOf(l));k=g.getElementsByTagName("root");0<k.length&&(l=new infinityrt_instance(f,h),f.recurseParseSceneNode(l,
k[0],f,h),l.name=b,f.refRoots[b]=l,d&&(d.position&&l.addTranslation(d.position),d.scale&&l.addScale(d.scale)));for(k=0;k<f._lstPlanarReflectNodes.length;k++)f._lstPlanarReflectNodes[k].name.split(":")[0]===b&&(f._lstPlanarReflectNodes[k].ready=!1);g=g.getElementsByTagName("grp");for(k=0;k<g.length;k++)f.ParseGroup(h,g[k]);f.ProcessInitialMaterials(h);f.CheckTextureDownloads();f.matrixDirty=!0;f._hierarchyDirty=!0;f._outstandingjobs--;f.RelaxFocusRate();f.CheckParseComplete()}else console.log("***Error: "+
e.status+" readystate "+e.readyState)};this._outstandingjobs++;e.send("");return!0};
infinityrt_scene.prototype.AttachScene=function(a){var b=this.refRoots[a];if("undefined"==typeof b)return!1;for(var c=0;c<this.children.length;c++)if(this.children[c].name==a)return!1;this.children.push(b);this._hierarchyDirty=this.matrixDirty=!0;this.RelaxFocusRate();this.recalcSceneRadius();for(c=0;c<this.stateTracker.length;c++)b=this.stateTracker[c].name.split(":"),b[0]===a&&(this.groupApplyState(this.stateTracker[c].name,this.stateTracker[c].opts),this.stateTracker.splice(c,1),c--);for(c=0;c<
this._lstPlanarReflectNodes.length;c++)b=this._lstPlanarReflectNodes[c].name.split(":"),b[0]===a&&(this._lstPlanarReflectNodes[c].ready=!0);this.visibilityChanged=!0;this.clearRefine();return!0};
infinityrt_scene.prototype.UnloadScene=function(a){var b=this.getInstanceByName(a,this);if(null==b)return!1;var c=this.children.indexOf(b);-1!=c&&(this.children.splice(c,1),delete this.instanceLookup[a]);for(c in this.instanceLookup)b=this.instanceLookup[c],b.refEnv==a&&delete this.instanceLookup[c];for(c=this.lstGlowNodes.length-1;0<=c;c--)this.lstGlowNodes[c].refEnv==a&&this.lstGlowNodes.splice(c,1);for(c=this._lstPlanarReflectNodes.length-1;0<=c;c--)this._lstPlanarReflectNodes[c].refEnv==a&&this._lstPlanarReflectNodes.splice(c,
1);for(var d in this.mapMeshFiles)c=this.mapMeshFiles[d],c.refEnv==a&&c.destroy(this);this.visibilityChanged=!0;for(c=this._TextureObjs.length-1;0<=c;c--)d=this._TextureObjs[c],d.refEnv==a&&d.destroy();for(c=this._Materials.length-1;0<=c;c--)d=this._Materials[c],d.refEnv==a&&d.destroy();for(var e in this._grps)this._grps[e].refEnv==a&&delete this._grps[e];delete this.refRoots[a];this.recalcSceneRadius();this.clearRefine();return!0};
function CheckGLError(a,b){var c=a.getError();c!=a.NO_ERROR&&console.log("GLERROR "+c+" "+b)}
infinityrt_scene.prototype.draw=function(){if(!this.xrActive){this.MeshQueueCycle();if(!this._started||0<this._outstandingjobs||!this.prepare())return void 0!=this.loader&&this.drawLoader(),!1;if(!this._activeapply&&this.draw0){this.draw0=!1;this.loader&&(this._nav._navYAng=this.loader.curYAng,this._nav._navXAng=this._nav._navDX=this._nav._navDY=this._nav._navDolly=0,this.setViewMatrix(this._nav.NavCreateViewMatrix(this._initialNavMatrix)),this.loader=null);if(this.selfcheck&&performance){var a=0,
b=0,c=performance.getEntriesByType("resource"),d=[],e=this.urlRoot;0==e.indexOf("./")&&(e=e.substring(2));for(var f=0;f<c.length;f++){var g=c[f],h=g.nextHopProtocol;!this.selfcheck.http2&&g.name.endsWith(".dat")&&-1!=h.indexOf("http/1.")&&(console.log("***Warning: Content using slow protocol '"+h+"', recommended min is 'http/2'"),this.selfcheck.http2=!0);"styleguide"!=this.selfcheck.param||-1==g.name.indexOf(window.location.origin)||-1==g.name.indexOf("_")&&g.name==g.name.toLowerCase()||console.log("***Warning: Filepath styleguide failure '"+
g.name+"'");-1!=g.name.indexOf(e)?a+=g.transferSize:(b+=g.transferSize,g.name.endsWith("SSE.js")||d.push(g))}if(0<this.urlRoot.length)for(console.log("Breakdown - 3D: "+(a/1048576).toFixed(1)+"MB vs 2D "+(b/1048576).toFixed(1)+"MB, largest 2D files below"),d=d.sort(function(l,m){return l.transferSize<m.transferSize?1:-1}),f=0;f<d.length&&5>f;f++)g=d[f],console.log("     "+(g.transferSize/1048576).toFixed(1)+"MB "+g.name);if(this.bspecjson){var k=new XMLHttpRequest;k.scene=this;k.open("GET",this.BuildURL("spec.json"),
!0);window.infinityrt_options&&!0===window.infinityrt_options.withCredentials&&(k.withCredentials=!0);k.onload=function(l){200<=k.status&&299>=k.status&&(l=JSON.parse(k.response),0>l.profiles.standard.MaxDownloadSize&&console.log("***Warning: Download size "+(0).toFixed(1)+"MB exceeds the 'spec.json' MaxDownloadSize "+l.profiles.standard.MaxDownloadSize+"MB"))};k.send("")}}if(this.fnDraw0)return this.fnDraw0(),!1}if(this._activeapply||this.xrOnly)return!1;this.fpsstats&&this.fpsstats.begin();a=this.gl;
this.tmFrame=now();this.curMat=null;this.initCamera();this._nav._navGotoPosActive&&(this._refineCount=-1);this._lstDeferredGrps&&this._lstDeferredGrps._auto_&&0<this._lstDeferredGrps._auto_._outstandingdeferred&&this._AllDeferredSent&&(this._refineCount=-1);if(this._bAllowDirectRender&&-1==this._refineCount||this._bNoAA)this.currentFrameBuffer=null,a.bindFramebuffer(a.FRAMEBUFFER,null),a.viewport(0,0,this.viewwidth,this.viewheight),this.renderScene(),this._bNoAA?this._refineCount=-1:this._refineCount++;
else{for(b=0;1>b&&64>this._refineCount;b++)this.currentFrameBuffer=this.rttFramebuffer,a.bindFramebuffer(a.FRAMEBUFFER,this.rttFramebuffer),a.viewport(0,0,this.viewwidth,this.viewheight),this.renderScene(),2==this._glVersionNum&&this.bltMSAAFBOToTex(this.rttFramebuffer,this.rttDownsampleFramebuffer,this.viewwidth,this.viewheight),a.bindFramebuffer(a.FRAMEBUFFER,this.rttAccumFramebufferCurrent),a.viewport(0,0,this.viewwidth,this.viewheight),this.renderRefinement(this.rttTexture,this.rttAccumTextureSource,
this._bAllowDirectRender?1/(1+this._refineCount):1/(2+this._refineCount),!1,0),this.rttAccumFramebufferCurrent==this.rttAccumFramebufferA?(this.rttAccumTextureSource=this.rttAccumTextureA,this.rttAccumFramebufferCurrent=this.rttAccumFramebufferB):(this.rttAccumTextureSource=this.rttAccumTextureB,this.rttAccumFramebufferCurrent=this.rttAccumFramebufferA),this._refineCount++;a.bindFramebuffer(a.FRAMEBUFFER,null);a.viewport(0,0,this.viewwidth,this.viewheight);this.renderRefinement(this.rttAccumTextureSource,
this.rttAccumTextureSource,1,!0,Math.min(this._refineCount,10)/10*this._fSharpenScale)}this._animRequiresClear?(this.recalcSceneRadius(),this.clearRefine()):this._dofRequiresClear&&this.clearRefine();a.finish();this.selfcheck&&this.draw1&&(this.draw1=!1,"undefined"==typeof ga&&console.log("***Warning: RT Analytics not defined (likely missing tracking data)"),console.log("First Draw Geometry : "+(this.selfcheck.geom[1]/1048576).toFixed(1)+"MB ("+this.selfcheck.geom[0]+" files, "+(this.selfcheck.geom[2]/
1E6).toFixed(2)+" MTris)"),console.log("First Draw Textures : "+(this.selfcheck.tex[1]/1048576).toFixed(1)+"MB ("+this.selfcheck.tex[0]+" files)"),console.log("First Draw Total : "+((this.selfcheck.geom[1]+this.selfcheck.tex[1])/1048576).toFixed(1)+"MB ("+(this.selfcheck.geom[0]+this.selfcheck.tex[0])+" files)"),console.log("Viewport resolution : "+this.viewwidth+"x"+this.viewheight),"tech"==this.selfcheck.param&&console.log("ShCc:"+Object.keys(this._ShaderCache).length+" DoF:"+this._bDoF+" Rfr:"+
this.lstRefractionNodes.length+" PRf:"+this.foundPlanarReflectMaterial+"/"+this._lstPlanarReflectNodes.length+" Glw:"+this.lstGlowNodes.length));this.frameCompleteChecks();this.fpsstats&&(this.fpsstats.end(),this._refineCount=-1);return!0}};
infinityrt_scene.prototype.prepXRObject=function(a){if(0!=a.visible&&!a._bIncludeInPlanarReflect){var b=a.mesh;if(null!=b&&(!a.defer||b.meshloaded)&&a.checkCull(this)&&(this.prepXR.uploaded=!1,null==b.compiled&&(b.loadToCard(this),this.prepXR.uploaded=!0),b=this._Materials[b.currentMaterial],null!=b._pMaterialPtr&&(b=b._pMaterialPtr),b.use(this),this.prepXR.uploaded&&(this.prepXR.uploads++,this.prepXR.uploads>=this.prepXR.maxuploadsperframe)))return;if("undefined"!=typeof a.children)for(b=0;b<a.children.length&&
!(this.prepXRObject(a.children[b]),this.prepXR.uploads>=this.prepXR.maxuploadsperframe);b++);}};
infinityrt_scene.prototype.drawXRFrame=function(a,b){a=a.session;this.fpsstats&&this.fpsstats.begin();a=a.renderState.baseLayer;a.framebufferWidth==this.viewwidth&&a.framebufferHeight==this.viewheight||this.resize(a.framebufferWidth,a.framebufferHeight);this.tmFrame=now();this.MeshQueueCycle();if(!this._started||0<this._outstandingjobs||!this.prepare()||this._activeapply)return!1;var c=this.gl;this.xrframe=!0;if(!this.drawInitReady)return this.prepXR={uploaded:!1,uploads:0,maxuploadsperframe:10},
this.prepXRObject(this),this.drawInitReady=0==this.prepXR.uploads,delete this.prepXR,this.xrframe=!1;this.curMat=null;this.initCamera();b&&0<b.views.length&&(this.p_matrix=b.views[0].projectionMatrix,this.mvp_matrix=MatrixMultiply(this.mv_matrix,this.p_matrix));c.depthMask(!0);c.depthRange(0,1);c.polygonOffset(0,0);c.enable(c.DEPTH_TEST);c.depthFunc(c.LEQUAL);c.enable(c.CULL_FACE);c.cullFace(c.BACK);c.frontFace(c.CCW);c.colorMask(!0,!0,!0,!0);c.bindFramebuffer(c.FRAMEBUFFER,a.framebuffer);c.viewport(0,
0,this.viewwidth,this.viewheight);c.clearColor(0,0,0,0);this.renderScene();this.frameCompleteChecks();this._backgroundTransparent||c.clearColor(this._backgroundColor[0],this._backgroundColor[1],this._backgroundColor[2],1);this.xrframe=!1;this.fpsstats&&(this.fpsstats.end(),this._refineCount=-1);return!0};
infinityrt_scene.prototype.frameCompleteChecks=function(){if(this.smartDeferral){var a=!0,b;for(b in this.pendingGroupStates)this.pendingGroupStates[b].processed?this.WaitForAllGroupStates||(this.groupPromiseStateFinish(b),delete this.pendingGroupStates[b],this._hierarchyDirty=this.visibilityChanged=!0,this.clearRefine()):this.groupPromiseStateDownloaded(b)?(this.pendingGroupStates[b].resolve(!0),this.pendingGroupStates[b].processed=!0):a=!1;if(a){a=!1;for(b in this.pendingGroupStates)this.groupPromiseStateFinish(b),
delete this.pendingGroupStates[b],a=!0;a&&(this._hierarchyDirty=this.visibilityChanged=!0,this.clearRefine(),this.WaitForAllGroupStates=!1)}}else if(this.autoDLAllDeferredGrps&&null!=this._lstDeferredGrps&&!this._AllDeferredSent){this._AllDeferredSent=!0;for(a in this._lstDeferredGrps)this.downloadDeferredGeometry(this._lstDeferredGrps[a]);for(b=0;b<this._TextureObjs.length;b++)a=this._TextureObjs[b],1==a.defer&&a.startFileDownloads()}if(null!=this._GeomToLvl0){for(a=0;a<this._GeomToLvl0.length;a++)b=
this._GeomToLvl0[a],b.mesh.proggeom=!0,b.mesh.retries=0,b.mesh._meshURL=b._lvl0filename,b.mesh._meshURLFull=this.BuildURL(b.mesh._meshURL),this.MeshQueue(b.mesh);this._GeomToLvl0=null}if(0<this.rtexsAvail.length&&(!this.IsFirstFrameAA()||this.fpsstats||this._bNoAA)){for(b=10;0<b&&0<this.rtexsAvail.length;)a=this.rtexsAvail.shift(),a.tex.updatertex(a.img),b--;this.CheckProgTexTimer();this.selfcheck&&0==this.selfcheck.texreqs&&0==this.rtexsAvail.length&&this.selfcheck.alltex&&(console.log("All Textures : "+
(this.selfcheck.tex[1]/1048576).toFixed(1)+"MB ("+this.selfcheck.tex[0]+" files)"),this.selfcheck.alltex=!1,this.downloadSelfCheckCSV("selfcheck.csv"),this.printSelfCheckBestPractices())}if(!this.smartDeferral&&null!=this.nonProgressiveDeferredTex){for(a=0;a<this.nonProgressiveDeferredTex.length;a++)this.nonProgressiveDeferredTex[a].startFileDownloads();this.nonProgressiveDeferredTex=null}if(this.loadProgressiveTextures&&null!=this._TextureToLvl0){for(a=b=0;a<this._TextureToLvl0.length;a++)this._TextureToLvl0[a].smartToLvl0=
!0,this._TextureToLvl0[a].loadrtex(0),b++;this._TextureToLvl0=[]}this._nav._navGotoPosActive&&(this._refineCount=-1);this._lstDeferredGrps&&this._lstDeferredGrps._auto_&&0<this._lstDeferredGrps._auto_._outstandingdeferred&&this._AllDeferredSent&&(this._refineCount=-1)};
infinityrt_scene.prototype.CheckProgTexTimer=function(){var a=this;((64<=a._refineCount||this.fpsstats||this._bNoAA)&&0<a.rtexsAvail.length||0==a.rtexsAvail.length)&&!a.timerProgTex&&(a.timerProgTex=setTimeout(function(){a.timerProgTex=null;a.clearRefine()},2E3))};infinityrt_scene.prototype.IsFirstFrameAA=function(){return this._bAllowDirectRender&&0>=this._refineCount||!this._bAllowDirectRender&&-1==this._refineCount};
infinityrt_scene.prototype.IsSecondFrameAA=function(){return this._bAllowDirectRender&&1>=this._refineCount||!this._bAllowDirectRender&&0==this._refineCount};infinityrt_scene.prototype.IsThirdFrameAA=function(){return this._bAllowDirectRender&&2>=this._refineCount||!this._bAllowDirectRender&&0==this._refineCount};infinityrt_scene.prototype.printCurrentObjects=function(){this._printCurrentObjects=!0;this.clearRefine()};
infinityrt_scene.prototype.setProjectionOffset=function(a,b){void 0==a||void 0==b||isNaN(a)||isNaN(b)?console.log("Warning. Wrong call to setProjectionOffset. Use setProjectionOffset(x,y) where x and y are numbers"):(this._projectionOffset.x=a,this._projectionOffset.y=b,this.clearRefine())};
infinityrt_scene.prototype.renderScene=function(){var a=this.gl;this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);this.visibilityChanged&&(this.visibilityChanged=!1,this.CheckForGeomUnloads(!1),this.smartDeferral&&(this._hierarchyDirty=!1,this.ApplySmartDeferral()));this._animateSecondaryMatsActive&&this.MaterialAnimStep();if(this._hierarchyDirty||0<this._animActive)this.foundPlanarReflectMaterial=!1,null!=this._rootEnv&&this.walkForMatrices(this._rootEnv,this.mHierModel,!0,!1),this.walkForMatrices(this,
this.mHierModel,!0,!1),0<this._lstNonDepthObjects.length&&this.calcSceneRadiusNonDepth(),this._hierarchyDirty=!1;this.IsFirstFrameAA()?(this._jitter[0]=this._projectionOffset.x,this._jitter[1]=this._projectionOffset.y,this._nRandomIdx=0):(this._jitter[0]=this._jitRadius*this.HMXRandom(this._jitx)+this._projectionOffset.x,this._jitter[1]=this._jitRadius*this.HMXRandom(this._jity)+this._projectionOffset.y,this._nRandomIdx++);null!=this.drawFBO?(this._jitter[0]/=this.drawFBO._nFBOWidth,this._jitter[1]/=
this.drawFBO._nFBOHeight):(this._jitter[0]/=this.viewwidth,this._jitter[1]/=this.viewheight);this._printCurrentObjects&&(this._lastCurrentObjectList=[]);this._renderpickenabled&&this.renderPick();0<this.lstRefractionNodes.length&&this.renderRefractionTexture();this.foundPlanarReflectMaterial&&0<this._lstPlanarReflectNodes.length&&this.renderPlanarReflectionTexture();if(!this._bDoF||!this.RTDoF&&this.IsFirstFrameAA()||!this.RTDoF&&this._animRequiresClear&&this._fastAnims){this.zprepass&&this.renderZPrePass();
0<this._backdroptexturename.length&&this.renderBackdrop();this.activeTexMap={};if(0<this._lstNonDepthObjects.length){this.renderEnvLayer=!0;this._lstTransObjs=[];var b=this.p_matrix,c=this.projDepths;this.p_matrix=this.getProjectionMatrix(this.sceneRadiusNonDepth);this.mvp_matrix=MatrixMultiply(this.mv_matrix,this.p_matrix);this.FrameDirty();for(var d=0;d<this._lstNonDepthObjects.length;d++)this.renderOpaqueObject(this._lstNonDepthObjects[d]);this.RenderFoundTransparentNodes();this.projDepths=c;this.p_matrix=
b;this.mvp_matrix=MatrixMultiply(this.mv_matrix,this.p_matrix);this.FrameDirty();this.gl.clear(this.gl.DEPTH_BUFFER_BIT);this.renderEnvLayer=!1}null!=this.fnPreDraw&&this.fnPreDraw();this.zprepass&&this.renderOrdered||(this._lstTransObjs=[]);this.renderOrdered?(this.zprepass||(this.opaqueObjectsArrayOrdered=[]),this.blend&&(a.clearColor(0,0,0,0),a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT),this.gl.enable(this.gl.BLEND),this.gl.blendFunc(this.gl.ONE,this.gl.ONE)),this.zprepass||(null!=this._rootEnv&&
this.renderEnvOrdered&&this.orderOpaqueObjects(this._rootEnv),this.orderOpaqueObjects(this)),this.renderOpaqueObjectOrdered(),null==this._rootEnv||this.renderEnvOrdered||this.renderOpaqueObject(this._rootEnv)):(this.blend&&(a.clearColor(0,0,0,0),a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT),this.gl.enable(this.gl.BLEND),this.gl.blendFunc(this.gl.ONE,this.gl.ONE)),null==this._rootEnv||this.renderEnvAfter||this.renderOpaqueObject(this._rootEnv),this.renderOpaqueObject(this),null!=this._rootEnv&&this.renderEnvAfter&&
this.renderOpaqueObject(this._rootEnv));this.blend&&this.gl.disable(this.gl.BLEND);this.RenderFoundTransparentNodes();this._printCurrentObjects&&(delete this._printCurrentObjects,console.log("printCurrentObjects:",this._lastCurrentObjectList),delete this._lastCurrentObjectList);this.activeTexMap=null}else this.renderDoF();null!=this.fnPostDraw&&this.fnPostDraw();this.activeGlow&&(0<this.lstGlowNodes.length||this._glow_incbackground)&&this.renderGlowTexture();this.zprepass&&this.gl.flush()};
infinityrt_scene.prototype.RenderOpaqueSecondaryMatNodes=function(){this._lstSecondaryMatObjs.length&&this.gl.blendFuncSeparate(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA,this.gl.ONE,this.gl.ONE);for(var a=0;a<this._lstSecondaryMatObjs.length;a++)this.renderOpaqueObject(this._lstSecondaryMatObjs[a],!0)};
infinityrt_scene.prototype.RenderFoundTransparentNodes=function(){this.matAnim.reverseMode||this.RenderOpaqueSecondaryMatNodes();if(0!=this._lstTransObjs.length){var a=this.gl;this._bOrderBasedTransparency&&a.depthMask(!1);this.hasBrightReflections&&!this.renderEnvLayer?a.blendFuncSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE):a.blendFuncSeparate(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE);a.enable(a.BLEND);for(var b=0;b<this._lstTransObjs.length;b++)this.renderTransparentObject(this._lstTransObjs[b]);
a.disable(a.BLEND);this._bOrderBasedTransparency&&a.depthMask(!0);this.matAnim.reverseMode&&this.RenderOpaqueSecondaryMatNodes()}};
infinityrt_scene.prototype.EndMaterialAnim=function(){this._animateSecondaryMatsActive=!1;this.matAnim.reset();for(var a=0;a<this._lstSecondaryMatObjs.length;a++)this._lstSecondaryMatObjs[a].secondaryMaterial&&(this._Materials[this._lstSecondaryMatObjs[a].secondaryMaterial].secondaryalphacolor=0,this._lstSecondaryMatObjs[a].secondaryMatCompleted());this.resetSecondaryMatList();this._animateSecondaryMatsActive=this.animateSecondaryMats=!1;this.matAnim.setReverseMode(!1)};
infinityrt_scene.prototype.MaterialAnimStep=function(){if(this.animateSecondaryMats&&this._animateSecondaryMatsActive&&this._lstSecondaryMatObjs.length){this._animRequiresClear=!0;this.matAnim.step();for(var a=0;a<this._lstSecondaryMatObjs.length;a++)this._Materials[this._lstSecondaryMatObjs[a].secondaryMaterial].secondaryalphacolor=this.matAnim.value();this.matAnim.active||this.EndMaterialAnim();this.clearRefine()}};
infinityrt_scene.prototype.walkForMatrices=function(a,b,c,d){"undefined"!=typeof a.anim&&0>=this._refineCount&&0<this._animActive&&a.anim.step()&&(this.evaluateSceneNode(a,a.anim),d=this._animRequiresClear=!0);0==a.visible&&(c=!1);a.walkedVisible=c?1:0;if(d|=a.matrixDirty){"undefined"!=typeof a.matrix&&(b=MatrixMultiply(a.matrix,b),"undefined"!=typeof a.usermatrix&&(b=MatrixMultiply(a.usermatrix,b)));a.ltog_matrix=b;a.matrixdet=MatrixDet(a.ltog_matrix);"undefined"!=typeof a.rpmatrix&&(a.ltog_rpmatrix=
MatrixMultiply(a.rpmatrix,a.ltog_matrix));if(null!=a.mesh&&1<this._glVersionNum){b=this.gl;if(void 0==a.buffBlockInstance){var e=parseInt(a.mesh.usematerial.split("|")[1]);e=this._Materials[e];e.addInitialBlocks();a.buffBlockInstance=b.createBuffer();b.bindBuffer(b.UNIFORM_BUFFER,a.buffBlockInstance);b.bufferData(b.UNIFORM_BUFFER,this.buffBlockInstancePHSize,b.DYNAMIC_DRAW)}else b.bindBuffer(b.UNIFORM_BUFFER,a.buffBlockInstance);b.bufferSubData(b.UNIFORM_BUFFER,0,new Float32Array(a.ltog_matrix));
if(4==this.geomgen||5==this.geomgen)"undefined"==typeof a.scaleFactor&&(a.scaleFactor=(infinityrt_length([a.ltog_matrix[0],a.ltog_matrix[1],a.ltog_matrix[2]])+infinityrt_length([a.ltog_matrix[4],a.ltog_matrix[5],a.ltog_matrix[6]])+infinityrt_length([a.ltog_matrix[8],a.ltog_matrix[9],a.ltog_matrix[10]]))/3),b.bufferSubData(b.UNIFORM_BUFFER,64,new Float32Array([a.mesh._localbbmin[0],a.mesh._localbbmin[1],a.mesh._localbbmin[2],0,a.mesh._localbbmax[0],a.mesh._localbbmax[1],a.mesh._localbbmax[2],0,a.mesh._texbbmin[0],
a.mesh._texbbmin[1],a.mesh._texbbmax[0],a.mesh._texbbmax[1],a.mesh._tex2bbmin[0],a.mesh._tex2bbmin[1],a.mesh._tex2bbmax[0],a.mesh._tex2bbmax[1],a.scaleFactor,0,0,0]));b.bindBuffer(b.UNIFORM_BUFFER,null)}a.matrixDirty=!1}null!=a.mesh&&0!=c&&(e=this._Materials[a.mesh.currentMaterial],null!=e._pMaterialPtr&&(e=e._pMaterialPtr),0<e._colPlanarReflect[0]||0<e._colPlanarReflect[1]||0<e._colPlanarReflect[2])&&(this.foundPlanarReflectMaterial=!0);if("undefined"!=typeof a.children)for(b=0;b<a.children.length;b++)this.walkForMatrices(a.children[b],
a.ltog_matrix,c,d);if("undefined"!=typeof a.childrenNonDepth)for(b=0;b<a.childrenNonDepth.length;b++)this.walkForMatrices(a.childrenNonDepth[b],a.ltog_matrix,c,d)};
infinityrt_scene.prototype.IfTransparentAddToList=function(a){if("undefined"!==typeof a.ltog_matrix){var b=a.mesh,c=(new infinityrt_transform).multiply1_3by4_4(b._localmidpt,a.ltog_matrix),d=[];d[0]=this.camPosGlobal[0]-c[0];d[1]=this.camPosGlobal[1]-c[1];d[2]=this.camPosGlobal[2]-c[2];c=infinityrt_dp(d,[this.matView[8],this.matView[9],this.matView[10]]);"undefined"!=typeof a._fAlphaOffset&&(c+=1E3*a._fAlphaOffset);for(d=0;d<this._lstTransObjs.length&&!(c>this._lstTransObjs[d].sqDist);d++);this._lstTransObjs.splice(d,
0,{sqDist:c,obj:a,o_matrix:a.ltog_matrix,compiledelem:b.currentMaterial})}};function locationOf(a,b,c,d){c=c||0;d=d||b.length;var e=parseInt(c+(d-c)/2,10);return b.length&&b[e].distance!==a.distance?1>=d-c?b[e].distance>a.distance?e-1:e:b[e].distance<a.distance?locationOf(a,b,e,d):locationOf(a,b,c,e):e}function insertIntoArray(a,b){b.splice(locationOf(a,b)+1,0,a);return b}
function find_nearest_t_AABB(a,b,c){for(var d=[0,0,0],e=0,f=0;3>f;f++){d[f]=Math.abs(c[f]-a[f])<Math.abs(c[f]-b[f])?a[f]:b[f];var g=c[f]-d[f];e+=g*g}return{_dist:e,_nearest:d}}function find_furthest_t_AABB(a,b,c){for(var d=[0,0,0],e=0,f=0;3>f;f++){d[f]=Math.abs(c[f]-a[f])<Math.abs(c[f]-b[f])?b[f]:a[f];var g=c[f]-d[f];e+=g*g}return{_dist:e,_furthest:d}}
function find_nearest_t_AABB_old(a,b,c){for(var d=[0,0,0],e=0,f=0;3>f;f++){d[f]=a[f]>c[f]?a[f]:b[f]<c[f]?b[f]:c[f];var g=c[f]-d[f];e+=g*g}return{_dist:Math.sqrt(e),_nearest:d}}function find_nearest_t_AABB_new(a,b,c){for(var d=[0,0,0],e=0,f=0;3>f;f++){d[f]=a[f]>c[f]?a[f]:b[f]<c[f]?b[f]:c[f];var g=c[f]-d[f];e+=g*g}return{_dist:Math.sqrt(e),_nearest:d}}
infinityrt_scene.prototype.renderOpaqueObjectOrdered=function(){if(this.zprepass)for(var a=0;a<this.opaqueObjectsArrayOrdered.length;a+=1){if(this.opaqueObjectsArrayOrdered[a])for(var b=0;b<this.opaqueObjectsArrayOrdered[a].length;b+=1)this._printCurrentObjects&&(null==this._lastCurrentObjectList&&(this._lastCurrentObjectList=[]),this._lastCurrentObjectList.push(this.opaqueObjectsArrayOrdered[a][b].name)),0>this.opaqueObjectsArrayOrdered[a][b].matrixdet?this.gl.cullFace(this.gl.FRONT):this.gl.cullFace(this.gl.BACK),
0==this.opaqueObjectsArrayOrdered[a][b]._fPolygonOffset||this._renderingDoFDepth||this._renderingDoFDepthValues||this._renderingZPrePass||(this.gl.enable(this.gl.POLYGON_OFFSET_FILL),this.gl.polygonOffset(this._renderingZPrePass?void 0!=this.opaqueObjectsArrayOrdered[a][b]._fPolygonOffset1?this.opaqueObjectsArrayOrdered[a][b]._fPolygonOffset1+this.zprepassoffsetfactor:this.zprepassoffsetfactor:0,this._renderingZPrePass?this.opaqueObjectsArrayOrdered[a][b]._fPolygonOffset+this.zprepassoffset:this.opaqueObjectsArrayOrdered[a][b]._fPolygonOffset)),
this.opaqueObjectsArrayOrdered[a][b].doublesided&&this.gl.disable(this.gl.CULL_FACE),this.RenderGeom(this.opaqueObjectsArrayOrdered[a][b],this.opaqueObjectsArrayOrdered[a][b].mesh,this._Materials[this.opaqueObjectsArrayOrdered[a][b].mesh.currentMaterial],this.opaqueObjectsArrayOrdered[a][b].ltog_matrix,0),0==this.opaqueObjectsArrayOrdered[a][b]._fPolygonOffset||this._renderingDoFDepth||this._renderingDoFDepthValues||this._renderingZPrePass||(this.gl.polygonOffset(0,0),this.gl.disable(this.gl.POLYGON_OFFSET_FILL)),
this.opaqueObjectsArrayOrdered[a][b].doublesided&&this.gl.enable(this.gl.CULL_FACE),0>this.opaqueObjectsArrayOrdered[a][b].matrixdet&&this.gl.cullFace(this.gl.BACK)}else for(a=0;a<this.opaqueObjectsArrayOrdered.length;a++)this._printCurrentObjects&&(null==this._lastCurrentObjectList&&(this._lastCurrentObjectList=[]),this._lastCurrentObjectList.push(this.opaqueObjectsArrayOrdered[a]._obj_in.name)),0>this.opaqueObjectsArrayOrdered[a]._obj_in.matrixdet?this.gl.cullFace(this.gl.FRONT):this.gl.cullFace(this.gl.BACK),
0==this.opaqueObjectsArrayOrdered[a]._obj_in._fPolygonOffset||this._renderingDoFDepth||this._renderingDoFDepthValues||(this.gl.enable(this.gl.POLYGON_OFFSET_FILL),this.gl.polygonOffset(0,this.opaqueObjectsArrayOrdered[a]._obj_in._fPolygonOffset)),this.opaqueObjectsArrayOrdered[a]._obj_in.doublesided&&this.gl.disable(this.gl.CULL_FACE),this.RenderGeom(this.opaqueObjectsArrayOrdered[a]._obj_in,this.opaqueObjectsArrayOrdered[a]._geom,this.opaqueObjectsArrayOrdered[a]._mat,this.opaqueObjectsArrayOrdered[a]._obj_in.ltog_matrix,
0),0==this.opaqueObjectsArrayOrdered[a]._obj_in._fPolygonOffset||this._renderingDoFDepth||this._renderingDoFDepthValues||(this.gl.polygonOffset(0,0),this.gl.disable(this.gl.POLYGON_OFFSET_FILL)),this.opaqueObjectsArrayOrdered[a]._obj_in.doublesided&&this.gl.enable(this.gl.CULL_FACE),0>this.opaqueObjectsArrayOrdered[a]._obj_in.matrixdet&&this.gl.cullFace(this.gl.BACK)};
infinityrt_scene.prototype.computeBBoxFurthest=function(a){var b=0!=a.visible&&!a._bIncludeInPlanarReflect;this._renderingPlanarReflectPass&&(b=0!=a.visible);if(b&&(!this._renderingGlowPass||-1!=a.visibleGlow)){var c=a.mesh;if(null!=c&&(!a.defer||c.meshloaded)&&c.visible&&c.indices.length&&(!c.smartDefer||c.meshloaded)&&a.checkCull(this)&&(b=this._Materials[c.currentMaterial],null!=b._pMaterialPtr&&(b=b._pMaterialPtr),this.CanRender(b,!1))){var d=new infinityrt_transform;a._bIncludeInDoFCalc&&c._localbbmin&&
c._localbbmax&&(b=d.multiply1_3by4_4(c._localbbmin,a.ltog_matrix),c=d.multiply1_3by4_4(c._localbbmax,a.ltog_matrix),d=find_furthest_t_AABB(b,c,this.camPosGlobal),d._dist>this.furthestAABBCornerDist&&(this.furthestAABBCornerDist=d._dist),b=find_nearest_t_AABB(b,c,this.camPosGlobal),b._dist<this.nearestAABBCornerDist&&(this.nearestAABBCornerDist=b._dist))}if("undefined"!=typeof a.children)for(b=0;b<a.children.length;b++)this.computeBBoxFurthest(a.children[b])}};
infinityrt_scene.prototype.orderOpaqueObjects=function(a){var b=0!=a.visible&&!a._bIncludeInPlanarReflect;this._renderingPlanarReflectPass&&(b=0!=a.visible);if(b&&(!this._renderingGlowPass||-1!=a.visibleGlow)){b=a.mesh;if(null!=b&&(!a.defer||b.meshloaded)&&b.visible&&b.indices.length&&(!b.smartDefer||b.meshloaded)&&a.checkCull(this)){var c=this._Materials[b.currentMaterial];null!=c._pMaterialPtr&&(c=c._pMaterialPtr);if(this.smartDeferral)for(var d=0;d<c.textures.length;d++){var e=c.textures[d];if(e&&
e.smartDefer)return}this.CanRender(c,!1)?(d=new infinityrt_transform,this.zprepass?(this.opaqueObjectsArrayOrdered[b.currentMaterial]||(this.opaqueObjectsArrayOrdered[b.currentMaterial]=[]),this.opaqueObjectsArrayOrdered[b.currentMaterial].push(a)):(d="undefined"!=typeof a.ltog_matrix?d.multiply1_3by4_4(b._localmidpt,a.ltog_matrix):b._localmidpt,e=[],e[0]=this.camPosGlobal[0]-d[0],e[1]=this.camPosGlobal[1]-d[1],e[2]=this.camPosGlobal[2]-d[2],b={distance:infinityrt_dp(e,[this.matView[8],this.matView[9],
this.matView[10]]),_geom:b,_obj_in:a,_mat:c},insertIntoArray(b,this.opaqueObjectsArrayOrdered))):this.IfTransparentAddToList(a)}if("undefined"!=typeof a.children)for(b=0;b<a.children.length;b++)this.orderOpaqueObjects(a.children[b])}};
infinityrt_scene.prototype.renderOpaqueObject=function(a,b){var c=0!=a.visible&&!a._bIncludeInPlanarReflect;this._renderingPlanarReflectPass&&(c=0!=a.visible);if(c&&(!this._renderingGlowPass||-1!=a.visibleGlow)){c=this.gl;var d=a.mesh;if(null!=d&&(!a.defer||d.meshloaded)&&d.visible&&d.indices.length&&(!d.smartDefer||d.meshloaded)&&a.checkCull(this)){var e=this._Materials[b?d.secondaryMaterial:d.currentMaterial];null!=e._pMaterialPtr&&(e=e._pMaterialPtr);if(this.smartDeferral)for(var f=0;f<e.textures.length;f++){var g=
e.textures[f];if(g&&g.smartDefer)return}this.CanRender(e,!1)?(this._printCurrentObjects&&(null==this._lastCurrentObjectList&&(this._lastCurrentObjectList=[]),this._lastCurrentObjectList.push(a.name)),0>a.matrixdet?c.cullFace(c.FRONT):c.cullFace(c.BACK),0==a._fPolygonOffset||this._renderingDoFDepth||this._renderingDoFDepthValues||this._renderingZPrePass||(c.enable(c.POLYGON_OFFSET_FILL),c.polygonOffset(this._renderingZPrePass?void 0!=a._fPolygonOffset1?a._fPolygonOffset1+this.zprepassoffsetfactor:
this.zprepassoffsetfactor:0,this._renderingZPrePass?a._fPolygonOffset+this.zprepassoffset:a._fPolygonOffset)),a.doublesided&&c.disable(c.CULL_FACE),this.RenderGeom(a,d,e,a.ltog_matrix,0,b),0==a._fPolygonOffset||this._renderingDoFDepth||this._renderingDoFDepthValues||this._renderingZPrePass||(c.polygonOffset(0,0),c.disable(c.POLYGON_OFFSET_FILL)),a.doublesided&&c.enable(c.CULL_FACE),0>a.matrixdet&&c.cullFace(c.BACK)):this._renderingZPrePass||this.IfTransparentAddToList(a)}if("undefined"!=typeof a.children)for(c=
0;c<a.children.length;c++)this.renderOpaqueObject(a.children[c],b)}};
infinityrt_scene.prototype.renderTransparentObject=function(a){if(!this._renderingGlowPass||-1!=a.visibleGlow){var b=a.obj.mesh;if(null!=b&&(!a.obj.defer||b.meshloaded)&&b.visible&&(!b.smartDefer||b.meshloaded)){var c=this._Materials[a.compiledelem];if(this.smartDeferral)for(var d=0;d<c.textures.length;d++){var e=c.textures[d];if(e&&e.smartDefer)return}this._printCurrentObjects&&(null==this._lastCurrentObjectList&&(this._lastCurrentObjectList=[]),this._lastCurrentObjectList.push(a.obj.name));d=this.gl;
0>a.obj.matrixdet?d.cullFace(d.FRONT):d.cullFace(d.BACK);0==a.obj._fPolygonOffset||this._renderingDoFDepth||this._renderingDoFDepthValues||(d.enable(d.POLYGON_OFFSET_FILL),d.polygonOffset(0,a.obj._fPolygonOffset));a.obj.doublesided&&d.disable(d.CULL_FACE);null!=c._pMaterialPtr&&(c=c._pMaterialPtr);this.RenderGeom(a.obj,b,c,a.o_matrix,0);0==a.obj._fPolygonOffset||this._renderingDoFDepth||this._renderingDoFDepthValues||(d.polygonOffset(0,0),d.disable(d.POLYGON_OFFSET_FILL));a.obj.doublesided&&d.enable(d.CULL_FACE);
0>a.obj.matrixdet&&d.cullFace(d.BACK)}}};
infinityrt_scene.prototype.renderGeom_MatInit=function(a,b,c,d,e){var f=this.gl,g=0;this._renderingGlowPass&&0==a.visibleGlow||this._renderingZPrePass?(this._prog_black.use(this),1==this._glVersionNum&&(this._prog_black.frameDirty&&(this._prog_black.frameDirty=!1,this._prog_black.setMatrix("uMVPMatrix",this.mvp_matrix),this._prog_black.setFloat2("jitter",this._jitter)),this._prog_black.setMatrix("uOMatrix",d),4==this.geomgen||5==this.geomgen)&&(this._prog_black.setVector("bbmin",b._localbbmin),this._prog_black.setVector("bbmax",
b._localbbmax)),this.bindSkinVars(this._prog_black,a),"undefined"!=typeof this._prog_black.uniforms.a_skinweights&&(f.bindBuffer(f.ARRAY_BUFFER,b.compiled.gl_skinweights),f.vertexAttribPointer(this._prog_black.uniforms.a_skinweights,4,4==this.geomgen||5==this.geomgen?f.UNSIGNED_SHORT:f.FLOAT,!1,0,0),f.enableVertexAttribArray(this._prog_black.uniforms.a_skinweights)),f.bindBuffer(f.ARRAY_BUFFER,b.compiled.gl_pnu),f.vertexAttribPointer(this._prog_black.uniforms.aVertexPosition,3,4==this.geomgen||5==
this.geomgen?f.UNSIGNED_SHORT:f.FLOAT,!1,0,0),f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,b.compiled.gl_elements),f.enableVertexAttribArray(0)):this._renderingDoFDepth?(this._shader_mesh_depth.use(this),1==this._glVersionNum&&(this._shader_mesh_depth.frameDirty&&(this._shader_mesh_depth.frameDirty=!1,this._shader_mesh_depth.setMatrix("uMVPMatrix",this.mvp_matrix),this._shader_mesh_depth.setFloat2("jitter",this._jitter)),this._shader_mesh_depth.setMatrix("uOMatrix",d),4==this.geomgen||5==this.geomgen)&&(this._shader_mesh_depth.setVector("bbmin",
b._localbbmin),this._shader_mesh_depth.setVector("bbmax",b._localbbmax)),this.bindSkinVars(this._shader_mesh_depth,a),"undefined"!=typeof this._shader_mesh_depth.uniforms.a_skinweights&&(f.bindBuffer(f.ARRAY_BUFFER,b.compiled.gl_skinweights),f.vertexAttribPointer(this._shader_mesh_depth.uniforms.a_skinweights,4,4==this.geomgen||5==this.geomgen?f.UNSIGNED_SHORT:f.FLOAT,!1,0,0),f.enableVertexAttribArray(this._shader_mesh_depth.uniforms.a_skinweights)),f.bindBuffer(f.ARRAY_BUFFER,b.compiled.gl_pnu),
f.vertexAttribPointer(this._shader_mesh_depth.uniforms.aVertexPosition,3,4==this.geomgen||5==this.geomgen?f.UNSIGNED_SHORT:f.FLOAT,!1,0,0),f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,b.compiled.gl_elements),f.enableVertexAttribArray(0)):this._renderingDoFDepthValues?(this._shader_mesh_depthvalues.use(this),1==this._glVersionNum&&(this._shader_mesh_depthvalues.frameDirty&&(this._shader_mesh_depthvalues.frameDirty=!1,this._shader_mesh_depthvalues.setMatrix("uMVPMatrix",this.mvp_matrix),this._shader_mesh_depthvalues.setFloat2("jitter",
this._jitter)),this._shader_mesh_depthvalues.setMatrix("uOMatrix",d),4==this.geomgen||5==this.geomgen)&&(this._shader_mesh_depthvalues.setVector("bbmin",b._localbbmin),this._shader_mesh_depthvalues.setVector("bbmax",b._localbbmax)),this.bindSkinVars(this._shader_mesh_depthvalues,a),"undefined"!=typeof this._shader_mesh_depthvalues.uniforms.a_skinweights&&(f.bindBuffer(f.ARRAY_BUFFER,b.compiled.gl_skinweights),f.vertexAttribPointer(this._shader_mesh_depthvalues.uniforms.a_skinweights,4,4==this.geomgen||
5==this.geomgen?f.UNSIGNED_SHORT:f.FLOAT,!1,0,0),f.enableVertexAttribArray(this._shader_mesh_depthvalues.uniforms.a_skinweights)),f.bindBuffer(f.ARRAY_BUFFER,b.compiled.gl_pnu),f.vertexAttribPointer(this._shader_mesh_depthvalues.uniforms.aVertexPosition,3,4==this.geomgen||5==this.geomgen?f.UNSIGNED_SHORT:f.FLOAT,!1,0,0),f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,b.compiled.gl_elements),f.enableVertexAttribArray(0)):this._renderingPickPass?(this._shader_prog_pick.use(this),1==this._glVersionNum&&(this._shader_prog_pick.setMatrix("uMVPMatrix",
this.mvp_matrix),this._shader_prog_pick.setFloat2("jitter",this._jitter),this._shader_prog_pick.setMatrix("uOMatrix",d),4==this.geomgen||5==this.geomgen)&&(this._shader_prog_pick.setVector("bbmin",b._localbbmin),this._shader_prog_pick.setVector("bbmax",b._localbbmax)),this._shader_prog_pick.setVector4("instanceid",a._instancecol),this.bindSkinVars(this._shader_prog_pick,a),"undefined"!=typeof this._shader_prog_pick.uniforms.a_skinweights&&(f.bindBuffer(f.ARRAY_BUFFER,b.compiled.gl_skinweights),f.vertexAttribPointer(this._shader_prog_pick.uniforms.a_skinweights,
4,4==this.geomgen||5==this.geomgen?f.UNSIGNED_SHORT:f.FLOAT,!1,0,0),f.enableVertexAttribArray(this._shader_prog_pick.uniforms.a_skinweights)),f.bindBuffer(f.ARRAY_BUFFER,b.compiled.gl_pnu),f.vertexAttribPointer(this._shader_prog_pick.uniforms.aVertexPosition,3,4==this.geomgen||5==this.geomgen?f.UNSIGNED_SHORT:f.FLOAT,!1,0,0),f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,b.compiled.gl_elements),f.enableVertexAttribArray(0)):(g=1,c.use(this),1==this._glVersionNum&&(c.shader.frameDirty&&(c.shader.frameDirty=!1,
f.uniformMatrix4fv(c.shader.uniforms.uMVPMatrix,!1,this.mvp_matrix),f.uniform3fv(c.shader.uniforms.uCamPos,this.camPosGlobal),c.shader.setFloat2("jitter",this._jitter),c.shader.setFloat2("viewportsize",[this.viewwidth,this.viewheight]),c.shader.setInt("aarefinecount",this._refineCount),c.shader.setFloat("scenesize",(this.xrframe?.5:1)*infinityrt_length(this.children[0].matrix)),c.shader.setFloat("fovfactor",this.getFoVFactor()),c.shader.setFloat("planarReflFlip",this._renderingPlanarReflectPass?-1:
1)),f.uniformMatrix4fv(c.shader.uniforms.uOMatrix,!1,d),4==this.geomgen||5==this.geomgen)&&(c.shader.setVector("bbmin",b._localbbmin),c.shader.setVector("bbmax",b._localbbmax),c.shader.setFloat2("texbbmin",b._texbbmin),c.shader.setFloat2("texbbmax",b._texbbmax),1<this.uvch&&(c.shader.setFloat2("tex2bbmin",b._tex2bbmin),c.shader.setFloat2("tex2bbmax",b._tex2bbmax))),1==e&&c.shader.setInt("refractionmode",1),"Glass_Refracted"==c.type?(c.shader.setVector("camx",[this._nav._navMatLastView[0],this._nav._navMatLastView[1],
this._nav._navMatLastView[2]]),c.shader.setVector("camy",[this._nav._navMatLastView[4],this._nav._navMatLastView[5],this._nav._navMatLastView[6]]),c.shader.setVector("camz",[this._nav._navMatLastView[8],this._nav._navMatLastView[9],this._nav._navMatLastView[10]]),f.activeTexture(f.TEXTURE0+c.nTexUnit),f.bindTexture(f.TEXTURE_2D,this.rttRefractTexture),c.shader.setInt("refractiontexture",c.nTexUnit)):("Modular"==c.type||"Match"==c.type&&0!=c.amboccusevertcol)&&c.shader.setInt("amboccchannel",a._nAmbOccChannel),
this.bindSkinVars(c.shader,a),c.bindObject(b));1<this._glVersionNum&&(null==c.shader&&c.CheckShaderCompilation(),this.uniBlockFrameDirty&&(this.uniBlockFrameDirty=!1,f.bindBuffer(f.UNIFORM_BUFFER,this.buffBlockFrame),f.bufferSubData(f.UNIFORM_BUFFER,0,new Float32Array(this.mvp_matrix)),f.bufferSubData(f.UNIFORM_BUFFER,64,new Float32Array([this.camPosGlobal[0],this.camPosGlobal[1],this.camPosGlobal[2],0,this._jitter[0],this._jitter[1],this.viewwidth,this.viewheight,(this.xrframe?.5:1)*infinityrt_length(this.children[0].matrix),
this.getFoVFactor(),this._renderingPlanarReflectPass?-1:1])),f.bufferSubData(f.UNIFORM_BUFFER,108,new Int32Array([this._refineCount])),f.bindBuffer(f.UNIFORM_BUFFER,null)),(b=c.shader.uniforms.BlockFrame)&&f.bindBufferBase(f.UNIFORM_BUFFER,b,this.buffBlockFrame),(c=c.shader.uniforms.BlockInstance)&&f.bindBufferBase(f.UNIFORM_BUFFER,c,a.buffBlockInstance));return g};
infinityrt_scene.prototype.bindSkinVars=function(a,b){if(this.hasDeformation&&(a.setInt("numBones",void 0!=b.joints?b.joints.length:0),void 0!=b.joints))for(var c=0;c<b.joints.length&&4>c;c++){var d=b.joints[c];if(null==d.linkcache){var e=d.linkname;b.refEnv&&(e=b.refEnv+":"+e);d.linkcache=this.getInstanceByNameIncEnv(e)}null!=d.linkcache&&a.setMatrix("matBone["+c+"]",MatrixMultiply(d.linkmatrix,d.linkcache.ltog_matrix))}};
infinityrt_scene.prototype.getFoVFactor=function(){return 1/(Math.tan(this.fovy/180*M_PI)/Math.tan(this.fovyOriginal/180*M_PI))};
infinityrt_scene.prototype.RenderGeom=function(a,b,c,d,e,f){null==b.compiled&&b.loadToCard(this);"undefined"!=typeof f&&c.SetSecondaryMat(f);d=this.renderGeom_MatInit(a,b,c,d,e);0!=d&&c.shader.attribinit(1,c);this._renderingPlanarReflectPass&&c.NeutralMaterial_ToneMapSettings(!0);this._renderingDoFDepth&&!a._bIncludeInDoFCalc&&this.gl.colorMask(!0,!0,!0,!1);"undefined"!=typeof f&&(this.gl.enable(this.gl.DEPTH_TEST),this.gl.depthFunc(this.gl.EQUAL),this.gl.enable(this.gl.BLEND),this.gl.depthMask(!1));
this.gl.drawElements(this.gl.TRIANGLES,b.indiceslen,b.type,0);"undefined"!=typeof f&&(c.SetSecondaryMat(!1),this.gl.disable(this.gl.BLEND),this.gl.depthFunc(this.gl.LEQUAL),this.gl.depthMask(!0));this._renderingDoFDepth&&!a._bIncludeInDoFCalc&&this.gl.colorMask(!0,!0,!0,!0);this._renderingPlanarReflectPass&&c.NeutralMaterial_ToneMapSettings(!1);0!=d&&c.shader.attribinit(0,c);1==e&&c.shader.setInt("refractionmode",0)};
infinityrt_scene.prototype.CanRender=function(a,b){if(b){if("undefined"!=typeof a.textures[TEXTURE_MAP_ALPHATEX]||"Glass"==a.type||"Match"==a.type&&1>a.alphacolor||"Unlit"==a.type&&1>a.alphacolor||"ARKit"==a.type&&"undefined"!=a.textures[TEXTURE_MAP_DIFFUSETEX]||"Modular"==a.type&&a._transparent||"Ambient"==a.type&&"undefined"!=typeof a.dynambocc&&a.dynambocc.inalpha)return!0}else if(!("undefined"!=typeof a.textures[TEXTURE_MAP_ALPHATEX]||"Glass"==a.type||"Match"==a.type&&1>a.alphacolor||"Reflective"==
a.type&&1>a.alphacolor||"Unlit"==a.type&&1>a.alphacolor||"ARKit"==a.type&&"undefined"!=a.textures[TEXTURE_MAP_DIFFUSETEX]||"Modular"==a.type&&a._transparent||"Ambient"==a.type&&"undefined"!=typeof a.dynambocc&&a.dynambocc.inalpha))return!0;return!1};
infinityrt_scene.prototype.initTextureFramebuffer=function(){var a=this.gl;this.rttFramebuffer=a.createFramebuffer();a.bindFramebuffer(a.FRAMEBUFFER,this.rttFramebuffer);if(1==this._glVersionNum)this.rttTexture=a.createTexture(),a.bindTexture(a.TEXTURE_2D,this.rttTexture),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.LINEAR),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,
a.CLAMP_TO_EDGE),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,this.viewwidth,this.viewheight,0,a.RGBA,a.UNSIGNED_BYTE,null),a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,this.rttTexture,0),this.extDepTex?(this.rttDepthTex=a.createTexture(),a.bindTexture(a.TEXTURE_2D,this.rttDepthTex),a.texImage2D(a.TEXTURE_2D,0,a.DEPTH_COMPONENT,this.viewwidth,this.viewheight,0,a.DEPTH_COMPONENT,a.UNSIGNED_INT,null),a.framebufferTexture2D(a.FRAMEBUFFER,a.DEPTH_ATTACHMENT,a.TEXTURE_2D,this.rttDepthTex,
0)):(this.rttRenderBuffer=a.createRenderbuffer(),a.bindRenderbuffer(a.RENDERBUFFER,this.rttRenderBuffer),a.renderbufferStorage(a.RENDERBUFFER,a.DEPTH_COMPONENT16,this.viewwidth,this.viewheight),a.framebufferRenderbuffer(a.FRAMEBUFFER,a.DEPTH_ATTACHMENT,a.RENDERBUFFER,this.rttRenderBuffer));else if(2==this._glVersionNum){var b=a.createRenderbuffer();a.bindRenderbuffer(a.RENDERBUFFER,b);this.isMACNoAA||this.isiOSNoAA?a.renderbufferStorage(a.RENDERBUFFER,a.RGBA8,this.viewwidth,this.viewheight):a.renderbufferStorageMultisample(a.RENDERBUFFER,
this.msaaLvl,a.RGBA8,this.viewwidth,this.viewheight);this.rttRenderBuffer=a.createRenderbuffer();a.bindRenderbuffer(a.RENDERBUFFER,this.rttRenderBuffer);this.isMACNoAA||this.isiOSNoAA?a.renderbufferStorage(a.RENDERBUFFER,a.DEPTH_COMPONENT24,this.viewwidth,this.viewheight):a.renderbufferStorageMultisample(a.RENDERBUFFER,this.msaaLvl,a.DEPTH_COMPONENT24,this.viewwidth,this.viewheight);a.framebufferRenderbuffer(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.RENDERBUFFER,b);a.framebufferRenderbuffer(a.FRAMEBUFFER,
a.DEPTH_ATTACHMENT,a.RENDERBUFFER,this.rttRenderBuffer);this.rttDownsampleFramebuffer=a.createFramebuffer();a.bindFramebuffer(a.FRAMEBUFFER,this.rttDownsampleFramebuffer);this.rttTexture=a.createTexture();a.bindTexture(a.TEXTURE_2D,this.rttTexture);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.LINEAR);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE);a.texImage2D(a.TEXTURE_2D,
0,a.RGBA,this.viewwidth,this.viewheight,0,a.RGBA,a.UNSIGNED_BYTE,null);a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,this.rttTexture,0)}this.rttAccumFramebufferA=a.createFramebuffer();a.bindFramebuffer(a.FRAMEBUFFER,this.rttAccumFramebufferA);this.rttAccumTextureA=a.createTexture();a.bindTexture(a.TEXTURE_2D,this.rttAccumTextureA);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.LINEAR);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR);a.texParameteri(a.TEXTURE_2D,
a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE);a.texImage2D(a.TEXTURE_2D,0,a.RGBA,this.viewwidth,this.viewheight,0,a.RGBA,a.UNSIGNED_BYTE,null);a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,this.rttAccumTextureA,0);this.rttAccumFramebufferB=a.createFramebuffer();a.bindFramebuffer(a.FRAMEBUFFER,this.rttAccumFramebufferB);this.rttAccumTextureB=a.createTexture();a.bindTexture(a.TEXTURE_2D,this.rttAccumTextureB);a.texParameteri(a.TEXTURE_2D,
a.TEXTURE_MAG_FILTER,a.LINEAR);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE);a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE);a.texImage2D(a.TEXTURE_2D,0,a.RGBA,this.viewwidth,this.viewheight,0,a.RGBA,a.UNSIGNED_BYTE,null);a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,this.rttAccumTextureB,0);this.rttAccumTextureSource=this.rttAccumTextureB;this.rttAccumFramebufferCurrent=this.rttAccumFramebufferA;
a.bindTexture(a.TEXTURE_2D,null);a.bindRenderbuffer(a.RENDERBUFFER,null);a.bindFramebuffer(a.FRAMEBUFFER,null)};
infinityrt_scene.prototype.unloadTextureFramebuffer=function(){var a=this.gl;a.deleteTexture(this.rttTexture);this.rttTexture=null;a.deleteFramebuffer(this.rttFramebuffer);this.rttFramebuffer=null;2==this._glVersionNum&&(a.deleteFramebuffer(this.rttDownsampleFramebuffer),this.rttDownsampleFramebuffer=null);this.rttDepthTex?(a.deleteTexture(this.rttDepthTex),this.rttDepthTex=null):(a.deleteRenderbuffer(this.rttRenderBuffer),this.rttRenderBuffer=null);a.deleteTexture(this.rttAccumTextureA);this.rttAccumTextureA=
null;a.deleteTexture(this.rttAccumTextureB);this.rttAccumTextureB=null;a.deleteFramebuffer(this.rttAccumFramebufferA);this.rttAccumFramebufferA=null;a.deleteFramebuffer(this.rttAccumFramebufferB);this.rttAccumFramebufferCurrent=this.rttAccumTextureSource=this.currentFrameBuffer=this.rttAccumFramebufferB=null};
infinityrt_scene.prototype.compileRefinementShader=function(a){this.aaref={ready:!1};this.aaref.vertex=infinityrt_compileShader(a,this.getShaderHeaderStd()+shaderInfinityRT_Refinevs,"x-shader/x-vertex");this.aaref.fragment=infinityrt_compileShader(a,this.getShaderHeaderStd()+shaderInfinityRT_Refinefs,"x-shader/x-fragment");this.aaref.prog=a.createProgram();a.attachShader(this.aaref.prog,this.aaref.vertex);a.attachShader(this.aaref.prog,this.aaref.fragment);a.linkProgram(this.aaref.prog)};
infinityrt_scene.prototype.checkRefinementShader=function(a){a.getProgramParameter(this.aaref.prog,a.LINK_STATUS)?(this.aaref.ATTRIB_VERTEX=a.getAttribLocation(this.aaref.prog,"a_position"),this.aaref.ATTRIB_TEX0=a.getAttribLocation(this.aaref.prog,"a_tex0"),this.aaref.uniforms=[a.getUniformLocation(this.aaref.prog,"logoTex"),a.getUniformLocation(this.aaref.prog,"solidAlpha"),a.getUniformLocation(this.aaref.prog,"solidColor"),a.getUniformLocation(this.aaref.prog,"prevTex"),a.getUniformLocation(this.aaref.prog,
"sharpenscale"),a.getUniformLocation(this.aaref.prog,"renderstep")]):(this.aaref.vertex&&!a.getShaderParameter(this.aaref.vertex,a.COMPILE_STATUS)?console.log("***Vertex Ref compile error: ",a.getShaderInfoLog(this.aaref.vertex)):this.aaref.fragment&&!a.getShaderParameter(this.aaref.fragment,a.COMPILE_STATUS)&&console.log("***Fragment Ref compile error: ",a.getShaderInfoLog(this.aaref.fragment)),console.log("***Shader Ref link error: "+a.getProgramInfoLog(this.aaref.prog)));a.deleteShader(this.aaref.vertex);
a.deleteShader(this.aaref.fragment);this.aaref.vertex=null;this.aaref.fragment=null;this.aaref.ready=!0};
infinityrt_scene.prototype.renderRefinement=function(a,b,c,d,e){d=this.gl;this.aaref.ready||this.checkRefinementShader(d);1==c&&d.clear(d.COLOR_BUFFER_BIT);d.useProgram(this.aaref.prog);d.uniform1i(this.aaref.uniforms[0],0);d.uniform1f(this.aaref.uniforms[1],c);d.uniform1i(this.aaref.uniforms[2],1);d.uniform1i(this.aaref.uniforms[3],1);d.uniform1f(this.aaref.uniforms[4],e);d.uniform2f(this.aaref.uniforms[5],1/this.viewwidth,1/this.viewheight);"undefined"==typeof this.buffProgressRefine&&(this.buffProgressRefine=
d.createBuffer(),d.bindBuffer(d.ARRAY_BUFFER,this.buffProgressRefine),d.bufferData(d.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,1,1]),d.STATIC_DRAW),this.buffProgressRefine.itemSize=2,this.buffProgressRefine.numItems=4);d.bindBuffer(d.ARRAY_BUFFER,this.buffProgressRefine);d.vertexAttribPointer(this.aaref.ATTRIB_VERTEX,2,d.FLOAT,!1,0,0);d.enableVertexAttribArray(this.aaref.ATTRIB_VERTEX);"undefined"==typeof this.buffProgressRefineCoords&&(this.buffProgressRefineCoords=d.createBuffer(),d.bindBuffer(d.ARRAY_BUFFER,
this.buffProgressRefineCoords),d.bufferData(d.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,1,1]),d.STATIC_DRAW),this.buffProgressRefineCoords.itemSize=2,this.buffProgressRefineCoords.numItems=4);d.bindBuffer(d.ARRAY_BUFFER,this.buffProgressRefineCoords);d.vertexAttribPointer(this.aaref.ATTRIB_TEX0,2,d.FLOAT,!1,0,0);d.enableVertexAttribArray(this.aaref.ATTRIB_TEX0);d.disable(d.DEPTH_TEST);d.disable(d.BLEND);d.activeTexture(d.TEXTURE0);d.bindTexture(d.TEXTURE_2D,a);d.activeTexture(d.TEXTURE1);d.bindTexture(d.TEXTURE_2D,
b);d.drawArrays(d.TRIANGLE_STRIP,0,this.buffProgressRefine.numItems);d.enable(d.DEPTH_TEST)};infinityrt_scene.prototype.clearRefine=function(){this._refineCount=-1};
infinityrt_scene.prototype.renderRefractionObject=function(a,b){if(0!=a.walkedVisible&&"undefined"!==typeof a.ltog_matrix){var c;var d=a.mesh;if(null!=d&&(!a.defer||d.meshloaded)&&d.visible&&d.indices.length&&(!d.smartDefer||d.meshloaded)){var e=this._Materials[d.currentMaterial];null!=e._pMaterialPtr&&(e=e._pMaterialPtr);if(this.smartDeferral)for(c=0;c<e.textures.length;c++){var f=e.textures[c];if(f&&f.smartDefer)return}this.CanRender(e,b)?(c=this.gl,f=MatrixDet(a.ltog_matrix),0>f?c.cullFace(c.FRONT):
c.cullFace(c.BACK),0!=a._fPolygonOffset&&(c.enable(c.POLYGON_OFFSET_FILL),c.polygonOffset(0,a._fPolygonOffset)),a.doublesided&&c.disable(c.CULL_FACE),this.RenderGeom(a,d,e,a.ltog_matrix,1),0!=a._fPolygonOffset&&(c.polygonOffset(0,0),c.disable(c.POLYGON_OFFSET_FILL)),a.doublesided&&c.enable(c.CULL_FACE),0>f&&c.cullFace(c.BACK)):b||this.IfTransparentAddToList(a)}if("undefined"!=typeof a.children)for(d=0;d<a.children.length;d++)this.renderRefractionObject(a.children[d],b)}};
infinityrt_scene.prototype.renderRefractionTexture=function(){var a=this.gl;if(null==this.rttRefractFramebuffer||this.refractionwidth!=this.viewwidth||this.refractionheight!=this.viewheight)null!=this.rttRefractFramebuffer&&(a.deleteTexture(this.rttRefractTexture),a.deleteFramebuffer(this.rttRefractFramebuffer),a.deleteRenderbuffer(this.rttRefractRenderBuffer)),this.rttRefractFramebuffer=a.createFramebuffer(),a.bindFramebuffer(a.FRAMEBUFFER,this.rttRefractFramebuffer),this.rttRefractTexture=a.createTexture(),
a.bindTexture(a.TEXTURE_2D,this.rttRefractTexture),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,a.LINEAR),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,a.LINEAR),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,this.viewwidth,this.viewheight,0,a.RGBA,a.UNSIGNED_BYTE,null),this.refractionwidth=this.viewwidth,this.refractionheight=this.viewheight,this.rttRefractRenderBuffer=a.createRenderbuffer(),
a.bindRenderbuffer(a.RENDERBUFFER,this.rttRefractRenderBuffer),a.renderbufferStorage(a.RENDERBUFFER,1<this._glVersionNum?a.DEPTH_COMPONENT24:a.DEPTH_COMPONENT16,this.viewwidth,this.viewheight),a.framebufferTexture2D(a.FRAMEBUFFER,a.COLOR_ATTACHMENT0,a.TEXTURE_2D,this.rttRefractTexture,0),a.framebufferRenderbuffer(a.FRAMEBUFFER,a.DEPTH_ATTACHMENT,a.RENDERBUFFER,this.rttRefractRenderBuffer),a.bindTexture(a.TEXTURE_2D,null),a.bindRenderbuffer(a.RENDERBUFFER,null),a.bindFramebuffer(a.FRAMEBUFFER,null);
a.bindFramebuffer(a.FRAMEBUFFER,this.rttRefractFramebuffer);a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT);0<this._backdroptexturename.length&&this._backdropvisiblerefract&&this.renderBackdrop();if(0<this._lstNonDepthObjects.length){this._lstTransObjs=[];var b=this.p_matrix,c=this.projDepths;this.p_matrix=this.getProjectionMatrix(this.sceneRadiusNonDepth);this.mvp_matrix=MatrixMultiply(this.mv_matrix,this.p_matrix);this.FrameDirty();for(var d=0;d<this._lstNonDepthObjects.length;d++)this.renderRefractionObject(this._lstNonDepthObjects[d],
!1);this.projDepths=c;this.p_matrix=b;this.mvp_matrix=MatrixMultiply(this.mv_matrix,this.p_matrix);this.FrameDirty();a.clear(a.DEPTH_BUFFER_BIT)}this._lstTransObjs=[];for(d=0;d<this.lstRefractionNodes.length;d++)this.renderRefractionObject(this.lstRefractionNodes[d],!1);if(this._lstTransObjs.length){this.hasBrightReflections?a.blendFuncSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE):a.blendFuncSeparate(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE);a.enable(a.BLEND);for(d=0;d<this._lstTransObjs.length;d++)this.renderRefractionObject(this._lstTransObjs[d].obj,
!0);a.disable(a.BLEND)}a.bindFramebuffer(a.FRAMEBUFFER,this.currentFrameBuffer)};
infinityrt_scene.prototype.CreateFBOTargetMSAA=function(a,b,c){if(1==this._glVersionNum)return this.CreateFBOTarget(a,b,c);var d={_nFBOWidth:b,_nFBOHeight:c},e=this.gl;d._nFBO=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,d._nFBO);d._nFBOColRBO=e.createRenderbuffer();e.bindRenderbuffer(e.RENDERBUFFER,d._nFBOColRBO);this.isMACNoAA||this.isiOSNoAA?e.renderbufferStorage(e.RENDERBUFFER,e.RGBA8,b,c):e.renderbufferStorageMultisample(e.RENDERBUFFER,this.msaaLvl,e.RGBA8,b,c);e.framebufferRenderbuffer(e.FRAMEBUFFER,
e.COLOR_ATTACHMENT0,e.RENDERBUFFER,d._nFBOColRBO);a&&(d._nFBODepthRBO=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,d._nFBODepthRBO),this.isMACNoAA||this.isiOSNoAA?e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_COMPONENT32F,b,c):e.renderbufferStorageMultisample(e.RENDERBUFFER,this.msaaLvl,e.DEPTH_COMPONENT32F,b,c),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,d._nFBODepthRBO));d._nFBODown=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,d._nFBODown);this.RTDoFQuick&&
1<this._glVersionNum&&(d._nFBODepthTex=e.createTexture(),e.bindTexture(e.TEXTURE_2D,d._nFBODepthTex),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,e.DEPTH_COMPONENT32F,b,c,0,e.DEPTH_COMPONENT,e.FLOAT,null),e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,
d._nFBODepthTex,0));d._nFBOTex=e.createTexture();e.bindTexture(e.TEXTURE_2D,d._nFBOTex);e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR);e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR);e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE);e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE);e.texImage2D(e.TEXTURE_2D,0,e.RGBA,b,c,0,e.RGBA,e.UNSIGNED_BYTE,null);e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,d._nFBOTex,0);e.bindTexture(e.TEXTURE_2D,
null);e.bindRenderbuffer(e.RENDERBUFFER,null);e.bindFramebuffer(e.FRAMEBUFFER,null);return d};
infinityrt_scene.prototype.CreateFBOTarget=function(a,b,c,d){b={_nFBOWidth:b,_nFBOHeight:c,_nFBODown:null};c=this.gl;b._nFBO=c.createFramebuffer();c.bindFramebuffer(c.FRAMEBUFFER,b._nFBO);b._nFBOTex=c.createTexture();c.bindTexture(c.TEXTURE_2D,b._nFBOTex);c.texParameteri(c.TEXTURE_2D,c.TEXTURE_MAG_FILTER,c.LINEAR);c.texParameteri(c.TEXTURE_2D,c.TEXTURE_MIN_FILTER,c.LINEAR);c.texParameteri(c.TEXTURE_2D,c.TEXTURE_WRAP_S,c.CLAMP_TO_EDGE);c.texParameteri(c.TEXTURE_2D,c.TEXTURE_WRAP_T,c.CLAMP_TO_EDGE);
d&&1<this._glVersionNum?c.texImage2D(c.TEXTURE_2D,0,c.RGB10_A2,b._nFBOWidth,b._nFBOHeight,0,c.RGBA,c.UNSIGNED_INT_2_10_10_10_REV,null):c.texImage2D(c.TEXTURE_2D,0,c.RGBA,b._nFBOWidth,b._nFBOHeight,0,c.RGBA,c.UNSIGNED_BYTE,null);a&&(this.extDepTex?(b._DepthTex=c.createTexture(),c.bindTexture(c.TEXTURE_2D,b._DepthTex),c.texImage2D(c.TEXTURE_2D,0,c.DEPTH_COMPONENT,b._nFBOWidth,b._nFBOHeight,0,c.DEPTH_COMPONENT,c.UNSIGNED_INT,null)):(b._nFBODepthRBO=c.createRenderbuffer(),c.bindRenderbuffer(c.RENDERBUFFER,
b._nFBODepthRBO),c.renderbufferStorage(c.RENDERBUFFER,c.DEPTH_COMPONENT32F,b._nFBOWidth,b._nFBOHeight)));c.framebufferTexture2D(c.FRAMEBUFFER,c.COLOR_ATTACHMENT0,c.TEXTURE_2D,b._nFBOTex,0);a&&(this.extDepTex?c.framebufferTexture2D(c.FRAMEBUFFER,c.DEPTH_ATTACHMENT,c.TEXTURE_2D,b._DepthTex,0):c.framebufferRenderbuffer(c.FRAMEBUFFER,c.DEPTH_ATTACHMENT,c.RENDERBUFFER,b._nFBODepthRBO));c.bindTexture(c.TEXTURE_2D,null);c.bindRenderbuffer(c.RENDERBUFFER,null);c.bindFramebuffer(c.FRAMEBUFFER,null);return b};
infinityrt_scene.prototype.DeleteFBOTarget=function(a){var b=this.gl;a._nFBODepthRBO&&b.deleteRenderbuffer(a._nFBODepthRBO);a._DepthTex&&b.deleteTexture(a._nFBOTex);a._nFBOColRBO&&b.deleteRenderbuffer(a._nFBOColRBO);b.deleteTexture(a._nFBOTex);a._nFBODown&&b.deleteFramebuffer(a._nFBODown);b.deleteFramebuffer(a._nFBO);return null};
infinityrt_scene.prototype.RenderOrthoQuad=function(a,b){var c=this.gl;null!=a?(c.bindFramebuffer(c.FRAMEBUFFER,a._nFBO),c.viewport(0,0,a._nFBOWidth,a._nFBOHeight),c.clear(c.COLOR_BUFFER_BIT|c.DEPTH_BUFFER_BIT)):(c.bindFramebuffer(c.FRAMEBUFFER,this.currentFrameBuffer),null!=this.drawFBO?c.viewport(0,0,this.drawFBO._nFBOWidth,this.drawFBO._nFBOHeight):c.viewport(0,0,this.viewwidth,this.viewheight));"undefined"==typeof this.buffProgressRefine&&(this.buffProgressRefine=c.createBuffer(),c.bindBuffer(c.ARRAY_BUFFER,
this.buffProgressRefine),c.bufferData(c.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,1,1]),c.STATIC_DRAW),this.buffProgressRefine.itemSize=2,this.buffProgressRefine.numItems=4);c.bindBuffer(c.ARRAY_BUFFER,this.buffProgressRefine);c.vertexAttribPointer(b.uniforms.position,2,c.FLOAT,!1,0,0);c.enableVertexAttribArray(b.uniforms.position);"undefined"==typeof this.buffProgressRefineCoords&&(this.buffProgressRefineCoords=c.createBuffer(),c.bindBuffer(c.ARRAY_BUFFER,this.buffProgressRefineCoords),c.bufferData(c.ARRAY_BUFFER,
new Float32Array([0,0,1,0,0,1,1,1]),c.STATIC_DRAW),this.buffProgressRefineCoords.itemSize=2,this.buffProgressRefineCoords.numItems=4);c.bindBuffer(c.ARRAY_BUFFER,this.buffProgressRefineCoords);c.vertexAttribPointer(b.uniforms.uv,2,c.FLOAT,!1,0,0);c.enableVertexAttribArray(b.uniforms.uv);c.disable(c.DEPTH_TEST);c.drawArrays(c.TRIANGLE_STRIP,0,this.buffProgressRefine.numItems);c.enable(c.DEPTH_TEST);c.disableVertexAttribArray(b.uniforms.position);c.disableVertexAttribArray(b.uniforms.uv)};
var g_vertex_LuminosityHighPassShaderWGL2="#version 300 es\n in vec2 position; in vec2 uv; out vec2 vUv;\n void main() { vUv = uv; gl_Position = vec4(position, 0.0, 1.0); }",g_vertex_LuminosityHighPassShader="attribute vec2 position; attribute vec2 uv; varying vec2 vUv;\n void main() { vUv = uv; gl_Position = vec4(position, 0.0, 1.0); }",g_frag_LuminosityHighPassShader="#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nuniform sampler2D tDiffuse;\nuniform vec3 defaultColor;uniform float defaultOpacity;uniform float luminosityThreshold;uniform float smoothWidth;varying vec2 vUv;void main() {vec4 texel = texture2D( tDiffuse, vUv );vec3 luma = vec3( 0.57735, 0.57735, 0.57735 );float v = dot( texel.xyz, luma );vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );gl_FragColor = mix( outputColor, texel, alpha );}",
g_frag_SeperableBlurMaterial="#ifdef GL_FRAGMENT_PRECISION_HIGH\n precision highp float;\n #else\n precision mediump float;\n #endif\n varying vec2 vUv;\nuniform sampler2D colorTexture;\nuniform vec2 texSize;\nuniform vec2 direction;\nuniform int alphamode;\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / texSize;\nfloat fSigma = float(SIGMA);\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\nfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = direction * invSize * x;\nvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\nvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\ndiffuseSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\nif (alphamode == 1)\ngl_FragColor = diffuseSum/weightSum;\nelse\ngl_FragColor = vec4(diffuseSum.rgb/weightSum, 1.0);\n}",
g_frag_CompositeMaterial="#ifdef GL_FRAGMENT_PRECISION_HIGH\n     precision highp float;\n     #else\n     precision mediump float;\n     #endif\n     varying vec2 vUv;\tuniform sampler2D blurTexture1;\tuniform sampler2D blurTexture2;\tuniform sampler2D blurTexture3;\tuniform sampler2D blurTexture4;\tuniform sampler2D blurTexture5;    uniform sampler2D origTexture;     uniform float bloomStrength;    uniform float bloomPower;\tuniform float bloomRadius;\tuniform float bloomFactors[NUM_MIPS];\t/*uniform vec3 bloomTintColors[NUM_MIPS];*/    uniform int applytobkgrd; \tfloat lerpBloomFactor(const in float factor) { \tfloat mirrorFactor = 1.2 - factor;\treturn mix(factor, mirrorFactor, bloomRadius);\t}\tvoid main() {    if (applytobkgrd == 0 && texture2D(origTexture, vUv).a == 0.0)         discard; \tgl_FragColor.rgb = pow(bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * texture2D(blurTexture1, vUv).rgb + \tlerpBloomFactor(bloomFactors[1]) * texture2D(blurTexture2, vUv).rgb + \tlerpBloomFactor(bloomFactors[2]) * texture2D(blurTexture3, vUv).rgb + \tlerpBloomFactor(bloomFactors[3]) * texture2D(blurTexture4, vUv).rgb + \tlerpBloomFactor(bloomFactors[4]) * texture2D(blurTexture5, vUv).rgb ), vec3(bloomPower));\t}",
g_vert_BlackShader="\n     attribute vec3 aVertexPosition;    \n#if skinned > 0\n    uniform int numBones;    uniform mat4 matBone[4];    attribute vec4 a_skinweights;    \n#endif\n    uniform mat4 uMVPMatrix;    uniform mat4 uOMatrix;    uniform vec2 jitter;\n#if geomgen == 4 || geomgen == 5\n    uniform vec3 bbmin;    uniform vec3 bbmax;\n#endif\n    void main(void)     {\n#if geomgen == 4\n        vec3 v = (aVertexPosition / vec3(65535.0)) * (bbmax - bbmin) + bbmin;        vec4 vPosition = uOMatrix * vec4(v, 1.0);\n#elif geomgen == 5\n        vec3 v = (aVertexPosition / vec3(16383.0)) * (bbmax - bbmin) + bbmin;        vec4 vPosition = uOMatrix * vec4(v, 1.0);\n#elif eScale\n        vec3 vertpos = aVertexPosition;        vec3 frac = (vertpos - floor(vertpos))*6.59623;        vertpos -= (step(0.5, frac - floor(frac))*2.0 - 1.0)*float(eScale);        vec4 vPosition = uOMatrix * vec4(vertpos, 1.0);\n#else\n        vec4 vPosition = uOMatrix * vec4(aVertexPosition, 1.0);\n#endif\n        \n#if skinned > 0\n        if (numBones > 0) {            vec4 tvert = vec4(0.0);        \n#if geomgen == 5\n            vec4 skinweights = a_skinweights / vec4(16383.0);         \n#else\n            vec4 skinweights = a_skinweights;         \n#endif\n            for (int boneIdx = 0; boneIdx < 4; boneIdx++) {\t\t\t    if (boneIdx >= numBones)                    break;                tvert += skinweights[boneIdx] * (matBone[boneIdx] * vec4(v, 1.0));            }        vPosition = tvert;        }        \n#endif\n        gl_Position = uMVPMatrix * vPosition;\t    gl_Position.xy += jitter * gl_Position.w;    }",
g_es3_vert_BlackShader="\n     invariant gl_Position;\n    in vec3 aVertexPosition;\n    \n#if skinned > 0\n    uniform int numBones;    uniform mat4 matBone[4];    in vec4 a_skinweights;    \n#endif\nSIRT_BLOCKVERTEX_INSERT\n    void main(void)     {\n#if geomgen == 4\n        vec3 v = (aVertexPosition / vec3(65535.0)) * (bbmax.xyz - bbmin.xyz) + bbmin.xyz;        vec4 vPosition = uOMatrix * vec4(v, 1.0);\n#elif geomgen == 5\n        vec3 v = (aVertexPosition / vec3(16383.0)) * (bbmax.xyz - bbmin.xyz) + bbmin.xyz;        vec4 vPosition = uOMatrix * vec4(v, 1.0);\n#elif eScale\n        vec3 vertpos = aVertexPosition;        vec3 frac = (vertpos - floor(vertpos))*6.59623;        vertpos -= (step(0.5, frac - floor(frac))*2.0 - 1.0)*float(eScale);        vec4 vPosition = uOMatrix * vec4(vertpos, 1.0);\n#else\n        vec4 vPosition = uOMatrix * vec4(aVertexPosition, 1.0);\n#endif\n        \n#if skinned > 0\n        if (numBones > 0) {            vec4 tvert = vec4(0.0);        \n#if geomgen == 5\n            vec4 skinweights = a_skinweights / vec4(16383.0);         \n#else\n            vec4 skinweights = a_skinweights;         \n#endif\n            for (int boneIdx = 0; boneIdx < numBones; boneIdx++) {                tvert += skinweights[boneIdx] * (matBone[boneIdx] * vec4(v, 1.0));            }        vPosition = tvert;        }        \n#endif\n        gl_Position = uMVPMatrix * vPosition;\t    gl_Position.xy += jitter * gl_Position.w;    }",
g_frag_BlackShader="#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nvoid main() {gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );}",g_es3_frag_BlackShader="#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nout vec4 FragColor;void main() {FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );}";
infinityrt_scene.prototype.getShaderHeaderStd=function(){var a="";2==this._glVersionNum&&(a="#version 300 es\n");return a+="#define RT_GLVERSIONNUM "+this._glVersionNum+"\n#define eScale "+this.eScale+"\n#define geomgen "+this.geomgen+"\n#define skinned "+this.hasDeformation+"\n"};infinityrt_scene.prototype.getVertexHeader=function(){return"\n#define RT_GLVERSIONNUM 1\n#define eScale "+this.eScale+"\n#define geomgen "+this.geomgen+"\n#define skinned "+this.hasDeformation+"\n"};
infinityrt_scene.prototype.getShaderHeaderComplex=function(){var a="#define geomgen "+this.geomgen;a+="\n#define uvch "+this.uvch;a+="\n#define num_scene_lights "+this._lights.length;a+="\n#define eScale "+this.eScale;a+="\n#define skinned "+this.hasDeformation;a+="\n#define usesTangents 1\n#define camresponse "+this.camresponse+"\n#define encodeenvmapsinmono "+this._encodeenvmapsinmono+"\n#define extrabrightenvmap "+this._extrabrightenvmap+"\n#define mipmapenvmap "+this._mipmapenvmap+"\n#define hasBrightReflections "+
this.hasBrightReflections+"\n#define amboccusevertcol 0\n#define ComplexGlossyRead "+this.ComplexGlossyRead+"\n#define ClearCoatEdgeAA "+this.ClearCoatEdgeAA+"\n#define extOESSD "+("undefined"!=typeof this.extOESSD||1<this._glVersionNum?1:0)+"\n#define MaxTextureUnits "+this.MaxTextureUnits+"\n#define PlanarReflectPassActive "+this._nPlanarReflectPassActive+"\n#define FadedReflectionsActive "+(this._fadedReflectionsActive?1:0)+"\n#define AVOIDCONDITIONALUNIFORMS "+(this.avoidConditionalUniforms?1:
0)+"\n#define AABBEnvironmentMapActive "+(this._AABBEnvironmentMapActive?1:0)+"\n\n";2==this._glVersionNum&&(a+="\n#define OutputDoFDepth 0\n");a+="\n#define compPlanarRefl "+this.compPlanarRefl+"\n";a+="\n#define BUILDVERSION "+this.verScene.build+"\n";return a+="\n#define MAXFRAGUNIVECS "+this.MaxFragUniVecs+"\n"};
var shaderes3_InfinityRT_BlockVertexvsBlack="uniform BlockFrame {\nmat4 uMVPMatrix;\nvec4 uCamPos;\nvec2 jitter;\nvec2 viewportsize;\nfloat scenesize;\nfloat fovfactor;\nfloat planarReflFlip;\n\n\n\n\n\n\nmediump int aarefinecount;\n};\n\nuniform BlockInstance {\nmat4 uOMatrix;\nvec4 bbmin;\nvec4 bbmax;\nvec2 texbbmin;\nvec2 texbbmax;\nvec2 tex2bbmin;\nvec2 tex2bbmax;\n};\n",shaderes3_InfinityRT_CorevsBlack="#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\ninvariant gl_Position;\nin vec3 aVertexPosition;\nin vec3 aNormal;\nin vec2 aTextureCoord;\n#if uvch > 1\nin vec2 aTextureCoord2;\n#endif\n\nSIRT_BLOCKVERTEX_INSERT\n\nout vec2 tex1;\nout vec2 tex2;\nout vec3 g_norm;\nout vec3 eyeDir;\nout vec3 vert;\nout vec3 lvert;\n\n#if usesTangents\nin vec3 aSurfTanU;\nout vec3 bu;\nout vec3 bv;\n#endif\n\n#if amboccusevertcol\nuniform int amboccchannel;\nin vec4 aColor;\nout float vcolor;\n#endif\n\n#if skinned > 0\nuniform int numBones;\nuniform mat4 matBone[4];\nin vec4 a_skinweights;\n#endif\n\nvoid main(void)\n{\n\n#if geomgen == 4\nvec3 v = (aVertexPosition / vec3(65535.0)) * (bbmax.xyz - bbmin.xyz) + bbmin.xyz;\nvec4 vPosition = uOMatrix * vec4(v, 1.0);\ntex1 = (aTextureCoord / vec2(65535.0)) * (texbbmax - texbbmin) + texbbmin;\n#if uvch > 1\ntex2 = (aTextureCoord2 / vec2(65535.0)) * (tex2bbmax - tex2bbmin) + tex2bbmin;\n#else\ntex2 = tex1;\n#endif\nvec3 vn = aNormal / vec3(32757.0);\n#elif geomgen == 5\nvec3 v = (aVertexPosition / vec3(16383.0)) * (bbmax.xyz - bbmin.xyz) + bbmin.xyz;\nvec4 vPosition = uOMatrix * vec4(v, 1.0);\ntex1 = (aTextureCoord / vec2(16383.0)) * (texbbmax - texbbmin) + texbbmin;\nvec3 vn = aNormal / vec3(8191.0);\n#if uvch > 1\ntex2 = (aTextureCoord2 / vec2(16383.0)) * (tex2bbmax - tex2bbmin) + tex2bbmin;\n#else\ntex2 = tex1;\n#endif\n#else\n#if eScale\nvec3 v = aVertexPosition;\nvec3 frac = (v - floor(v))*6.59623;\nv -= (step(0.5, frac - floor(frac))*2.0 - 1.0)*float(eScale);\nvec4 vPosition = uOMatrix * vec4(v, 1.0);\n#else\nvec3 v = aVertexPosition;\nvec4 vPosition = uOMatrix * vec4(aVertexPosition, 1.0);\n#endif\ntex1 = aTextureCoord;\n#if uvch > 1\ntex2 = aTextureCoord2;\n#else\ntex2 = tex1;\n#endif\nvec3 vn = aNormal;\n#endif\n#if usesTangents\nvec3 tanu = aSurfTanU;\n#endif\n\n#if skinned > 0\nif (numBones > 0) {\nvec4 tvert = vec4(0.0);\nvec3 tnorm = vec3(0.0);\n#if geomgen == 5\nvec4 skinweights = a_skinweights / vec4(16383.0);\n#else\nvec4 skinweights = a_skinweights;\n#endif\nfor (int boneIdx = 0; boneIdx < numBones; boneIdx++)\n{\nfloat weight = skinweights[boneIdx];\ntvert += weight * (matBone[boneIdx] * vec4(v, 1.0));\ntnorm += weight * (matBone[boneIdx] * vec4(vn, 0.0)).xyz;\n}\nvPosition = tvert;\ng_norm = vn = normalize(tnorm);\n}\nelse\n#endif\n{\ng_norm = normalize(uOMatrix * vec4(vn,0.0)).xyz;\n}\ngl_Position = uMVPMatrix * vPosition;\n\nlvert = v;\nvert = vPosition.xyz;\ngl_Position.xy += jitter * gl_Position.w;\n#if usesTangents\nbu = tanu;\nbv = cross(vn, tanu);\n#endif\neyeDir = (vPosition.xyz - uCamPos.xyz);\n\n#if amboccusevertcol\nif (amboccchannel == 3)\nvcolor = aColor.a;\nelse if (amboccchannel == 2)\nvcolor = aColor.b;\nelse if (amboccchannel == 1)\nvcolor = aColor.g;\nelse\nvcolor = aColor.r;\n#endif\n}\n",
useComplexBlackShader=!1;infinityrt_scene.prototype.getVertexShaderSimplePos=function(){if(2==this._glVersionNum){if(useComplexBlackShader){var a="#version 300 es\n"+this.getShaderHeaderComplex()+shaderes3_InfinityRT_CorevsBlack;a=ReplaceAll(a,"SIRT_BLOCKVERTEX_INSERT",shaderes3_InfinityRT_BlockVertexvsBlack)}else a="#version 300 es\n"+this.getVertexHeader()+g_es3_vert_BlackShader,a=ReplaceAll(a,"SIRT_BLOCKVERTEX_INSERT",shaderes3_InfinityRT_BlockVertexvs);return a}return this.getVertexHeader()+g_vert_BlackShader};
infinityrt_scene.prototype.compileBlackShader=function(){var a=useComplexBlackShader?2==this._glVersionNum?"#version 300 es\n"+this.getShaderHeaderComplex()+g_es3_frag_BlackShader:this.getShaderHeaderComplex()+g_frag_BlackShader:2==this._glVersionNum?"#version 300 es\n"+this.getVertexHeader()+g_es3_frag_BlackShader:this.getVertexHeader()+g_frag_BlackShader;this._prog_black=new infinityrt_shader(this.getVertexShaderSimplePos(),a,this.gl,this.extParallelCompile);this._prog_black.addVertexShaderPosVars(this);
if(1<this._glVersionNum)this.buffBlockFrame=this._prog_black.addBlock("BlockFrame",this),this._prog_black.addBlock("BlockInstance",this);else if(this._prog_black.addMatrix("uMVPMatrix"),this._prog_black.addMatrix("uOMatrix"),this._prog_black.addFloat2("jitter"),4==this.geomgen||5==this.geomgen)this._prog_black.addVector("bbmin"),this._prog_black.addVector("bbmax");this._prog_black.init()};
infinityrt_scene.prototype.renderGlowTexture=function(){var a=this.gl;this._prog_black||this.compileBlackShader();if(!this._prog_highpass){this._prog_highpass=new infinityrt_shader(g_vertex_LuminosityHighPassShader,g_frag_LuminosityHighPassShader,this.gl,this.extParallelCompile);this._prog_highpass.addFloat("defaultOpacity",0);this._prog_highpass.addFloat("luminosityThreshold",this._glow_threshold);this._prog_highpass.addFloat("smoothWidth",.01);this._prog_highpass.addVector("defaultColor",[0,0,0]);
this._prog_highpass.addVertexArray("position");this._prog_highpass.addUVArray("uv");this._prog_highpass.addInt("tDiffuse",0);this._prog_highpass.init();var b=g_frag_CompositeMaterial;b=ReplaceAll(b,"NUM_MIPS",5);this._prog_glow_composite=new infinityrt_shader(g_vertex_LuminosityHighPassShader,b,this.gl,this.extParallelCompile);this._prog_glow_composite.addFloat("bloomStrength");this._prog_glow_composite.addFloat("bloomPower");this._prog_glow_composite.addFloat("bloomRadius",.4);this._prog_glow_composite.addInt("applytobkgrd");
var c=[1,.8,.6,.4,.2];for(b=0;5>b;b++)this._prog_glow_composite.addFloat("bloomFactors["+b+"]",c[b]);this._prog_glow_composite.addVertexArray("position");this._prog_glow_composite.addUVArray("uv");this._prog_glow_composite.addInt("blurTexture1",0);this._prog_glow_composite.addInt("blurTexture2",1);this._prog_glow_composite.addInt("blurTexture3",2);this._prog_glow_composite.addInt("blurTexture4",3);this._prog_glow_composite.addInt("blurTexture5",4);this._prog_glow_composite.addInt("origTexture",5);
this._prog_glow_composite.init();this.CompileSeparableBlurShaders(5)}c=this.viewwidth;var d=this.viewheight;null!=this.drawFBO&&(c=this.drawFBO._nFBOWidth,d=this.drawFBO._nFBOHeight);if(null==this._fboGlow||this._fboGlow._nFBOWidth!=c||this._fboGlow._nFBOHeight!=d){this._fboGlow=this.CreateFBOTarget(!0,c,d,!0);this._fboTargetBright=this.CreateFBOTarget(!1,c,d,!0);this.renderTargetsHorizontal=[];this.renderTargetsVertical=[];var e=Math.round(c/2),f=Math.round(d/2);for(b=0;5>b;b++)this.renderTargetsHorizontal.push(this.CreateFBOTarget(!1,
e,f,!0)),this.renderTargetsVertical.push(this.CreateFBOTarget(!1,e,f,!0)),e=Math.round(e/2),f=Math.round(f/2);this.InitSeparableBlurShaders(5)}for(var g in this._ShaderCache)b=this._ShaderCache[g],b.use(this),b.setInt("glowpass",1);a.bindFramebuffer(a.FRAMEBUFFER,this._fboGlow._nFBO);a.viewport(0,0,c,d);this._glow_incbackground?a.clearColor(this._backgroundColor[0],this._backgroundColor[1],this._backgroundColor[2],0):a.clearColor(0,0,0,0);a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT);this._renderingGlowPass=
!0;this._lstTransObjs=[];this.renderOpaqueObject(this);null!=this._rootEnv&&this.renderOpaqueObject(this._rootEnv);this.RenderFoundTransparentNodes();this._renderingGlowPass=!1;a.clearColor(0,0,0,0);this._prog_highpass.use(this);this._prog_highpass.setFloat("luminosityThreshold",this._glow_threshold);a.activeTexture(a.TEXTURE0);a.bindTexture(a.TEXTURE_2D,this._fboGlow._nFBOTex);this.RenderOrthoQuad(this._fboTargetBright,this._prog_highpass);c=this._fboTargetBright;for(b=0;5>b;b++)this._lstSeparableBlurShaders[b].use(this),
this._lstSeparableBlurShaders[b].setInt("alphamode",0),a.activeTexture(a.TEXTURE0),a.bindTexture(a.TEXTURE_2D,c._nFBOTex),this._lstSeparableBlurShaders[b].setFloat2("direction",[1,0]),this.RenderOrthoQuad(this.renderTargetsHorizontal[b],this._lstSeparableBlurShaders[b]),a.bindTexture(a.TEXTURE_2D,this.renderTargetsHorizontal[b]._nFBOTex),this._lstSeparableBlurShaders[b].setFloat2("direction",[0,1]),this.RenderOrthoQuad(this.renderTargetsVertical[b],this._lstSeparableBlurShaders[b]),c=this.renderTargetsVertical[b];
this._prog_glow_composite.use(this);a.activeTexture(a.TEXTURE0);a.bindTexture(a.TEXTURE_2D,this.renderTargetsVertical[0]._nFBOTex);a.activeTexture(a.TEXTURE1);a.bindTexture(a.TEXTURE_2D,this.renderTargetsVertical[1]._nFBOTex);a.activeTexture(a.TEXTURE2);a.bindTexture(a.TEXTURE_2D,this.renderTargetsVertical[2]._nFBOTex);a.activeTexture(a.TEXTURE3);a.bindTexture(a.TEXTURE_2D,this.renderTargetsVertical[3]._nFBOTex);a.activeTexture(a.TEXTURE4);a.bindTexture(a.TEXTURE_2D,this.renderTargetsVertical[4]._nFBOTex);
a.activeTexture(a.TEXTURE5);a.bindTexture(a.TEXTURE_2D,this._fboGlow._nFBOTex);this._prog_glow_composite.setFloat("bloomStrength",this._glow_strength);this._prog_glow_composite.setFloat("bloomPower",this._glow_power);this._prog_glow_composite.setInt("applytobkgrd",this._glow_applytobackground);a.enable(a.BLEND);a.blendFunc(a.ONE,a.ONE);a.bindFramebuffer(a.FRAMEBUFFER,this.currentFrameBuffer);a.clear(a.DEPTH_BUFFER_BIT);this.RenderOrthoQuad(null,this._prog_glow_composite);a.disable(a.BLEND);for(g in this._ShaderCache)b=
this._ShaderCache[g],b.use(this),b.setInt("glowpass",0);this.hasBrightReflections?a.blendFuncSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ZERO,a.ONE):a.blendFuncSeparate(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA,a.ZERO,a.ONE);this._backgroundTransparent?a.clearColor(0,0,0,0):a.clearColor(this._backgroundColor[0],this._backgroundColor[1],this._backgroundColor[2],1);a.bindFramebuffer(a.FRAMEBUFFER,this.currentFrameBuffer)};
infinityrt_scene.prototype.renderZPrePass=function(){if(-1==this._refineCount){var a=this.gl;this._lstTransObjs=[];this.renderOrdered&&(this.opaqueObjectsArrayOrdered.length=0,null!=this._rootEnv&&this.renderEnvOrdered&&this.orderOpaqueObjects(this._rootEnv),this.orderOpaqueObjects(this));this._renderingZPrePass=!0;this._prog_black||this.compileBlackShader();a.clear(a.DEPTH_BUFFER_BIT);if(this.zprepassoffset||this.zprepassoffsetfactor)a.enable(a.POLYGON_OFFSET_FILL),a.polygonOffset(this.zprepassoffsetfactor?
this.zprepassoffsetfactor:0,this.zprepassoffset?this.zprepassoffset:0);this.renderOrdered?(this.renderOpaqueObjectOrdered(),null==this._rootEnv||this.renderEnvOrdered||this.renderOpaqueObject(this._rootEnv)):(null!=this._rootEnv&&this.renderOpaqueObject(this._rootEnv),this.renderOpaqueObject(this));this._renderingZPrePass=!1;if(this.zprepassoffset||this.zprepassoffsetfactor)a.polygonOffset(0,0),a.disable(a.POLYGON_OFFSET_FILL);a.flush();this.renderOrdered||(this._lstTransObjs=[])}};
var g_frag_dof_depth="#ifdef GL_FRAGMENT_PRECISION_HIGH\n           precision highp float;\n         #else\n           precision mediump float;\n         #endif\n         uniform sampler2D tColor;         uniform float textureWidth;         uniform float textureHeight;         uniform float znear;         uniform float zfar;         uniform float focalnear;         uniform float focalfar;         uniform float dofbias;         float linearize(float depth) { \t        return -zfar * znear / (depth * (zfar - znear) - zfar);         }         void main() { \t        vec2 uvTex = vec2(gl_FragCoord.x/textureWidth, gl_FragCoord.y/textureHeight); \t        gl_FragColor.rgb = texture2D(tColor, uvTex).rgb; \t        float dist = linearize(gl_FragCoord.z); \t        dist = (dist - focalnear) / (focalfar - focalnear); \t        if (dist > 0.5) \t\t        dist = (pow((dist*2.0)-1.0, dofbias)+1.0)*0.5; \t        else \t\t        dist = 0.5-(pow(((0.5-dist)*2.0), dofbias)*0.5); \t        gl_FragColor.a = clamp(dist, 0.0, 0.995); \t\t}",
g_es3_frag_dof_depth="#ifdef GL_FRAGMENT_PRECISION_HIGH\n         precision highp float;\n     #else\n         precision mediump float;\n     #endif\n     uniform sampler2D tColor;     uniform float textureWidth;     uniform float textureHeight;     uniform float znear;     uniform float zfar;     uniform float focalnear;     uniform float focalfar;     uniform float dofbias;     out vec4 FragColor;\n     float linearize(float depth) { \t    return -zfar * znear / (depth * (zfar - znear) - zfar);     }     void main() { \t    vec2 uvTex = vec2(gl_FragCoord.x/textureWidth, gl_FragCoord.y/textureHeight); \t    FragColor.rgb = texture(tColor, uvTex).rgb; \t    float dist = linearize(gl_FragCoord.z); \t    dist = (dist - focalnear) / (focalfar - focalnear); \t    if (dist > 0.5) \t\t    dist = (pow((dist*2.0)-1.0, dofbias)+1.0)*0.5; \t    else \t\t    dist = 0.5-(pow(((0.5-dist)*2.0), dofbias)*0.5); \t    FragColor.a = clamp(dist, 0.0, 0.995); \t}",
g_frag_dof_bokeh_quick="precision highp float;\n         in vec2 vUv;         uniform sampler2D tColor;         uniform highp sampler2D tDepth;         uniform vec2 aspectcorrect;         uniform vec2 targetpos2D;         uniform float aperture;         uniform int applytonear;         uniform float znear;         uniform float zfar;         uniform float maxfocalplanedepth;         uniform float minfocalplanedepth;         out vec4 FragColor;         float linearize(float depth) { \t        return -zfar * znear / (depth * (zfar - znear) - zfar);         }         void dtexblur(vec2 crd, float distPixel, inout vec4 col, float dofnear, float doffar) {             vec2 vAspectUV = vUv.xy+(crd*aspectcorrect);             vec3 colorrgb = texture(tColor, vAspectUV).rgb;             float dep = linearize(texture(tDepth, vAspectUV).r);             float distDepth =  (dep - dofnear) / (doffar - dofnear);             distDepth = clamp(distDepth, 0.0, 1.0);             distDepth = ((distDepth - 0.5)*aperture);             if (applytonear == 0 && distDepth < 0.001) distDepth = 0.001; \t        float distDepthAbs = max(abs(distDepth), 0.001); \t        if (distDepthAbs > distPixel) \t        { \t\t        float conefac=(distDepthAbs-distPixel)/distDepthAbs; \t\t        float alpha = conefac/(distDepthAbs*distDepthAbs);                 if (distPixel < 0.1)                 {                     alpha *= 0.25;                 } \t\t        col.rgb += colorrgb*alpha; \t\t        col.a += alpha; \t        }         }         void main() { \t        vec4 col = vec4( 0.0 );             float refdep = linearize(texture(tDepth, targetpos2D).r);             if ((refdep > maxfocalplanedepth) || (refdep < minfocalplanedepth)){                 refdep = (minfocalplanedepth + maxfocalplanedepth) / 2.0;            }            float dofwidth = refdep * 0.8;             float dofnear = refdep - dofwidth;            float doffar = refdep + dofwidth;\t        dtexblur(vec2( 0.0, 0.0), 0.0, col, dofnear, doffar); \t       for (float x=0.0; x<6.0;x+=2.0){\t\t        for (float y=0.0; y<(6.0-x);y+=2.0){                    float dist = length(vec2(-(x +0.5), y +1.5));\t\t\t        dtexblur(vec2(-(x +0.5), y +1.5), dist, col, dofnear, doffar); \t\t\t        dtexblur(vec2(y +1.5, x +0.5), dist, col, dofnear, doffar); \t\t\t        dtexblur(vec2(x +0.5, -(y +1.5)), dist, col, dofnear, doffar); \t\t\t        dtexblur(vec2(-(y +1.5), -(x +0.5)), dist, col, dofnear, doffar); \t\t        }  \t        } \t\t\tFragColor = vec4(col.rgb / col.a, 1.0); \t\t}",
g_frag_dof_bokeh_quickv540="precision highp float;\n         in vec2 vUv;         uniform sampler2D tColor;         uniform highp sampler2D tDepth;         uniform vec2 aspectcorrect;         uniform vec2 targetpos2D;         uniform float aperture;         uniform int applytonear;         uniform float znear;         uniform float zfar;         uniform float maxfocalplanedepth;         out vec4 FragColor;         float linearize(float depth) { \t        return -zfar * znear / (depth * (zfar - znear) - zfar);         }         void dtexblur(vec2 crd, float distPixel, inout vec4 col, float dofnear, float doffar) {             vec2 vAspectUV = vUv.xy+(crd*aspectcorrect);             vec3 colorrgb = texture(tColor, vAspectUV).rgb;             float dep = linearize(texture(tDepth, vAspectUV).r);             float distDepth =  (dep - dofnear) / (doffar - dofnear);             distDepth = clamp(distDepth, 0.0, 1.0);             distDepth = ((distDepth - 0.5)*aperture);             if (applytonear == 0 && distDepth < 0.001) distDepth = 0.001; \t        float distDepthAbs = max(abs(distDepth), 0.001); \t        if (distDepthAbs > distPixel) \t        { \t\t        float conefac=(distDepthAbs-distPixel)/distDepthAbs; \t\t        float alpha = conefac/(distDepthAbs*distDepthAbs);                 if (distPixel < 0.1)                 {                     alpha *= 0.25;                 } \t\t        col.rgb += colorrgb*alpha; \t\t        col.a += alpha; \t        }         }         void main() { \t        vec4 col = vec4( 0.0 );             float refdep = linearize(texture(tDepth, targetpos2D).r);             if (refdep > maxfocalplanedepth){                 vec2 vAspectUV = vUv.xy + (vec2(0.0, 0.0) * aspectcorrect);                 vec3 colorrgb = texture(tColor, vAspectUV).rgb;                 FragColor = vec4(colorrgb, 1.0);                return;             }            float dofwidth = refdep * 0.8;             float dofnear = refdep - dofwidth;            float doffar = refdep + dofwidth;\t        dtexblur(vec2( 0.0, 0.0), 0.0, col, dofnear, doffar); \t       for (float x=0.0; x<6.0;x+=2.0){\t\t        for (float y=0.0; y<(6.0-x);y+=2.0){                    float dist = length(vec2(-(x +0.5), y +1.5));\t\t\t        dtexblur(vec2(-(x +0.5), y +1.5), dist, col, dofnear, doffar); \t\t\t        dtexblur(vec2(y +1.5, x +0.5), dist, col, dofnear, doffar); \t\t\t        dtexblur(vec2(x +0.5, -(y +1.5)), dist, col, dofnear, doffar); \t\t\t        dtexblur(vec2(-(y +1.5), -(x +0.5)), dist, col, dofnear, doffar); \t\t        }  \t        } \t\t\tFragColor = vec4(col.rgb / col.a, 1.0); \t\t}",
g_frag_dof_bokeh_quickDisplayDepth="precision highp float;\n         in vec2 vUv;         uniform sampler2D tColor;         uniform highp sampler2D tDepth;         uniform vec2 aspectcorrect;         uniform vec2 targetpos2D;         uniform float aperture;         uniform int applytonear;         uniform float znear;         uniform float zfar;         uniform float maxfocalplanedepth;         out vec4 FragColor;         float linearize(float depth) { \t        return -zfar * znear / (depth * (zfar - znear) - zfar);         }         void dtexblur(vec2 crd, float distPixel, inout vec4 col, float dofnear, float doffar) {             vec2 vAspectUV = vUv.xy+(crd*aspectcorrect);             vec3 colorrgb = texture(tColor, vAspectUV).rgb;             float dep = linearize(texture(tDepth, vAspectUV).r);             float distDepth =  (dep - dofnear) / (doffar - dofnear);             distDepth = clamp(distDepth, 0.0, 1.0);             distDepth = ((distDepth - 0.5)*aperture);             if (applytonear == 0 && distDepth < 0.001) distDepth = 0.001; \t        float distDepthAbs = max(abs(distDepth), 0.001); \t        if (distDepthAbs > distPixel) \t        { \t\t        float conefac=(distDepthAbs-distPixel)/distDepthAbs; \t\t        float alpha = conefac/(distDepthAbs*distDepthAbs);                 if (distPixel < 0.1)                 {                     alpha *= 0.25;                 } \t\t        col.rgb += colorrgb*alpha; \t\t        col.a += alpha; \t        }         }         void main() { \t        vec4 col = vec4( 0.0 );             vec2 vAspectUV = vUv.xy+(vec2( 0.0, 0.0)*aspectcorrect);             float refdep = linearize(texture(tDepth, vAspectUV).r);             refdep *= 0.005;            FragColor = vec4(refdep, refdep, refdep, 1.0); return;             float dofwidth = refdep * 0.8;             float dofnear = refdep - dofwidth;            float doffar = refdep + dofwidth;\t        dtexblur(vec2( 0.0, 0.0), 0.0, col, dofnear, doffar); \t       for (float x=0.0; x<6.0;x+=2.0){\t\t        for (float y=0.0; y<(6.0-x);y+=2.0){                    float dist = length(vec2(-(x +0.5), y +1.5));\t\t\t        dtexblur(vec2(-(x +0.5), y +1.5), dist, col, dofnear, doffar); \t\t\t        dtexblur(vec2(y +1.5, x +0.5), dist, col, dofnear, doffar); \t\t\t        dtexblur(vec2(x +0.5, -(y +1.5)), dist, col, dofnear, doffar); \t\t\t        dtexblur(vec2(-(y +1.5), -(x +0.5)), dist, col, dofnear, doffar); \t\t        }  \t        } \t\t\tFragColor = vec4(col.rgb / col.a, 1.0); \t\t}",
g_frag_dof_bokeh_quickFriday="precision highp float;\n         in vec2 vUv;         uniform sampler2D tColor;         uniform highp sampler2D tDepth;         uniform vec2 aspectcorrect;         uniform float aperture;         uniform int applytonear;         uniform float znear;         uniform float zfar;         uniform float focalnear;         uniform float focalfar;         out vec4 FragColor;         float linearize(float depth) { \t        return -zfar * znear / (depth * (zfar - znear) - zfar);         }         void dtexblur(vec2 crd, float distPixel, inout vec4 col, float refdep) {             vec2 vAspectUV = vUv.xy+(crd*aspectcorrect);             vec3 colorrgb = texture(tColor, vAspectUV).rgb;             float dep = linearize(texture(tDepth, vAspectUV).r); \t        float distDepth = ((dep - refdep) * (aperture/refdep));             if (applytonear == 0 && distDepth < 0.001) distDepth = 0.001; \t        float distDepthAbs = abs(distDepth); \t        if (distDepthAbs > distPixel) \t        { \t\t        float conefac=(distDepthAbs-distPixel)/distDepthAbs; \t\t        float alpha = conefac/(distDepth*distDepth); \t\t        col.rgb += colorrgb*alpha; \t\t        col.a += alpha; \t        }         }         void main() { \t        vec4 col = vec4( 0.0 );             vec2 vAspectUV = vec2(0.5, 0.5);             float refdep = linearize(texture(tDepth, vAspectUV).r); \t        dtexblur(vec2( 0.0, 0.0), 0.0, col, refdep); \t\t\t\tdtexblur(vec2(2.0, 0.0), 2.0, col, refdep);     dtexblur(vec2(0.0, 2.0), 2.0, col, refdep);     dtexblur(vec2(-2.0, 0.0), 2.0, col, refdep);     dtexblur(vec2(0.0, -2.0), 2.0, col, refdep);          dtexblur(vec2(1.0, 4.0), 4.1231, col, refdep);     dtexblur(vec2(3.0, 2.0), 3.6056, col, refdep);     dtexblur(vec2(3.0, 4.0), 5.0, col, refdep);     dtexblur(vec2(5.0, 1.0), 5.099, col, refdep);     dtexblur(vec2(7.0, 1.0), 7.071, col, refdep);     dtexblur(vec2(5.0, 4.0), 6.4031, col, refdep);     dtexblur(vec2(3.0, 6.0), 6.7082, col, refdep);          dtexblur(vec2(-1.0, -4.0), 4.1231, col, refdep);     dtexblur(vec2(-3.0, -2.0), 3.6056, col, refdep);     dtexblur(vec2(-3.0, -4.0), 5.0, col, refdep);     dtexblur(vec2(-5.0, -1.0), 5.099, col, refdep);     dtexblur(vec2(-7.0, -1.0), 7.071, col, refdep);     dtexblur(vec2(-5.0, -4.0), 6.4031, col, refdep);     dtexblur(vec2(-3.0, -6.0), 6.7082, col, refdep);          dtexblur(vec2(4.0, -1.0), 4.1231, col, refdep);     dtexblur(vec2(2.0, -3.0), 3.6056, col, refdep);     dtexblur(vec2(4.0, -3.0), 5.0, col, refdep);     dtexblur(vec2(1.0, -5.0), 5.099, col, refdep);     dtexblur(vec2(1.0, -7.0), 7.071, col, refdep);     dtexblur(vec2(4.0, -5.0), 6.4031, col, refdep);     dtexblur(vec2(6.0, -3.0), 6.7082, col, refdep);          dtexblur(vec2(-4.0, 1.0), 4.1231, col, refdep);     dtexblur(vec2(-2.0, 3.0), 3.6056, col, refdep);     dtexblur(vec2(-4.0, 3.0), 5.0, col, refdep);     dtexblur(vec2(-1.0, 5.0), 5.099, col, refdep);     dtexblur(vec2(-1.0, 7.0), 7.071, col, refdep);     dtexblur(vec2(-4.0, 5.0), 6.4031, col, refdep);     dtexblur(vec2(-6.0, 3.0), 6.7082, col, refdep);      \t\t\tFragColor = vec4(col.rgb / col.a, 1.0); \t\t}",
g_frag_dof_bokeh="#ifdef GL_FRAGMENT_PRECISION_HIGH\n           precision highp float;\n         #else\n           precision mediump float;\n         #endif\n         varying vec2 vUv;         \n#if (RT_GLVERSIONNUM == 2)\n         uniform sampler2D tColor;         uniform sampler2D tDepth;         \n#else\n         uniform sampler2D tColorAndDepth;         \n#endif\n         uniform vec2 aspectcorrect;         uniform float aperture;         uniform int applytonear;         void dtexblur(vec2 crd, float distPixel, inout vec4 col) { \t        \n#if (RT_GLVERSIONNUM == 2)\n             vec2 vAspectUV = vUv.xy+(crd*aspectcorrect);             vec4 coloranddepth1 = texture2D(tColor, vAspectUV);             vec4 dep = texture2D(tDepth, vAspectUV); \t        float distDepth = ((dep.r - 0.5)*aperture);             \n#else\n             vec4 coloranddepth1 = texture2D(tColorAndDepth, vUv.xy+(crd*aspectcorrect)); \t        float distDepth = ((coloranddepth1.a - 0.5)*aperture);             \n#endif\n             if (applytonear == 0 && distDepth < 0.001) distDepth = 0.001; \t        float distDepthAbs = abs(distDepth); \t        if (distDepthAbs > distPixel) \t        { \t\t        float conefac=(distDepthAbs-distPixel)/distDepthAbs; \t\t        float alpha = conefac/(distDepth*distDepth); \t\t        col.rgb += coloranddepth1.rgb*alpha; \t\t        col.a += alpha; \t        }         }         void main() { \t        vec4 col = vec4( 0.0 ); \t        dtexblur(vec2( 0.0, 0.0), 0.0, col);              \tdtexblur(vec2(2.0, 0.0), 2.0, col);     dtexblur(vec2(0.0, 2.0), 2.0, col);     dtexblur(vec2(-2.0, 0.0), 2.0, col);     dtexblur(vec2(0.0, -2.0), 2.0, col);          dtexblur(vec2(1.0, 4.0), 4.1231, col);     dtexblur(vec2(3.0, 2.0), 3.6056, col);     dtexblur(vec2(3.0, 4.0), 5.0, col);     dtexblur(vec2(5.0, 1.0), 5.099, col);     dtexblur(vec2(7.0, 1.0), 7.071, col);     dtexblur(vec2(5.0, 4.0), 6.4031, col);     dtexblur(vec2(3.0, 6.0), 6.7082, col);          dtexblur(vec2(-1.0, -4.0), 4.1231, col);     dtexblur(vec2(-3.0, -2.0), 3.6056, col);     dtexblur(vec2(-3.0, -4.0), 5.0, col);     dtexblur(vec2(-5.0, -1.0), 5.099, col);     dtexblur(vec2(-7.0, -1.0), 7.071, col);     dtexblur(vec2(-5.0, -4.0), 6.4031, col);     dtexblur(vec2(-3.0, -6.0), 6.7082, col);          dtexblur(vec2(4.0, -1.0), 4.1231, col);     dtexblur(vec2(2.0, -3.0), 3.6056, col);     dtexblur(vec2(4.0, -3.0), 5.0, col);     dtexblur(vec2(1.0, -5.0), 5.099, col);     dtexblur(vec2(1.0, -7.0), 7.071, col);     dtexblur(vec2(4.0, -5.0), 6.4031, col);     dtexblur(vec2(6.0, -3.0), 6.7082, col);          dtexblur(vec2(-4.0, 1.0), 4.1231, col);     dtexblur(vec2(-2.0, 3.0), 3.6056, col);     dtexblur(vec2(-4.0, 3.0), 5.0, col);     dtexblur(vec2(-1.0, 5.0), 5.099, col);     dtexblur(vec2(-1.0, 7.0), 7.071, col);     dtexblur(vec2(-4.0, 5.0), 6.4031, col);     dtexblur(vec2(-6.0, 3.0), 6.7082, col);      \t\t\tgl_FragColor = vec4(col.rgb / col.a, 1.0); \t\t}",
g_frag_dof_depthvalues="#ifdef GL_FRAGMENT_PRECISION_HIGH\n           precision highp float;\n         #else\n           precision mediump float;\n         #endif\n         uniform float znear;         uniform float zfar;         uniform float focalnear;         uniform float focalfar;         float linearize(float depth) { \t        return -zfar * znear / (depth * (zfar - znear) - zfar);         }         void main() {             float dist = linearize(gl_FragCoord.z); \t        dist = (dist - focalnear) / (focalfar - focalnear); \t\t\tgl_FragColor = vec4(vec3(dist), 1.0);\n \t\t}",
g_es3_frag_dof_depthvalues="#ifdef GL_FRAGMENT_PRECISION_HIGH\n           precision highp float;\n         #else\n           precision mediump float;\n         #endif\n         out vec4 FragColor;\n         uniform float znear;         uniform float zfar;         uniform float focalnear;         uniform float focalfar;         float linearize(float depth) { \t        return -zfar * znear / (depth * (zfar - znear) - zfar);         }         void main() {\n             float dist = linearize(gl_FragCoord.z); \t        dist = (dist - focalnear) / (focalfar - focalnear);             FragColor = vec4(vec3(dist), 1.0);\n \t\t}";
infinityrt_scene.prototype.GetDepthValueAt=function(a,b,c,d,e){var f=0,g=new Uint8Array(4);this.gl.readPixels(b[0],b[1],1,1,this.gl.RGBA,this.gl.UNSIGNED_BYTE,g);if(a)0!=g[0]&&(a=g[0]/255,f=a*(e-d)+d);else{a=g[3]/255;if(1==a)return 0;a=.5<a?.5*(Math.pow(2*a-1,1/c.fDoFBias)+1):-(.5*Math.pow(2*(.5-a),1/c.fDoFBias)-.5);d=this._fDoFFocusPos-c.CurrFocusWidth;c=this._fDoFFocusPos+c.CurrFocusWidth;f=a*(c-d)+d}return f};infinityrt_scene.prototype.SetDoFFocalPoint=function(a){this._ptDoFFocal=a};
infinityrt_scene.prototype.GetDoFFocusDepth=function(a,b,c){if(this.RTDoFQuick&&1<this._glVersionNum)return 0;if(null!=this.customGetDoFDepth){var d=this.customGetDoFDepth(this,b);if(null!=d)return d}d=this.gl;if(a){d.bindFramebuffer(d.FRAMEBUFFER,this._fboDoF._nFBO);d.clearColor(0,0,0,0);d.clear(d.COLOR_BUFFER_BIT|d.DEPTH_BUFFER_BIT);this.zprepass&&this.renderZPrePass();if(null==this._shader_mesh_depthvalues){var e=2==this._glVersionNum?"#version 300 es\n"+this.getVertexHeader()+g_es3_frag_dof_depthvalues:
this.getVertexHeader()+g_frag_dof_depthvalues;this._shader_mesh_depthvalues=new infinityrt_shader(this.getVertexShaderSimplePos(),e,this.gl,this.extParallelCompile);this._shader_mesh_depthvalues.addVertexShaderPosVars(this);if(1<this._glVersionNum)this.buffBlockFrame=this._shader_mesh_depthvalues.addBlock("BlockFrame",this),this._shader_mesh_depthvalues.addBlock("BlockInstance",this);else if(this._shader_mesh_depthvalues.addMatrix("uMVPMatrix"),this._shader_mesh_depthvalues.addMatrix("uOMatrix"),
this._shader_mesh_depthvalues.addFloat2("jitter"),4==this.geomgen||5==this.geomgen)this._shader_mesh_depthvalues.addVector("bbmin"),this._shader_mesh_depthvalues.addVector("bbmax");this._shader_mesh_depthvalues.addFloat("znear");this._shader_mesh_depthvalues.addFloat("zfar");this._shader_mesh_depthvalues.addFloat("focalnear");this._shader_mesh_depthvalues.addFloat("focalfar");this._shader_mesh_depthvalues.init()}this._shader_mesh_depthvalues.use(this);this._renderingDoFDepthValues=!0;e=0;var f=void 0!=
this.sceneRadiusNonDepth?this.sceneRadiusNonDepth:this.sceneRadius;f+=infinityrt_length(this.camPos);void 0!=this._MaxAccurateDoFFar&&f>this._MaxAccurateDoFFar&&(f=this._MaxAccurateDoFFar);this._shader_mesh_depthvalues.setFloat("focalnear",e);this._shader_mesh_depthvalues.setFloat("focalfar",f);if(0<this._lstNonDepthObjects.length){var g=this.p_matrix,h=this.projDepths;this.p_matrix=this.getProjectionMatrix(this.sceneRadiusNonDepth);this.mvp_matrix=MatrixMultiply(this.mv_matrix,this.p_matrix);this.FrameDirty();
this._shader_mesh_depthvalues.setFloat("znear",this.projDepths.zNear);this._shader_mesh_depthvalues.setFloat("zfar",this.projDepths.zFar);this._lstTransObjs=[];for(var k=0;k<this._lstNonDepthObjects.length;k++)this.renderOpaqueObject(this._lstNonDepthObjects[k]);if(this._lstTransObjs.length){this._bOrderBasedTransparency&&d.depthMask(!1);for(k=0;k<this._lstTransObjs.length;k++)this.renderTransparentObject(this._lstTransObjs[k]);this._bOrderBasedTransparency&&d.depthMask(!0)}this.p_matrix=g;this.projDepths=
h;this.mvp_matrix=MatrixMultiply(this.mv_matrix,this.p_matrix);this.FrameDirty();d.clear(d.DEPTH_BUFFER_BIT)}this._shader_mesh_depthvalues.setFloat("znear",this.projDepths.zNear);this._shader_mesh_depthvalues.setFloat("zfar",this.projDepths.zFar);this._lstTransObjs=[];this.renderOpaqueObject(this);if(this._lstTransObjs.length){this._bOrderBasedTransparency&&d.depthMask(!1);for(k=0;k<this._lstTransObjs.length;k++)this.renderTransparentObject(this._lstTransObjs[k]);this._bOrderBasedTransparency&&d.depthMask(!0)}this._renderingDoFDepthValues=
!1;null!=this._fboDoF._nFBODown&&(this.bltMSAAFBOToTex(this._fboDoF._nFBO,this._fboDoF._nFBODown,this._fboDoF._nFBOWidth,this._fboDoF._nFBOHeight),d.bindFramebuffer(d.FRAMEBUFFER,this._fboDoF._nFBODown))}else null!=this._fboDoFDepth._nFBODown&&d.bindFramebuffer(d.FRAMEBUFFER,this._fboDoFDepth._nFBODown);"undefined"==typeof c&&(c=[Math.floor(this.viewwidth/2),Math.floor(this.viewheight/2)]);void 0!=this._ptDoFFocal&&(c[0]+=this._ptDoFFocal[0]*this.viewwidth,c[1]+=this._ptDoFFocal[1]*this.viewheight);
b=this.GetDepthValueAt(a,c,b,e,f);a&&(d.bindFramebuffer(d.FRAMEBUFFER,this.currentFrameBuffer),this._backgroundTransparent?d.clearColor(0,0,0,0):d.clearColor(this._backgroundColor[0],this._backgroundColor[1],this._backgroundColor[2],1));b>this.maxAllowedDoFDepth&&(b=this.maxAllowedDoFDepth);return b};
infinityrt_scene.prototype.StoreDepthFromSphericalOrigin=function(){var a=infinityrt_vertex_scladd(this.camPos,[-this.matView[8],-this.matView[9],-this.matView[10]],this._fDoFFocusPos);this._fDoFFocusSphereDist=infinityrt_length(a)};infinityrt_scene.prototype.UseDepthFromSphericalOrigin=function(){this._fDoFFocusPos=infinityrt_length(this.camPos)-this._fDoFFocusSphereDist};infinityrt_scene.prototype.RelaxFocusRate=function(){this.skipFocusRateChanges=2};
infinityrt_scene.prototype.ChangeDoFFocus=function(a){if(0<this.skipFocusRateChanges)this.skipFocusRateChanges--,this._fDoFFocusPos=a;else{var b=a-this._fDoFFocusPos;b<-this.maxFocusRate?b=-this.maxFocusRate:b>this.maxFocusRate&&(b=this.maxFocusRate);this._fDoFFocusPos+=b;this._fDoFFocusPos!=a&&(this._dofRequiresClear=!0)}};
infinityrt_scene.prototype.setDoFTargetObject=function(a){null==this.getInstanceByNameIncEnv(a,this)?(this._DoFTargetObject=null,console.log("Warning: Target object "+a.toString()+" not found. Setting center pixel as target.")):(this._DoFTargetObject=a,this._DoFTargetRangeObjects=[]);this.reqDoFDepthCalc=!0;this.clearRefine();return this._DoFTargetObject};
infinityrt_scene.prototype.setDoFTargetRangeObjects=function(a){if(Array.isArray(a)){this._DoFTargetRangeObjects=[];for(var b=0;b<a.length;b++){var c=this.getInstanceByNameIncEnv(a[b],this);null==c?console.log("Warning: Target Range object "+a[b].toString()+" not found."):(this._DoFTargetRangeObjects.push(c),this._DoFTargetObject=null)}this.reqDoFDepthCalc=!0;this.clearRefine()}else console.log("Warning: Target Range objects "+a+" must be an array")};
infinityrt_scene.prototype.renderDoF=function(){var a=this.gl;if(this._DoFTargetObject){var b=this.projectPoint(this.getObjectLocation(this._DoFTargetObject,!0));b[0]=.5*b[0]+.5;b[1]=.5*b[1]+.5;b[0]*=this.viewwidth;b[1]*=this.viewheight;b[0]+=Math.floor(.5*this._projectionOffset.x);b[1]+=Math.floor(.5*this._projectionOffset.y);this._pointInterest=b}else this._pointInterest=void 0;if(null==this._fboDoF||this._fboDoF._nFBOWidth!=this.viewwidth||this._fboDoF._nFBOHeight!=this.viewheight)this.RTDoFQuick&&
1<this._glVersionNum?this._fboDoF=this.CreateFBOTargetMSAA(!0,this.viewwidth,this.viewheight):(this._fboDoF=this.CreateFBOTargetMSAA(!0,this.viewwidth,this.viewheight),this._fboDoFDepth=this.CreateFBOTargetMSAA(!0,this.viewwidth,this.viewheight));b=this.IsSecondFrameAA()||this.IsThirdFrameAA();var c="undefined"!=typeof this._nav._navDollyRestriction;this.oDoF=null;var d=!1,e=infinityrt_length(infinityrt_vertex_sub(this.camPosGlobal,this._posDoFLastCam)),f=.1*this.sceneRadius;b&&(e>f||this.reqDoFDepthCalc)&&
(d=!0,this.reqDoFDepthCalc=!1,e=this.GetDoFFocusDepth(!0,this.oDoF,this._pointInterest),0!=e?(this.ChangeDoFFocus(e),this._posDoFLastCam=this.camPosGlobal,c&&this._bAccurateDoF||this._nDoFMissMode!=DOF_MISS_MODE_SPHERICAL||this.StoreDepthFromSphericalOrigin()):this._nDoFMissMode!=DOF_MISS_MODE_NOCHANGE&&(this._nDoFMissMode==DOF_MISS_MODE_ORIGIN?this._fDoFFocusPos=infinityrt_length(this.camPos):c&&this._bAccurateDoF||this._nDoFMissMode!=DOF_MISS_MODE_SPHERICAL||this.UseDepthFromSphericalOrigin()));
e=this._nDoFApertureMode==DOF_APERTURE_MODE_NAVDOLLY?(this._nav._navDolly-this._nav._navMinDolly)/(this._nav._navMaxDolly-this._nav._navMinDolly):(this._fDoFFocusPos-this._fDoFNearDist)/(this._fDoFFarDist-this._fDoFNearDist);0>e?e=0:1<e&&(e=1);this.oDoF={fDoFAperture:(1-e)*this._fDoFNearAperture+e*this._fDoFFarAperture,fDoFBias:(1-e)*this._DoFNearBias+e*this._DoFFarBias,CurrFocusWidth:this._fDoFFocusWidth*this._fDoFFocusPos};0==this.oDoF.fDoFAperture&&(this.oDoF.fDoFAperture=.001);a.bindFramebuffer(a.FRAMEBUFFER,
this._fboDoF._nFBO);a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT);this.RTDoFQuick&&this.zprepass&&this.renderZPrePass();0<this._backdroptexturename.length&&this.renderBackdrop();this.activeTexMap={};this.furthestAABBCornerDist=0;this.nearestAABBCornerDist=1E5;if(0<this._DoFTargetRangeObjects.length)for(e=0;e<this._DoFTargetRangeObjects.length;e++)this.computeBBoxFurthest(this._DoFTargetRangeObjects[e]);else null!=this._rootEnv&&this.computeBBoxFurthest(this._rootEnv),this.computeBBoxFurthest(this);
this.furthestAABBCornerDist=Math.sqrt(this.furthestAABBCornerDist);this.nearestAABBCornerDist=Math.sqrt(this.nearestAABBCornerDist);if(0<this._lstNonDepthObjects.length){this._lstTransObjs=[];f=this.p_matrix;var g=this.projDepths;this.p_matrix=this.getProjectionMatrix(this.sceneRadiusNonDepth);this.mvp_matrix=MatrixMultiply(this.mv_matrix,this.p_matrix);this.FrameDirty();for(e=0;e<this._lstNonDepthObjects.length;e++)this.renderOpaqueObject(this._lstNonDepthObjects[e]);this.RenderFoundTransparentNodes();
this.projDepths=g;this.p_matrix=f;this.mvp_matrix=MatrixMultiply(this.mv_matrix,this.p_matrix);this.FrameDirty();a.clear(a.DEPTH_BUFFER_BIT)}null!=this.fnPreDraw&&this.fnPreDraw();this._lstTransObjs=[];null!=this._rootEnv&&this.renderOpaqueObject(this._rootEnv);this.renderOpaqueObject(this);this.RenderFoundTransparentNodes();null!=this._fboDoF._nFBODown&&this.bltMSAAFBOToTex(this._fboDoF._nFBO,this._fboDoF._nFBODown,this._fboDoF._nFBOWidth,this._fboDoF._nFBOHeight,!0);this.activeTexMap=null;if(this.RTDoFQuick&&
1<this._glVersionNum)this.FXAA&&1<this._glVersionNum&&(null==this._shader_prog_fxaa&&(this._shader_prog_fxaa=new infinityrt_shader(shaderes3_InfinityRT_FXAAvs,shaderes3_InfinityRT_FXAAfs,a,this.extParallelCompile),this._shader_prog_fxaa.addVertexArray("position"),this._shader_prog_fxaa.addUVArray("uv"),this._shader_prog_fxaa.addFloat2("iResolution"),this._shader_prog_fxaa.addInt("iChannel0",0),this._shader_prog_fxaa.addInt("enabled",1),this._shader_prog_fxaa.init()),this._shader_prog_fxaa.use(this),
a.activeTexture(a.TEXTURE0),a.bindTexture(a.TEXTURE_2D,this._fboDoF._nFBOTex),this._shader_prog_fxaa.setInt("iChannel0",0),this._shader_prog_fxaa.setInt("enabled",this.disableFXAA?0:1),this._shader_prog_fxaa.setFloat2("iResolution",[this._fboDoF._nFBOWidth,this._fboDoF._nFBOHeight]),this.RenderOrthoQuad(this._fboDoF,this._shader_prog_fxaa),null!=this._fboDoF._nFBODown&&this.bltMSAAFBOToTex(this._fboDoF._nFBO,this._fboDoF._nFBODown,this._fboDoF._nFBOWidth,this._fboDoF._nFBOHeight));else{a.bindFramebuffer(a.FRAMEBUFFER,
this._fboDoFDepth._nFBO);a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT);if(null==this._shader_mesh_depth){2==this._glVersionNum?(e="#version 300 es\n"+this.getVertexHeader()+g_es3_frag_dof_depth,e=ReplaceAll(e,"SIRT_BLOCKVERTEX_INSERT",shaderes3_InfinityRT_BlockVertexvs)):e=this.getVertexHeader()+g_frag_dof_depth;this._shader_mesh_depth=new infinityrt_shader(this.getVertexShaderSimplePos(),e,this.gl,this.extParallelCompile);this._shader_mesh_depth.addVertexShaderPosVars(this);if(1<this._glVersionNum)this.buffBlockFrame=
this._shader_mesh_depth.addBlock("BlockFrame",this),this._shader_mesh_depth.addBlock("BlockInstance",this);else if(this._shader_mesh_depth.addMatrix("uMVPMatrix"),this._shader_mesh_depth.addMatrix("uOMatrix"),this._shader_mesh_depth.addFloat2("jitter"),4==this.geomgen||5==this.geomgen)this._shader_mesh_depth.addVector("bbmin"),this._shader_mesh_depth.addVector("bbmax");this._shader_mesh_depth.addFloat("znear");this._shader_mesh_depth.addFloat("zfar");this._shader_mesh_depth.addFloat("textureWidth");
this._shader_mesh_depth.addFloat("textureHeight");this._shader_mesh_depth.addInt("tColor");this._shader_mesh_depth.addFloat("focalnear");this._shader_mesh_depth.addFloat("focalfar");this._shader_mesh_depth.addFloat("dofbias");this._shader_mesh_depth.init()}this._shader_mesh_depth.use(this);this._shader_mesh_depth.setFloat("textureWidth",this._fboDoF._nFBOWidth);this._shader_mesh_depth.setFloat("textureHeight",this._fboDoF._nFBOHeight);a.activeTexture(a.TEXTURE0);a.bindTexture(a.TEXTURE_2D,this._fboDoF._nFBOTex);
this._shader_mesh_depth.setInt("tColor",0);this._shader_mesh_depth.setFloat("focalnear",this._fDoFFocusPos-this.oDoF.CurrFocusWidth);this._shader_mesh_depth.setFloat("focalfar",this._fDoFFocusPos+this.oDoF.CurrFocusWidth);this._shader_mesh_depth.setFloat("dofbias",this.oDoF.fDoFBias);this._renderingDoFDepth=!0;0<this._backdroptexturename.length&&(this.renderBackdrop(),this._shader_mesh_depth.use(this));if(0<this._lstNonDepthObjects.length){f=this.p_matrix;g=this.projDepths;this.p_matrix=this.getProjectionMatrix(this.sceneRadiusNonDepth);
this.mvp_matrix=MatrixMultiply(this.mv_matrix,this.p_matrix);this.FrameDirty();this._shader_mesh_depth.setFloat("znear",this.projDepths.zNear);this._shader_mesh_depth.setFloat("zfar",this.projDepths.zFar);this._lstTransObjs=[];for(e=0;e<this._lstNonDepthObjects.length;e++)this.renderOpaqueObject(this._lstNonDepthObjects[e]);if(this._lstTransObjs.length){this._bOrderBasedTransparency&&a.depthMask(!1);for(e=0;e<this._lstTransObjs.length;e++)this.renderTransparentObject(this._lstTransObjs[e]);this._bOrderBasedTransparency&&
a.depthMask(!0)}this.p_matrix=f;this.projDepths=g;this.mvp_matrix=MatrixMultiply(this.mv_matrix,this.p_matrix);this.FrameDirty();a.clear(a.DEPTH_BUFFER_BIT)}this._shader_mesh_depth.setFloat("znear",this.projDepths.zNear);this._shader_mesh_depth.setFloat("zfar",this.projDepths.zFar);this._lstTransObjs=[];null!=this._rootEnv&&this.renderOpaqueObject(this._rootEnv);this.renderOpaqueObject(this);if(this._lstTransObjs.length){this._bOrderBasedTransparency&&a.depthMask(!1);for(e=0;e<this._lstTransObjs.length;e++)this.renderTransparentObject(this._lstTransObjs[e]);
this._bOrderBasedTransparency&&a.depthMask(!0)}this._renderingDoFDepth=!1;null!=this._fboDoFDepth._nFBODown&&this.bltMSAAFBOToTex(this._fboDoFDepth._nFBO,this._fboDoFDepth._nFBODown,this._fboDoFDepth._nFBOWidth,this._fboDoFDepth._nFBOHeight)}this._bAccurateDoF?b&&!d&&((e=this.GetDoFFocusDepth(!1,this.oDoF,this._pointInterest),0!=e)?(this.ChangeDoFFocus(e),this._posDoFLastCam=this.camPosGlobal,c||this._nDoFMissMode!=DOF_MISS_MODE_SPHERICAL||this.StoreDepthFromSphericalOrigin()):this._nDoFMissMode!=
DOF_MISS_MODE_NOCHANGE&&(this._nDoFMissMode==DOF_MISS_MODE_ORIGIN?this._fDoFFocusPos=infinityrt_length(this.camPos):c||this._nDoFMissMode!=DOF_MISS_MODE_SPHERICAL?c&&(this._posDoFLastCam=[999999,999999,999999],this.clearRefine()):this.UseDepthFromSphericalOrigin())):b&&!d&&(e=this.GetDoFFocusDepth(!1,this.oDoF,this._pointInterest),0!=e?(this.ChangeDoFFocus(e),this._posDoFLastCam=this.camPosGlobal,this._nDoFMissMode==DOF_MISS_MODE_SPHERICAL&&this.StoreDepthFromSphericalOrigin()):this._nDoFMissMode!=
DOF_MISS_MODE_NOCHANGE&&(this._nDoFMissMode==DOF_MISS_MODE_ORIGIN?this._fDoFFocusPos=infinityrt_length(this.camPos):this._nDoFMissMode==DOF_MISS_MODE_SPHERICAL&&this.UseDepthFromSphericalOrigin()));null==this._shader_prog_bokeh&&(this._shader_prog_bokeh=this.RTDoFQuick&&1<this._glVersionNum?new infinityrt_shader(g_vertex_LuminosityHighPassShaderWGL2,"#version 300 es\n"+g_frag_dof_bokeh_quick,a,this.extParallelCompile):new infinityrt_shader(g_vertex_LuminosityHighPassShader,"#define RT_GLVERSIONNUM 1\n"+
g_frag_dof_bokeh,a,this.extParallelCompile),this.RTDoFQuick&&1<this._glVersionNum?(this._shader_prog_bokeh.addInt("tColor",0),this._shader_prog_bokeh.addInt("tDepth",1),this._shader_prog_bokeh.addFloat("znear"),this._shader_prog_bokeh.addFloat("zfar"),this._shader_prog_bokeh.addFloat2("targetpos2D"),this._shader_prog_bokeh.addFloat("maxfocalplanedepth"),this._shader_prog_bokeh.addFloat("minfocalplanedepth"),this._shader_prog_bokeh.addFloat("pixelscale")):this._shader_prog_bokeh.addInt("tColorAndDepth",
0),this._shader_prog_bokeh.addFloat("aperture"),this._shader_prog_bokeh.addFloat2("aspectcorrect"),this._shader_prog_bokeh.addInt("applytonear"),this._shader_prog_bokeh.addVertexArray("position"),this._shader_prog_bokeh.addUVArray("uv"),this._shader_prog_bokeh.init());this._shader_prog_bokeh.use(this);a.activeTexture(a.TEXTURE0);this.RTDoFQuick&&1<this._glVersionNum?(a.bindTexture(a.TEXTURE_2D,this._fboDoF._nFBOTex),a.activeTexture(a.TEXTURE1),a.bindTexture(a.TEXTURE_2D,this._fboDoF._nFBODepthTex),
this._shader_prog_bokeh.setFloat("znear",this.projDepths.zNear),this._shader_prog_bokeh.setFloat("zfar",this.projDepths.zFar),b=void 0!=this.sceneRadiusNonDepth?this.sceneRadiusNonDepth:this.sceneRadius,b+=infinityrt_length(this.camPos),void 0!=this._MaxAccurateDoFFar&&b>this._MaxAccurateDoFFar&&(b=this._MaxAccurateDoFFar),this._shader_prog_bokeh.setFloat("focalnear",0),this._shader_prog_bokeh.setFloat("focalfar",b),this._shader_prog_bokeh.setFloat2("targetpos2D",this._pointInterest?[this._pointInterest[0]/
this._fboDoF._nFBOWidth,this._pointInterest[1]/this._fboDoF._nFBOHeight]:[.5,.5]),this._shader_prog_bokeh.setFloat("maxfocalplanedepth",this.furthestAABBCornerDist),this._shader_prog_bokeh.setFloat("minfocalplanedepth",this.nearestAABBCornerDist)):a.bindTexture(a.TEXTURE_2D,this._fboDoFDepth._nFBOTex);this._shader_prog_bokeh.setFloat("aperture",this.aperture?this.aperture:this.oDoF.fDoFAperture);this._shader_prog_bokeh.setFloat2("aspectcorrect",[1/this._fboDoF._nFBOWidth,1/this._fboDoF._nFBOHeight]);
this._shader_prog_bokeh.setFloat("pixelscale",this._nDoFPixelScaling);this._shader_prog_bokeh.setInt("applytonear",this._nDoFApplyToNear);this.RenderOrthoQuad(null,this._shader_prog_bokeh);a.bindFramebuffer(a.FRAMEBUFFER,this.currentFrameBuffer)};var g_frag_PickShader="#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n#else\n  precision mediump float;\n#endif\nuniform vec4 instanceid;\nvoid main() {gl_FragColor = instanceid;}";
infinityrt_scene.prototype.renderPick=function(){if(null==this._fboPick||this._fboPick._nFBOWidth!=this.viewwidth||this._fboPick._nFBOHeight!=this.viewheight)this._fboPick=this.CreateFBOTarget(!0,this.viewwidth,this.viewheight);if(null==this._shader_prog_pick){this._shader_prog_pick=new infinityrt_shader(this.getVertexShaderSimplePos(),g_frag_PickShader,this.gl,this.extParallelCompile);this._shader_prog_pick.addVertexShaderPosVars(this);if(1<this._glVersionNum)this.buffBlockFrame=this._shader_prog_pick.addBlock("BlockFrame",
this),this._shader_prog_pick.addBlock("BlockInstance",this);else if(this._shader_prog_pick.addMatrix("uMVPMatrix"),this._shader_prog_pick.addMatrix("uOMatrix"),this._shader_prog_pick.addFloat2("jitter"),4==this.geomgen||5==this.geomgen)this._shader_prog_pick.addVector("bbmin"),this._shader_prog_pick.addVector("bbmax");this._shader_prog_pick.addVector4("instanceid");this._shader_prog_pick.init()}this._shader_prog_pick.use(this);this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._fboPick._nFBO);this.gl.clearColor(0,
0,0,0);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);this._renderingPickPass=!0;this._lstTransObjs=[];this.renderOpaqueObject(this);this.RenderFoundTransparentNodes();this._renderingPickPass=!1;this.gl.clearColor(this._backgroundColor[0],this._backgroundColor[1],this._backgroundColor[2],1);this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.currentFrameBuffer)};
infinityrt_scene.prototype.GetPickAt=function(a){if(null==this._fboPick)return null;this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._fboPick._nFBO);var b=new Uint8Array(4);this.gl.readPixels(a[0],this._fboPick._nFBOHeight-1-a[1],1,1,this.gl.RGBA,this.gl.UNSIGNED_BYTE,b);this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.currentFrameBuffer);if(0==b[3])return null;a=b[2]<<16|b[1]<<8|b[0];return a>=this._lstInstances.length?null:this._lstInstances[a]};
infinityrt_scene.prototype.GetPickNameAt=function(a){a=this.GetPickAt(a);for(var b="";null!=a;)""!=b&&(b="."+b),b=a.name+b,a=a.parent;return b};
var g_vertBackdrop="\n     attribute vec2 aVertexPosition;    attribute vec2 aVertexTex;    varying vec2 tex1;    uniform mat4 uMVPMatrix;    uniform mat4 uOMatrix;    uniform vec2 jitter;    void main(void)     {        gl_Position = vec4(aVertexPosition, 0.0, 1.0);        tex1 = aVertexTex;     }",g_fragBackdrop="#ifdef GL_FRAGMENT_PRECISION_HIGH\n         precision highp float;\n     #else\n         precision mediump float;\n     #endif\n     varying vec2 tex1;    uniform sampler2D texBackdrop;     void main()    {\t    gl_FragColor = vec4(texture2D(texBackdrop, tex1).rgb, 1.0);     }",g_fragBackdropAlpha=
"#ifdef GL_FRAGMENT_PRECISION_HIGH\n         precision highp float;\n     #else\n         precision mediump float;\n     #endif\n     varying vec2 tex1;    uniform sampler2D texBackdrop;     void main()    {\t    gl_FragColor = vec4(texture2D(texBackdrop, tex1));     }";
infinityrt_scene.prototype.renderBackdrop=function(){null==this._shader_backdrop&&(this._shader_backdrop=new infinityrt_shader(g_vertBackdrop,g_fragBackdropAlpha,this.gl,this.extParallelCompile),this._shader_backdrop.addVertexArray("aVertexPosition"),this._shader_backdrop.addVertexArray("aVertexTex"),this._shader_backdrop.addInt("texBackdrop"),this._shader_backdrop.init());this._shader_backdrop.use(this);this._shader_backdrop.setInt("texBackdrop",2);var a=this.gl;this._Texture_ref[this._backdroptexturename].use(a.TEXTURE2);
"undefined"==typeof this.buffProgressRefine&&(this.buffProgressRefine=a.createBuffer(),a.bindBuffer(a.ARRAY_BUFFER,this.buffProgressRefine),a.bufferData(a.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,1,1]),a.STATIC_DRAW),this.buffProgressRefine.itemSize=2,this.buffProgressRefine.numItems=4);a.bindBuffer(a.ARRAY_BUFFER,this.buffProgressRefine);a.vertexAttribPointer(this._shader_backdrop.uniforms.aVertexPosition,2,a.FLOAT,!1,0,0);a.enableVertexAttribArray(this._shader_backdrop.uniforms.aVertexPosition);
"undefined"==typeof this.buffProgressRefineCoords&&(this.buffProgressRefineCoords=a.createBuffer(),a.bindBuffer(a.ARRAY_BUFFER,this.buffProgressRefineCoords),a.bufferData(a.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,1,1]),a.STATIC_DRAW),this.buffProgressRefineCoords.itemSize=2,this.buffProgressRefineCoords.numItems=4);a.bindBuffer(a.ARRAY_BUFFER,this.buffProgressRefineCoords);a.vertexAttribPointer(this._shader_backdrop.uniforms.aVertexTex,2,a.FLOAT,!1,0,0);a.enableVertexAttribArray(this._shader_backdrop.uniforms.aVertexTex);
a.drawArrays(a.TRIANGLE_STRIP,0,this.buffProgressRefine.numItems);a.clear(a.DEPTH_BUFFER_BIT)};var g_frag_CompositePlanarReflectMaterial="#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n #else\n precision mediump float;\n#endif\n  varying vec2 vUv; uniform sampler2D blurTexture; void main() { gl_FragColor = texture2D(blurTexture, vUv); }";
infinityrt_scene.prototype.CompileSeparableBlurShaders=function(a){if(this._lstSeparableBlurShaders.length!=a){this._lstSeparableBlurShaders=[];for(var b=[3,5,7,9,11],c=0;c<a;c++){var d=g_frag_SeperableBlurMaterial;d=ReplaceAll(d,"KERNEL_RADIUS",b[c]);d=ReplaceAll(d,"SIGMA",b[c]);d=new infinityrt_shader(g_vertex_LuminosityHighPassShader,d,this.gl,this.extParallelCompile);this._lstSeparableBlurShaders.push(d);d.addInt("colorTexture",0);d.addInt("alphamode",0);d.addFloat2("texSize");d.addFloat2("direction");
d.addVertexArray("position");d.addUVArray("uv");d.init()}}};infinityrt_scene.prototype.InitSeparableBlurShaders=function(a){for(var b=Math.round(this.viewwidth/2),c=Math.round(this.viewheight/2),d=0;d<a;d++){var e=this._lstSeparableBlurShaders[d];e.use(this);e.setFloat2("texSize",[b,c]);b=Math.round(b/2);c=Math.round(c/2)}};
infinityrt_scene.prototype.renderPlanarReflectionTexture=function(){if(null==this._fboPlanarReflect||this._fboPlanarReflect._nFBOWidth!=this.viewwidth||this._fboPlanarReflect._nFBOHeight!=this.viewheight){this._fboPlanarReflect=this.CreateFBOTarget(!0,this.viewwidth,this.viewheight);this.renderTargetsHorizontal=[];this.renderTargetsVertical=[];for(var a=Math.round(this.viewwidth/2),b=Math.round(this.viewheight/2),c=0;5>c;c++)this.renderTargetsHorizontal.push(this.CreateFBOTarget(!1,a,b)),this.renderTargetsVertical.push(this.CreateFBOTarget(!1,
a,b)),a=Math.round(a/2),b=Math.round(b/2);c=g_frag_CompositePlanarReflectMaterial;c=ReplaceAll(c,"NUM_MIPS",5);this._prog_composite_planarreflect=new infinityrt_shader(g_vertex_LuminosityHighPassShader,c,this.gl,this.extParallelCompile);this._prog_composite_planarreflect.addVertexArray("position");this._prog_composite_planarreflect.addUVArray("uv");this._prog_composite_planarreflect.addInt("blurTexture");this._prog_composite_planarreflect.init();this.CompileSeparableBlurShaders(5)}this.InitSeparableBlurShaders(5);
this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._fboPlanarReflect._nFBO);this._fadedReflectionsActive?this.gl.clearColor(this.fadedReflectionsColor[0],this.fadedReflectionsColor[1],this.fadedReflectionsColor[2],0):this.gl.clearColor(0,0,0,0);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);this._renderingPlanarReflectPass=!0;this.FrameDirty();this.zprepass&&this.renderOrdered||(this._lstTransObjs=[]);for(c=0;c<this._lstPlanarReflectNodes.length;c++)this._lstPlanarReflectNodes[c].parent.visible&&
this._lstPlanarReflectNodes[c].ready&&this.renderOpaqueObject(this._lstPlanarReflectNodes[c]);this.RenderFoundTransparentNodes();this._renderingPlanarReflectPass=!1;this.FrameDirty();c=!0;.01>this._fPlanarReflectDirX&&.01>this._fPlanarReflectDirY&&(c=!1);if(c){a=this._fboPlanarReflect;for(c=0;5>c;c++)this._lstSeparableBlurShaders[c].use(this),this._lstSeparableBlurShaders[c].setInt("alphamode",1),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,a._nFBOTex),this._lstSeparableBlurShaders[c].setFloat2("direction",
[this._fPlanarReflectDirX,0]),this.RenderOrthoQuad(this.renderTargetsHorizontal[c],this._lstSeparableBlurShaders[c]),this.gl.bindTexture(this.gl.TEXTURE_2D,this.renderTargetsHorizontal[c]._nFBOTex),this._lstSeparableBlurShaders[c].setFloat2("direction",[0,this._fPlanarReflectDirY]),this.RenderOrthoQuad(this.renderTargetsVertical[c],this._lstSeparableBlurShaders[c]),a=this.renderTargetsVertical[c];this._prog_composite_planarreflect.use(this);this.gl.activeTexture(this.gl.TEXTURE0);this.gl.bindTexture(this.gl.TEXTURE_2D,
this.renderTargetsVertical[this._nPlanarReflectMap]._nFBOTex);this._prog_composite_planarreflect.setInt("blurTexture",0);this.RenderOrthoQuad(this._fboPlanarReflect,this._prog_composite_planarreflect)}this.hasBrightReflections?this.gl.blendFuncSeparate(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA,this.gl.ZERO,this.gl.ONE):this.gl.blendFuncSeparate(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA,this.gl.ZERO,this.gl.ONE);this._backgroundTransparent?this.gl.clearColor(0,0,0,0):this.gl.clearColor(this._backgroundColor[0],
this._backgroundColor[1],this._backgroundColor[2],1);this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.currentFrameBuffer)};var g_frag_CompositeBlending="#ifdef GL_FRAGMENT_PRECISION_HIGH\n         precision highp float;\n     #else\n         precision mediump float;\n     #endif\n     varying vec2 vUv;    uniform sampler2D blendTex;     uniform sampler2D clearTex;     uniform sampler2D frostedTex;     void main()    {\t    gl_FragColor = mix(texture2D(clearTex, vUv), texture2D(frostedTex, vUv), texture2D(blendTex, vUv).r);     }";
infinityrt_scene.prototype.drawBlendedOutput=function(a,b){if(!this._started||0<this._outstandingjobs||!this.prepare()||this._activeapply)return!1;var c=this.gl;this.tmFrame=now();this.camPosGlobal=this.camPos=[parseFloat(this.matView[12])*this._SceneScale,parseFloat(this.matView[13])*this._SceneScale,parseFloat(this.matView[14])*this._SceneScale];this.camPosGlobal=infinityrt_vertex_scladd(this.camPosGlobal,[this.matView[0],this.matView[1],this.matView[2]],this._nav._navPan[0]*this._SceneScale);this.camPosGlobal=
infinityrt_vertex_scladd(this.camPosGlobal,[this.matView[4],this.matView[5],this.matView[6]],this._nav._navPan[1]*this._SceneScale);this.camPosGlobal=this.RestrictViewSpace(this.camPosGlobal);if(2==this.upvector){var d=[this.matView[12]*this._SceneScale+this.matView[0],this.matView[13]*this._SceneScale+this.matView[1],this.matView[14]*this._SceneScale+this.matView[2]];var e=[this.matView[8],this.matView[9],this.matView[10]]}else d=[this.matView[12]*this._SceneScale-this.matView[8],this.matView[13]*
this._SceneScale-this.matView[9],this.matView[14]*this._SceneScale-this.matView[10]],e=[this.matView[4],this.matView[5],this.matView[6]];this.mv_matrix=infinityrt_lookat(this.camPos,d,e,this._nav._navPan,this._SceneScale,this);this.p_matrix=this.getProjectionMatrix(this.sceneRadius);this._animRequiresClear=!1;this.mvp_matrix=MatrixMultiply(this.mv_matrix,this.p_matrix);this.FrameDirty();if(null==this._fboBlend||this._fboBlend._nFBOWidth!=this.viewwidth||this._fboBlend._nFBOHeight!=this.viewheight)this._fboBlend=
this.CreateFBOTarget(!0,this.viewwidth,this.viewheight),this.clearTex=this._Texture_ref[a],this.frostedTex=this._Texture_ref[b],this._prog_blend=new infinityrt_shader(g_vertex_LuminosityHighPassShader,g_frag_CompositeBlending,c,this.extParallelCompile),this._prog_blend.addVertexArray("position"),this._prog_blend.addUVArray("uv"),this._prog_blend.addInt("blendTex"),this._prog_blend.addInt("clearTex"),this._prog_blend.addInt("frostedTex"),this._prog_blend.init();this.visibilityChanged&&(this.visibilityChanged=
!1,this.CheckForGeomUnloads(!1));this._animateSecondaryMatsActive&&this.MaterialAnimStep();if(this._hierarchyDirty||0<this._animActive)null!=this._rootEnv&&this.walkForMatrices(this._rootEnv,this.mHierModel,!0,!0),this.walkForMatrices(this,this.mHierModel,!0,!0),this._hierarchyDirty=!1;this._jitter[1]=this._jitter[0]=0;c.bindFramebuffer(c.FRAMEBUFFER,this._fboBlend._nFBO);c.viewport(0,0,this.viewwidth,this.viewheight);c.clearColor(0,0,0,1);c.clear(c.COLOR_BUFFER_BIT|c.DEPTH_BUFFER_BIT);this._renderingPlanarReflectPass=
!0;this._lstTransObjs=[];for(a=0;a<this._lstPlanarReflectNodes.length;a++)this.renderOpaqueObject(this._lstPlanarReflectNodes[a]);this.RenderFoundTransparentNodes();this._renderingPlanarReflectPass=!1;this._prog_blend.use(this);c.activeTexture(c.TEXTURE0);c.bindTexture(c.TEXTURE_2D,this._fboBlend._nFBOTex);this._prog_blend.setInt("blendTex",0);this.clearTex.use(c.TEXTURE1);this._prog_blend.setInt("clearTex",1);this.frostedTex.use(c.TEXTURE2);this._prog_blend.setInt("frostedTex",2);this.RenderOrthoQuad(null,
this._prog_blend);c.finish();if(null!=this._TextureToLvl0){for(a=0;a<this._TextureToLvl0.length;a++)this._TextureToLvl0[a].loadrtex(0);this._TextureToLvl0=null}};infinityrt_scene.prototype.bltMSAAFBOToTex=function(a,b,c,d,e){if(!this.disableMSAA){var f=this.gl;f.bindFramebuffer(f.READ_FRAMEBUFFER,a);f.bindFramebuffer(f.DRAW_FRAMEBUFFER,b);e?f.blitFramebuffer(0,0,c,d,0,0,c,d,f.COLOR_BUFFER_BIT|f.DEPTH_BUFFER_BIT,f.NEAREST):f.blitFramebuffer(0,0,c,d,0,0,c,d,f.COLOR_BUFFER_BIT,f.LINEAR)}};
var g_vertex_loader="\nattribute vec3 position;    attribute vec2 uv;    varying vec2 vUv;    uniform mat4 uPMatrix;    void main(void)     {        gl_Position = uPMatrix * vec4(position, 1.0);        vUv = uv;    }",g_frag_loader="#ifdef GL_FRAGMENT_PRECISION_HIGH\n     precision highp float;\n     #else\n     precision mediump float;\n     #endif\n     varying vec2 vUv;    uniform sampler2D tSrc;\tvoid main() {\t    gl_FragColor = vec4(texture2D(tSrc, vUv).rgb, 1.0);    }";
infinityrt_scene.prototype.drawLoader=function(){for(var a=this.gl,b=this.loader,c=this._nav._navYAng;0>c;)c+=2*M_PI;for(;c>2*M_PI;)c-=2*M_PI;for(var d=-1,e=99999.9,f=0;f<b.images.length;f++){var g=b.images[f];if(void 0!=g.tex){var h=Math.abs(g.yang-c);h<e&&(e=h,d=f,b.curYAng=g.yang)}}if(-1==d)return!1;a.clearColor(this._backgroundColor[0],this._backgroundColor[1],this._backgroundColor[2],1);a.clear(a.COLOR_BUFFER_BIT|a.DEPTH_BUFFER_BIT);void 0==b.prog&&(b.prog=new infinityrt_shader(g_vertex_loader,
g_frag_loader,a,this.extParallelCompile),b.prog.addVertexArray("position"),b.prog.addUVArray("uv"),b.prog.addInt("tSrc"),b.prog.addMatrix("uPMatrix"));b.prog.use(this);a.activeTexture(a.TEXTURE0);a.bindTexture(a.TEXTURE_2D,b.images[d].tex);b.prog.setInt("tSrc",0);b.prog.setMatrix("uPMatrix",infinityrt_perspective(this.getAdjFoV(),this.viewwidth/this.viewheight,.5,1.1));a.bindFramebuffer(a.FRAMEBUFFER,null);a.viewport(0,0,this.viewwidth,this.viewheight);if("undefined"==typeof b.buffVerts||"undefined"==
typeof b.buffUVs)c=Math.tan(.5*this.fovy/180*M_PI),d=b.images[d].img.width/b.images[d].img.height*c,b.buffVerts=a.createBuffer(),a.bindBuffer(a.ARRAY_BUFFER,b.buffVerts),a.bufferData(a.ARRAY_BUFFER,new Float32Array([-d,-c,-1,d,-c,-1,-d,c,-1,d,c,-1]),a.STATIC_DRAW),b.buffVerts.itemSize=3,b.buffVerts.numItems=4,b.buffUVs=a.createBuffer(),a.bindBuffer(a.ARRAY_BUFFER,b.buffUVs),a.bufferData(a.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,1,1]),a.STATIC_DRAW),b.buffUVs.itemSize=2,b.buffUVs.numItems=4;a.bindBuffer(a.ARRAY_BUFFER,
b.buffVerts);a.vertexAttribPointer(b.prog.uniforms.position,3,a.FLOAT,!1,0,0);a.enableVertexAttribArray(b.prog.uniforms.position);a.bindBuffer(a.ARRAY_BUFFER,b.buffUVs);a.vertexAttribPointer(b.prog.uniforms.uv,2,a.FLOAT,!1,0,0);a.enableVertexAttribArray(b.prog.uniforms.uv);a.drawArrays(a.TRIANGLE_STRIP,0,b.buffVerts.numItems);a.disableVertexAttribArray(b.prog.uniforms.position);a.disableVertexAttribArray(b.prog.uniforms.uv);a.finish();return!0};
infinityrt_scene.prototype.setBackgroundTransparent=function(a){(this._backgroundTransparent=!!a)?this.gl.clearColor(0,0,0,0):this.gl.clearColor(this._backgroundColor[0],this._backgroundColor[1],this._backgroundColor[2],1)};infinityrt_scene.prototype.freeGPUTexs=function(){for(var a=0;a<this._TextureObjs.length;a++)this._TextureObjs[a].unloadGPU()};
infinityrt_scene.prototype.enableFenceSync=function(a){"undefined"==typeof a&&(a=!0);if(a&&"function"===typeof this.gl.fenceSync){if(this.isiOS||this.isMACNoAA||this.isFirefox)return this.fenceMode=!1;this.fenceMode=a}};infinityrt_scene.prototype.isFenceSyncEnabled=function(){return this.fenceMode};
infinityrt_scene.prototype.callbackOnSync=function(a){function b(e,f){switch(e.gl.clientWaitSync(f,e.gl.SYNC_FLUSH_COMMANDS_BIT,0)){case e.gl.TIMEOUT_EXPIRED:return setTimeout(function(){b(e,f)});case e.gl.WAIT_FAILED:console.log("callbackOnSync. Should never get here!"),e.gl.deleteSync(f),e.frameNumber=0,a();case e.gl.ALREADY_SIGNALED:return setTimeout(function(){b(e,f)});case e.gl.CONDITION_SATISFIED:e.gl.deleteSync(f),e.frameNumber=1,a()}}this.frameNumber++;this.sync=this.gl.fenceSync(this.gl.SYNC_GPU_COMMANDS_COMPLETE,
0);this.syncCircularArray.push(this.sync);this.gl.flush();if(2>this.frameNumber)setTimeout(function(){a()});else{var c=this.syncCircularArray[1]==this.sync?this.syncCircularArray[0]:this.syncCircularArray[1],d=this;setTimeout(function(){b(d,c)})}};
var QueryString=function(){for(var a={},b=window.location.search.substring(1).split("&"),c=0;c<b.length;c++){var d=b[c].split("=");if("undefined"===typeof a[d[0]])a[d[0]]=decodeURIComponent(d[1]);else if("string"===typeof a[d[0]]){var e=[a[d[0]],decodeURIComponent(d[1])];a[d[0]]=e}else a[d[0]].push(decodeURIComponent(d[1]))}return a}();infinityrt_scene.prototype.ConfigInit=function(){this.configdbready=!1;this.configdb={}};
infinityrt_scene.prototype.ConfigReadXML=function(a){this.ConfigInit();var b=new XMLHttpRequest;b._scene=this;b.open("GET",a,!0);this.requireRequestContentType&&b.setRequestHeader("Content-Type","text/xml");window.infinityrt_options&&!0===window.infinityrt_options.withCredentials&&(b.withCredentials=!0);b.onload=function(c){c=b.responseXML;if(b._scene._usingwkwebview||200!=b.status)console.log("***Error Config: '"+a+"' "+b.status+" readystate "+b.readyState);else{c=c.getElementsByTagName("property");
for(var d=0;d<c.length;d++){var e=c[d];if(0!=e.getElementsByTagName("rtscript").length){var f=e.getElementsByTagName("rtscript")[0].firstChild.nodeValue,g=e.getElementsByTagName("label")[0].firstChild.nodeValue,h=e.getElementsByTagName("id")[0].firstChild.nodeValue;e=e.getElementsByTagName("default")[0].firstChild.nodeValue;b._scene.configdb[h]={label:g,id:h,rtscript:f,value:e}}}b._scene.configdbready=!0}};b.send("")};
infinityrt_scene.prototype.ConfigApply=function(a){if(!this.configdbready||"undefined"==typeof a)return!1;a=a.split("|");for(var b=0;b<a.length;b++){var c=a[b],d=c.indexOf(",");if(-1!=d){var e=c.substring(0,d);c=c.substring(d+1,c.length);e=this.configdb[e];"undefined"!=typeof e&&(e.value=c)}}for(var f in this.configdb)try{e=this.configdb[f];var g=ReplaceAll(e.rtscript,"INSERT_INFINITY_VALUE",e.value);eval(g)}catch(h){return console.log("***Error Config: apply '"+g+"' exception "+h),!1}return!0};
infinityrt_scene.prototype.setMaterial=function(a,b){var c=a.mesh;null!=c&&(c.currentMaterial=b.material_id);for(c=0;c<a.children.length;c++)this.setMaterial(a.children[c],b)};infinityrt_scene.prototype.ConfigMaterialConnectionName=function(a,b){a=this.getInstanceByName(a,this);if(null==a)return!1;b=this._Material_ref[b];if("undefined"==typeof b)return!1;this.setMaterial(a,b);return!0};
infinityrt_scene.prototype.ConfigGeometryConnectionName=function(a,b){a=this.getInstanceByName(a,this);if(null==a)return!1;for(var c=0;c<a.children.length;c++){var d=a.children[c];d.visible=d.name==b;this.visibilityChanged=!0}return!0};function padZeros(a,b){for(a+="";a.length<b;)a="0"+a;return a}
infinityrt_scene.prototype.ConfigMaterialMixConnectionName=function(a,b){var c=this._Material_ref[a];if("undefined"==typeof c){for(var d=1;100>d;d++){var e=a+"_"+padZeros(d,2);c=this._Material_ref[e];var f=b+"_"+padZeros(d,2);e=this._Material_ref[f];if("undefined"==typeof c||"undefined"==typeof e){if(1==d)return!1;break}c._strMaterialPtr[c._strMaterialPtrSel]=f;c.ResolveIndirections()}return!0}e=this._Material_ref[b];if("undefined"==typeof e)return!1;c._strMaterialPtr[c._strMaterialPtrSel]=b;c.ResolveIndirections();
return!0};infinityrt_scene.prototype.ConfigPlacementRotationY=function(a,b){a=this.getInstanceByName(a,this);if(null==a)return!1;var c=[a.matrix[12],a.matrix[13],a.matrix[14]],d=infinityrt_identity.slice(0);b=MatrixRotationAxis(b/180*M_PI,0,1,0);a.matrix=MatrixMultiply(b,d);a.matrix[12]=c[0];a.matrix[13]=c[1];a.matrix[14]=c[2];return!0};infinityrt_scene.prototype.ConfigAnimationTime=function(a,b){return 0==a.length?this.animPlayAllChildren("root",b,0):this.animPlay(a,b,0)};
infinityrt_scene.prototype.ConfigSetBackgroundImage=function(a){a.endsWith("/")||0==a.length?this._backdroptexturename="":(a=new infinityrt_texture("configbackdroptexture","File",this.BuildURL(a),this),a.startFileDownloads(),this._backdroptexturename=a.name);return!0};
infinityrt_scene.prototype.ConfigNamedRGBChange=function(a,b){var c=this._Material_ref[a];if("undefined"==typeof c)return!1;b.startsWith("{")&&(b=ReplaceAll(b,"{",""),b=ReplaceAll(b,"}",""),b=b.split(","),0<b.length&&(b=b[0]));var d=1;do c._MaterialPtrSel=b,c.ResolveIndirections(),c=this._Material_ref[a+"_"+d],d++;while("undefined"==typeof c);return!0};
var $jscomp=$jscomp||{};$jscomp.scope={};$jscomp.ASSUME_ES5=!1;$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.SIMPLE_FROUND_POLYFILL=!1;$jscomp.ISOLATE_POLYFILLS=!1;$jscomp.FORCE_POLYFILL_PROMISE=!1;$jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION=!1;$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(b,a,c){if(b==Array.prototype||b==Object.prototype)return b;b[a]=c.value;return b};
$jscomp.getGlobal=function(b){b=["object"==typeof globalThis&&globalThis,b,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof global&&global];for(var a=0;a<b.length;++a){var c=b[a];if(c&&c.Math==Math)return c}throw Error("Cannot find global object");};$jscomp.global=$jscomp.getGlobal(this);$jscomp.IS_SYMBOL_NATIVE="function"===typeof Symbol&&"symbol"===typeof Symbol("x");$jscomp.TRUST_ES6_POLYFILLS=!$jscomp.ISOLATE_POLYFILLS||$jscomp.IS_SYMBOL_NATIVE;$jscomp.polyfills={};
$jscomp.propertyToPolyfillSymbol={};$jscomp.POLYFILL_PREFIX="$jscp$";var $jscomp$lookupPolyfilledValue=function(b,a){var c=$jscomp.propertyToPolyfillSymbol[a];if(null==c)return b[a];c=b[c];return void 0!==c?c:b[a]};$jscomp.polyfill=function(b,a,c,e){a&&($jscomp.ISOLATE_POLYFILLS?$jscomp.polyfillIsolated(b,a,c,e):$jscomp.polyfillUnisolated(b,a,c,e))};
$jscomp.polyfillUnisolated=function(b,a,c,e){c=$jscomp.global;b=b.split(".");for(e=0;e<b.length-1;e++){var d=b[e];if(!(d in c))return;c=c[d]}b=b[b.length-1];e=c[b];a=a(e);a!=e&&null!=a&&$jscomp.defineProperty(c,b,{configurable:!0,writable:!0,value:a})};
$jscomp.polyfillIsolated=function(b,a,c,e){var d=b.split(".");b=1===d.length;e=d[0];e=!b&&e in $jscomp.polyfills?$jscomp.polyfills:$jscomp.global;for(var l=0;l<d.length-1;l++){var m=d[l];if(!(m in e))return;e=e[m]}d=d[d.length-1];c=$jscomp.IS_SYMBOL_NATIVE&&"es6"===c?e[d]:null;a=a(c);null!=a&&(b?$jscomp.defineProperty($jscomp.polyfills,d,{configurable:!0,writable:!0,value:a}):a!==c&&(void 0===$jscomp.propertyToPolyfillSymbol[d]&&($jscomp.propertyToPolyfillSymbol[d]=$jscomp.IS_SYMBOL_NATIVE?$jscomp.global.Symbol(d):
$jscomp.POLYFILL_PREFIX+d),d=$jscomp.propertyToPolyfillSymbol[d],$jscomp.defineProperty(e,d,{configurable:!0,writable:!0,value:a})))};$jscomp.polyfill("Math.sign",function(b){return b?b:function(a){a=Number(a);return 0===a||isNaN(a)?a:0<a?1:-1}},"es6","es3");
(function(b,a){"object"===typeof exports&&"undefined"!==typeof module?module.exports=a():"function"===typeof define&&define.amd?define(a):b.Stats=a()})(this,function(){var b=function(){function a(h){d.appendChild(h.dom);return h}function c(h){for(var k=0;k<d.children.length;k++)d.children[k].style.display=k===h?"block":"none";e=h}var e=0,d=document.createElement("div");d.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";d.addEventListener("click",function(h){h.preventDefault();
c(++e%d.children.length)},!1);var l=(performance||Date).now(),m=l,g=0,t=a(new b.Panel("FPS","#0ff","#002")),w=a(new b.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var u=a(new b.Panel("MB","#f08","#201"));c(0);return{REVISION:16,dom:d,addPanel:a,showPanel:c,begin:function(){l=(performance||Date).now()},end:function(){g++;var h=(performance||Date).now();w.update(h-l,200);if(h>=m+1E3&&(t.update(1E3*g/(h-m),100),m=h,g=0,u)){var k=performance.memory;u.update(k.usedJSHeapSize/
1048576,k.jsHeapSizeLimit/1048576)}return h},update:function(){l=this.end()},domElement:d,setMode:c}};b.Panel=function(a,c,e){var d=Infinity,l=0,m=Math.round,g=m(window.devicePixelRatio||1),t=80*g,w=48*g,u=3*g,h=2*g,k=3*g,n=15*g,p=74*g,q=30*g,r=document.createElement("canvas");r.width=t;r.height=w;r.style.cssText="width:80px;height:48px";var f=r.getContext("2d");f.font="bold "+9*g+"px Helvetica,Arial,sans-serif";f.textBaseline="top";f.fillStyle=e;f.fillRect(0,0,t,w);f.fillStyle=c;f.fillText(a,u,h);
f.fillRect(k,n,p,q);f.fillStyle=e;f.globalAlpha=.9;f.fillRect(k,n,p,q);return{dom:r,update:function(v,x){d=Math.min(d,v);l=Math.max(l,v);f.fillStyle=e;f.globalAlpha=1;f.fillRect(0,0,t,n);f.fillStyle=c;var y=f.fillText,z=Number((10*Math.abs(v)).toPrecision(15));y.call(f,Math.round(z)/10*Math.sign(v)+" "+a+" ("+m(d)+"-"+m(l)+")",u,h);f.drawImage(r,k+g,n,p-g,q,k,n,p-g,q);f.fillRect(k+p-g,n,g,q);f.fillStyle=e;f.globalAlpha=.9;f.fillRect(k+p-g,n,g,m((1-v/x)*q))}}};return b});
